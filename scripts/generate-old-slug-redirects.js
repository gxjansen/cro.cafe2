#!/usr/bin/env node

/**
 * Script to manage redirects from old episode slugs to new ones
 * 
 * This helps maintain backward compatibility when episode slugs change
 * between the old subdomain sites and the new unified site.
 * 
 * Usage:
 * 1. Add old->new slug mappings to the redirectMappings object below
 * 2. Run: node scripts/generate-old-slug-redirects.js
 * 3. Copy the output to public/_redirects in the appropriate section
 */

const redirectMappings = {
  de: {
    // Old slug â†’ New slug (without /podcast/ or /episodes/ prefix)
    'willkommen-bei-cro-cafe-auf-deutsch': 'cro-cafe-jetzt-auch-auf-deutsch',
    'customer-centricity-ki-im-fashion-e-commerce-mit-christina-skoeries-von-camel-active': '48-customer-centricity-ki-im-fashion-e-commerce-mit-christina-skoeries-von-camel-active',
    'hinter-den-kulissen-von-meta': '24-hinter-den-kulissen-von-dem-tech-giganten-meta-mit-michael-pietsch',
    // Add more German redirects here as needed
  },
  nl: {
    // Add Dutch redirects here
  },
  es: {
    // Add Spanish redirects here
  }
};

function generateRedirects() {
  const redirects = [];
  
  redirects.push('# ============================================================================');
  redirects.push('# OLD SLUG REDIRECTS - Map old episode URLs to current slugs');
  redirects.push('# ============================================================================');
  redirects.push('# Generated by scripts/generate-old-slug-redirects.js');
  redirects.push('# These handle cases where the URL slug has changed between old and new site');
  redirects.push('');
  
  for (const [lang, mappings] of Object.entries(redirectMappings)) {
    if (Object.keys(mappings).length === 0) continue;
    
    redirects.push(`# ${lang.toUpperCase()} episode redirects with changed slugs`);
    
    for (const [oldSlug, newSlug] of Object.entries(mappings)) {
      // Subdomain redirect
      redirects.push(`https://${lang}.cro.cafe/podcast/${oldSlug}  https://cro.cafe/${lang}/episodes/${newSlug}/  301!`);
    }
    
    redirects.push('');
    redirects.push(`# Also handle these on the main domain (in case someone manually changes the subdomain)`);
    
    for (const [oldSlug, newSlug] of Object.entries(mappings)) {
      // Main domain redirect
      redirects.push(`/${lang}/podcast/${oldSlug}  /${lang}/episodes/${newSlug}/  301!`);
    }
    
    redirects.push('');
  }
  
  return redirects.join('\n');
}

// Generate and output redirects
console.log(generateRedirects());
console.log('\n// Copy the above output to public/_redirects in the OLD SLUG REDIRECTS section');