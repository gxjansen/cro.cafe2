name: Content Synchronization from NocoDB

# Trigger the workflow on multiple events
on:
  # Schedule: Run every 6 hours to check for new content
  schedule:
    - cron: '0 */6 * * *'
  
  # Manual trigger via GitHub UI
  workflow_dispatch:
    inputs:
      force_overwrite:
        description: 'Force overwrite existing files'
        required: false
        default: 'false'
        type: boolean
      sync_images:
        description: 'Sync episode images'
        required: false
        default: 'true'
        type: boolean
      languages:
        description: 'Languages to sync (comma-separated: en,nl,de,es or "all")'
        required: false
        default: 'all'
        type: string
  
  # Trigger on push to main branch (for testing)
  push:
    branches:
      - main
    paths:
      - 'src/lib/engines/content-generator.ts'
      - 'src/lib/services/nocodb-service.ts'
      - 'scripts/generate-content.ts'
      - 'scripts/sync-images.ts'
      - '.github/workflows/sync-nocodb.yml'

# Environment variables
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  # Increase Node.js memory limit for NocoDB processing
  NODE_OPTIONS: '--max-old-space-size=4096'

# Define jobs
jobs:
  # Job 1: Generate content from NocoDB
  sync-nocodb-content:
    name: Sync NocoDB Content
    runs-on: ubuntu-latest
    
    # Set permissions for GitHub token
    permissions:
      contents: write
      pages: write
      id-token: write
    
    # Define outputs for use in other jobs
    outputs:
      episodes-generated: ${{ steps.content-gen.outputs.episodes-generated }}
      guests-generated: ${{ steps.content-gen.outputs.guests-generated }}
      hosts-generated: ${{ steps.content-gen.outputs.hosts-generated }}
      platforms-generated: ${{ steps.content-gen.outputs.platforms-generated }}
      files-deleted: ${{ steps.content-gen.outputs.files-deleted }}
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          npm ci
          npm run typecheck
      
      # Create directories for content
      - name: Create content directories
        run: |
          mkdir -p src/content/episodes
          mkdir -p src/content/guests
          mkdir -p public/images/episodes
      
      # Generate content from NocoDB
      - name: Generate content from NocoDB
        id: content-gen
        run: |
          # Set up command arguments
          ARGS="--overwrite"  # Always overwrite to prevent duplicate files
          
          # Note: force_overwrite input is now always enabled to prevent stale files
          
          if [ "${{ github.event.inputs.languages }}" != "all" ] && [ -n "${{ github.event.inputs.languages }}" ]; then
            ARGS="$ARGS --languages ${{ github.event.inputs.languages }}"
          fi
          
          # Run final working content generation with confirmed API patterns
          npx tsx scripts/generate-content-final.ts $ARGS 2>&1 | tee content-generation.log
          
          # Extract statistics from the console output in the log
          EPISODES_GENERATED=$(grep "Generated:" content-generation.log | grep "episodes" | sed 's/.*Generated: \([0-9]*\) episodes.*/\1/' || echo "0")
          GUESTS_GENERATED=$(grep "Generated:" content-generation.log | grep "guests" | sed 's/.*\([0-9]*\) guests.*/\1/' || echo "0")
          HOSTS_GENERATED=$(grep "Generated:" content-generation.log | grep "hosts" | sed 's/.*\([0-9]*\) hosts.*/\1/' || echo "0")
          PLATFORMS_GENERATED=$(grep "Generated:" content-generation.log | grep "platforms" | sed 's/.*\([0-9]*\) platforms.*/\1/' || echo "0")
          FILES_DELETED=$(grep "Deleted:" content-generation.log | grep "orphaned files" | sed 's/.*Deleted: \([0-9]*\) orphaned files.*/\1/' || echo "0")
          
          # Fallback to simpler extraction if the above doesn't work
          if [ "$EPISODES_GENERATED" = "0" ]; then
            EPISODES_GENERATED=$(grep "📊 Generated:" content-generation.log | tail -1 | sed 's/.*Generated: \([0-9]*\) episodes.*/\1/' || echo "0")
          fi
          
          echo "episodes-generated=$EPISODES_GENERATED" >> $GITHUB_OUTPUT
          echo "guests-generated=$GUESTS_GENERATED" >> $GITHUB_OUTPUT
          echo "hosts-generated=$HOSTS_GENERATED" >> $GITHUB_OUTPUT
          echo "platforms-generated=$PLATFORMS_GENERATED" >> $GITHUB_OUTPUT
          echo "files-deleted=$FILES_DELETED" >> $GITHUB_OUTPUT
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
          NOCODB_API_KEY: ${{ secrets.NOCODB_API_KEY }}
          NOCODB_BASE_URL: ${{ secrets.NOCODB_BASE_URL }}
          NOCODB_BASE_ID: ${{ secrets.NOCODB_BASE_ID }}
      
      # Check for changes in the repository
      - name: Check for changes
        id: check-changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in content files"
            git status --porcelain
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
      
      # Upload content generation report as artifact
      - name: Upload content generation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: content-generation-report
          path: |
            content-generation-report.md
            content-generation.log
          retention-days: 30
      
      # Commit and push changes
      - name: Commit and push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all content files (including new files)
          git add src/content/episodes/
          git add src/content/guests/
          git add src/content/hosts/
          git add src/content/platforms/
          
          # Track deletions using git add -u
          git add -u src/content/
          
          # Count deletions for better reporting
          DELETED_COUNT=$(git status --porcelain | grep "^D" | wc -l)
          
          # Add report file if it exists
          if [ -f content-generation-report.md ]; then
            git add content-generation-report.md
          fi
          
          # Create commit message with statistics
          EPISODES_GENERATED="${{ steps.content-gen.outputs.episodes-generated }}"
          GUESTS_GENERATED="${{ steps.content-gen.outputs.guests-generated }}"
          HOSTS_GENERATED="${{ steps.content-gen.outputs.hosts-generated }}"
          PLATFORMS_GENERATED="${{ steps.content-gen.outputs.platforms-generated }}"
          FILES_DELETED="${{ steps.content-gen.outputs.files-deleted }}"
          
          COMMIT_MSG="Update podcast content from NocoDB
          
          Episodes: ${EPISODES_GENERATED} generated
          Guests: ${GUESTS_GENERATED} generated  
          Hosts: ${HOSTS_GENERATED} generated
          Platforms: ${PLATFORMS_GENERATED} generated
          Files deleted: ${FILES_DELETED}
          
          Generated MDX files with multi-language support and cross-references"
          
          git commit -m "$COMMIT_MSG"
          
          # Pull latest changes before pushing to handle any race conditions
          git pull --rebase origin main || git pull origin main
          
          # Push with retry logic
          for i in {1..3}; do
            if git push; then
              echo "Push successful on attempt $i"
              break
            else
              echo "Push failed on attempt $i, retrying..."
              if [ $i -lt 3 ]; then
                sleep 5
                git pull --rebase origin main || git pull origin main
              fi
            fi
          done

  # Job 2: Sync episode images (runs only if content changes or forced)
  sync-images:
    name: Sync Episode Images
    runs-on: ubuntu-latest
    needs: sync-nocodb-content
    
    # Only run if there are content changes, manual trigger, or scheduled run
    if: |
      needs.sync-nocodb-content.outputs.has-changes == 'true' || 
      github.event.inputs.sync_images == 'true' ||
      github.event_name == 'schedule'
    
    permissions:
      contents: write
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Pull latest changes from content sync job
      - name: Pull latest changes
        run: git pull origin main
      
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Create images directory
      - name: Create images directory
        run: mkdir -p public/images/episodes
      
      # Sync episode images
      - name: Sync episode images
        run: |
          # Run image sync with appropriate options
          npx tsx scripts/sync-images.ts --output-dir public/images/episodes 2>&1 | tee image-sync.log
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
      
      # Check for new images
      - name: Check for new images
        id: check-images
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain public/images/)" ]; then
            echo "has-new-images=true" >> $GITHUB_OUTPUT
            echo "New images detected"
            git status --porcelain public/images/
          else
            echo "has-new-images=false" >> $GITHUB_OUTPUT
            echo "No new images"
          fi
      
      # Upload image sync report
      - name: Upload image sync report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-sync-report
          path: |
            image-sync-report.md
            image-sync.log
          retention-days: 30
      
      # Commit and push new images
      - name: Commit and push images
        if: steps.check-images.outputs.has-new-images == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add image files
          git add public/images/episodes/
          git add image-sync-report.md
          
          # Count new images
          NEW_IMAGES=$(git diff --cached --name-only public/images/episodes/ | wc -l)
          
          git commit -m "Add episode artwork images

          Synced ${NEW_IMAGES} episode images from Transistor CDN
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push

  # Job 3: Validate generated content
  validate-content:
    name: Validate Content
    runs-on: ubuntu-latest
    needs: [sync-nocodb-content, sync-images]
    
    # Run if content was generated (even if no changes)
    if: always() && needs.sync-nocodb-content.result == 'success'
    
    steps:
      # Checkout repository with latest changes
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Pull all changes
      - name: Pull latest changes
        run: git pull origin main
      
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Run TypeScript type checking
      - name: TypeScript type check
        run: npm run typecheck
      
      # Run content validation
      - name: Validate content collections
        run: |
          # Create validation script if it doesn't exist
          if [ ! -f scripts/validate-content.ts ]; then
            echo "Creating validation script..."
            cat > scripts/validate-content.ts << 'EOF'
          import { getCollection } from 'astro:content';
          
          async function validateContent() {
            try {
              console.log('Validating episodes collection...');
              const episodes = await getCollection('episodes');
              console.log(`✅ Episodes: ${episodes.length} valid entries`);
              
              console.log('Validating guests collection...');
              const guests = await getCollection('guests');
              console.log(`✅ Guests: ${guests.length} valid entries`);
              
              console.log('✅ All content validation passed!');
            } catch (error) {
              console.error('❌ Content validation failed:', error);
              process.exit(1);
            }
          }
          
          validateContent();
          EOF
          fi
          
          # Run validation
          npm run validate-content || echo "Validation script not available"
      
      # Test build to ensure everything works
      - name: Test build
        run: |
          npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

  # Job 4: Create summary and notifications
  summary:
    name: Create Summary
    runs-on: ubuntu-latest
    needs: [sync-nocodb-content, sync-images, validate-content]
    
    # Always run to provide summary
    if: always()
    
    steps:
      # Create job summary
      - name: Create job summary
        run: |
          echo "# NocoDB Content Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Content Generation" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.sync-nocodb-content.result }}" = "success" ]; then
            echo "✅ **NocoDB Content Sync**: Success" >> $GITHUB_STEP_SUMMARY
            echo "- Episodes Generated: ${{ needs.sync-nocodb-content.outputs.episodes-generated }}" >> $GITHUB_STEP_SUMMARY
            echo "- Guests Generated: ${{ needs.sync-nocodb-content.outputs.guests-generated }}" >> $GITHUB_STEP_SUMMARY
            echo "- Hosts Generated: ${{ needs.sync-nocodb-content.outputs.hosts-generated }}" >> $GITHUB_STEP_SUMMARY
            echo "- Platforms Generated: ${{ needs.sync-nocodb-content.outputs.platforms-generated }}" >> $GITHUB_STEP_SUMMARY
            echo "- Files Deleted: ${{ needs.sync-nocodb-content.outputs.files-deleted }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **NocoDB Content Sync**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Image Synchronization" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.sync-images.result }}" = "success" ]; then
            echo "✅ **Image Sync**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.sync-images.result }}" = "skipped" ]; then
            echo "⏭️ **Image Sync**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Image Sync**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Content Validation" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-content.result }}" = "success" ]; then
            echo "✅ **Content Validation**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Content Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY