---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import GuestCardVertical from '../../components/GuestCardVertical.astro';
import { getCollection } from 'astro:content';
import type { Language } from '../../types';

// Get all guests and filter out those with zero episodes
const allGuests = await getCollection('guests');
const guestsWithEpisodes = allGuests.filter(guest => 
  guest.data.episodes && guest.data.episodes.length > 0
);

// Sort guests alphabetically
const sortedGuests = guestsWithEpisodes.sort((a, b) => 
  a.data.name.localeCompare(b.data.name)
);

// Prepare filter data
const showFilters = {
  en: { name: 'English', flag: 'ðŸ‡¬ðŸ‡§', count: 0 },
  nl: { name: 'Dutch', flag: 'ðŸ‡³ðŸ‡±', count: 0 },
  de: { name: 'German', flag: 'ðŸ‡©ðŸ‡ª', count: 0 },
  es: { name: 'Spanish', flag: 'ðŸ‡ªðŸ‡¸', count: 0 }
};

// Count guests per show/language
sortedGuests.forEach(guest => {
  guest.data.languages.forEach(lang => {
    showFilters[lang].count++;
  });
});

// Get unique countries from LinkedIn data
const allCountries = new Set<string>();
sortedGuests.forEach(guest => {
  if (guest.data.linkedin_country) {
    allCountries.add(guest.data.linkedin_country);
  }
});
const countries = Array.from(allCountries).sort();

// Curated list of most relevant CRO/digital marketing skills with counts
const relevantSkills = [
  'Online Marketing',
  'E-commerce', 
  'Web Analytics',
  'Google Analytics',
  'Conversion Optimization',
  'SEO',
  'Digital Marketing',
  'User Experience',
  'Usability',
  'Analytics',
  'A/B Testing',
  'UX',
  'Marketing Strategy',
  'Performance Marketing',
  'Growth Hacking',
  'CRO',
  'Conversion Rate Optimization',
  'Digital Strategy',
  'Marketing Automation',
  'Email Marketing',
  'Content Marketing',
  'Social Media Marketing',
  'Pay Per Click',
  'PPC',
  'SEM',
  'Search Engine Marketing',
  'Data Analysis',
  'Customer Experience',
  'Lead Generation',
  'Marketing Research',
  'Brand Management',
  'Product Management',
  'Web Development',
  'JavaScript',
  'Marketing Analytics',
  'Customer Acquisition',
  'Retention Marketing',
  'Funnel Optimization',
  'Landing Page Optimization',
  'Mobile Marketing'
];

// Count guests for each relevant skill
const skillCounts: Record<string, number> = {};
relevantSkills.forEach(skill => {
  let count = 0;
  sortedGuests.forEach(guest => {
    if (guest.data.linkedin_skills) {
      const skillsText = typeof guest.data.linkedin_skills === 'string' 
        ? guest.data.linkedin_skills.toLowerCase()
        : '';
      if (skillsText.includes(skill.toLowerCase())) {
        count++;
      }
    }
  });
  if (count > 0) {
    skillCounts[skill] = count;
  }
});

// Sort skills by count and keep only those with guests
const skills = Object.entries(skillCounts)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 30) // Top 30 most popular relevant skills
  .map(([skill, count]) => ({ name: skill, count }));

// Helper function to get guest URL for a specific language
function getGuestUrl(guest: any, language: Language): string {
  const slug = guest.data.slug || guest.slug;
  return language === 'en' ? `/guests/${slug}/` : `/${language}/guests/${slug}/`;
}
---

<BaseLayout 
  title="All Guests - CRO.CAFE"
  description="Browse all CRO.CAFE podcast guests from all language editions"
  language="en"
  canonical="https://cro.cafe/all/guests/"
>
  <Header language="en" currentPath="/all/guests/" />
  <Breadcrumb language="en" currentPath="/all/guests/" />
  
  <main class="flex-grow">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Page Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-heading font-bold text-gray-900 dark:text-white mb-4">
          All Guests
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Explore all {sortedGuests.length} expert guests who have shared their insights on our podcast.
        </p>
      </div>

      <!-- Filter Controls -->
      <section class="mb-6">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-3">
          <!-- Single Row Layout -->
          <div class="flex flex-col lg:flex-row lg:items-center gap-4">
            <!-- Filter Label & Clear Button -->
            <div class="flex items-center justify-between lg:justify-start lg:gap-4 flex-shrink-0">
              <h2 class="text-sm font-semibold text-gray-900 dark:text-white">Filter:</h2>
              <button 
                id="clearFilters"
                class="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors lg:order-last"
              >
                Clear All
              </button>
            </div>

            <!-- Show Pills -->
            <div class="flex flex-wrap gap-1.5 flex-shrink-0">
              {Object.entries(showFilters).map(([lang, info]) => (
                <label class="inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    name="show" 
                    value={lang}
                    class="hidden peer"
                    checked
                  />
                  <div class="flex items-center gap-1.5 px-2.5 py-1.5 text-xs rounded-full border border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50 text-gray-500 dark:text-gray-400 transition-all
                    peer-checked:bg-primary-100 peer-checked:border-primary-500 peer-checked:text-primary-700 
                    dark:peer-checked:bg-primary-900/30 dark:peer-checked:border-primary-400 dark:peer-checked:text-primary-300
                    hover:border-primary-300 dark:hover:border-primary-500">
                    <span class="text-sm">{info.flag}</span>
                    <span class="font-medium">{info.name}</span>
                    <span class="opacity-70">({info.count})</span>
                  </div>
                </label>
              ))}
            </div>

            <!-- Compact Dropdowns -->
            <div class="flex gap-3 flex-grow lg:flex-grow-0 lg:ml-auto">
              <select 
                id="countryFilter"
                class="flex-1 lg:w-40 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-xs focus:ring-primary-500 focus:border-primary-500"
              >
                <option value="">All Countries</option>
                {countries.map(country => (
                  <option value={country}>{country}</option>
                ))}
              </select>

              <select 
                id="skillFilter"
                class="flex-1 lg:w-48 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-xs focus:ring-primary-500 focus:border-primary-500"
              >
                <option value="">All Expertise</option>
                {skills.map(skill => (
                  <option value={skill.name}>{skill.name} ({skill.count})</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </section>

      <!-- Results Info -->
      <div class="mb-6">
        <p id="resultsInfo" class="text-gray-600 dark:text-gray-400">
          Showing {sortedGuests.length} experts
        </p>
      </div>

      <!-- No Results Messages -->
      <div id="noShowsMessage" class="hidden text-center py-12">
        <div class="max-w-md mx-auto">
          <div class="text-gray-400 dark:text-gray-500 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Select a Show to View Experts</h3>
          <p class="text-gray-600 dark:text-gray-400">
            Please select at least one show to view experts. Use the filter buttons above to explore our guests.
          </p>
        </div>
      </div>

      <div id="noResultsMessage" class="hidden text-center py-12">
        <div class="max-w-md mx-auto">
          <div class="text-gray-400 dark:text-gray-500 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-3-3v3m5.036-8.05l-6.036 6.05-6.036-6.05A7.5 7.5 0 0112 3c2.07 0 3.946.835 5.304 2.186z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">No Matching Experts Found</h3>
          <p class="text-gray-600 dark:text-gray-400">
            Try adjusting your filters to see more results. You can change the show, country, or expertise filters above.
          </p>
        </div>
      </div>

      <!-- Filtered Guests Grid -->
      <section>
        <div id="guestsGrid" class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {sortedGuests.map((guest) => (
            <div 
              class="guest-card"
              data-languages={JSON.stringify(guest.data.languages)}
              data-country={guest.data.linkedin_country || ''}
              data-skills={guest.data.linkedin_skills || ''}
            >
              <GuestCardVertical guest={guest} size="large" showEpisodeCount={true} />
            </div>
          ))}
        </div>
      </section>
    </div>
  </main>
</BaseLayout>

<script>
  // Guest filtering functionality
  function initializeFilters() {
    const showCheckboxes = document.querySelectorAll('input[name="show"]');
    const countryFilter = document.getElementById('countryFilter') as HTMLSelectElement;
    const skillFilter = document.getElementById('skillFilter') as HTMLSelectElement;
    const clearButton = document.getElementById('clearFilters');
    const resultsInfo = document.getElementById('resultsInfo');
    const guestsGrid = document.getElementById('guestsGrid');
    
    function filterGuests() {
      const selectedShows = Array.from(showCheckboxes)
        .filter((cb): cb is HTMLInputElement => cb instanceof HTMLInputElement && cb.checked)
        .map((cb) => cb.value);
      
      const selectedCountry = countryFilter.value;
      const selectedSkill = skillFilter.value;
      
      const guestCards = guestsGrid?.querySelectorAll('.guest-card') || [];
      const noShowsMessage = document.getElementById('noShowsMessage');
      const noResultsMessage = document.getElementById('noResultsMessage');
      let visibleCount = 0;
      
      // Check if no shows are selected
      if (selectedShows.length === 0) {
        // Hide all cards and show no shows message
        guestCards.forEach((card) => {
          if (card instanceof HTMLElement) {
            card.style.display = 'none';
          }
        });
        if (guestsGrid) guestsGrid.style.display = 'none';
        if (noShowsMessage) noShowsMessage.classList.remove('hidden');
        if (noResultsMessage) noResultsMessage.classList.add('hidden');
        if (resultsInfo) resultsInfo.textContent = 'No filters selected';
        return;
      }
      
      // Shows are selected, hide no shows message
      if (noShowsMessage) noShowsMessage.classList.add('hidden');
      
      // Apply filters and count visible guests
      guestCards.forEach((card) => {
        if (!(card instanceof HTMLElement)) return;
        
        const languages = JSON.parse(card.getAttribute('data-languages') || '[]');
        const country = card.getAttribute('data-country') || '';
        const skills = card.getAttribute('data-skills') || '';
        
        // Check show filter (we know selectedShows.length > 0 at this point)
        const showMatch = languages.some((lang: string) => selectedShows.includes(lang));
        
        // Check country filter
        const countryMatch = !selectedCountry || country === selectedCountry;
        
        // Check skill filter
        const skillMatch = !selectedSkill || skills.toLowerCase().includes(selectedSkill.toLowerCase());
        
        const shouldShow = showMatch && countryMatch && skillMatch;
        
        if (shouldShow) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Show appropriate message based on results
      if (visibleCount === 0) {
        // No results from filter combination
        if (guestsGrid) guestsGrid.style.display = 'none';
        if (noResultsMessage) noResultsMessage.classList.remove('hidden');
      } else {
        // Has results, show grid and hide no results message
        if (guestsGrid) guestsGrid.style.display = 'grid';
        if (noResultsMessage) noResultsMessage.classList.add('hidden');
      }
      
      // Update results info
      if (resultsInfo) {
        if (visibleCount === 0) {
          resultsInfo.textContent = 'No matching experts found';
        } else {
          const filterText: string[] = [];
          if (selectedShows.length > 0 && selectedShows.length < 4) {
            const showNames = selectedShows.map((lang: string) => {
              const checkbox = document.querySelector(`input[value="${lang}"]`) as HTMLInputElement;
              return checkbox?.parentElement?.querySelector('span:nth-child(2)')?.textContent;
            }).filter(Boolean);
            filterText.push(showNames.join(', '));
          }
          if (selectedCountry) filterText.push(selectedCountry);
          if (selectedSkill) filterText.push(selectedSkill);
          
          const filterDescription = filterText.length > 0 ? ` (${filterText.join(', ')})` : '';
          resultsInfo.textContent = `Showing ${visibleCount} experts${filterDescription}`;
        }
      }
    }
    
    function clearFilters() {
      showCheckboxes.forEach((cb) => {
        if (cb instanceof HTMLInputElement) {
          cb.checked = true;
        }
      });
      countryFilter.value = '';
      skillFilter.value = '';
      filterGuests();
    }
    
    // Event listeners
    showCheckboxes.forEach(cb => cb.addEventListener('change', filterGuests));
    countryFilter?.addEventListener('change', filterGuests);
    skillFilter?.addEventListener('change', filterGuests);
    clearButton?.addEventListener('click', clearFilters);
    
    // Initialize with all filters active
    filterGuests();
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }
</script>