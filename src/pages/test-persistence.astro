---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout
  title="View Transitions Audio Test"
  description="Testing audio persistence with View Transitions"
>
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">Audio Persistence Test</h1>
    
    <div class="space-y-4 mb-8">
      <p class="text-lg">This page tests audio persistence across navigation using View Transitions.</p>
      
      <div class="bg-blue-100 dark:bg-blue-900 p-4 rounded-lg">
        <h2 class="font-semibold mb-2">Instructions:</h2>
        <ol class="list-decimal list-inside space-y-2">
          <li>Load an episode using the button below</li>
          <li>Start playing the audio</li>
          <li>Navigate to other pages using the links</li>
          <li>Audio should continue playing seamlessly!</li>
        </ol>
      </div>
    </div>

    <div class="space-y-4 mb-8">
      <button 
        id="loadTestEpisode" 
        class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
      >
        Load Test Episode
      </button>
      
      <button 
        id="playTestEpisode" 
        class="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600"
      >
        Play Audio
      </button>
      
      <button 
        id="inspectAudio" 
        class="px-6 py-3 bg-purple-500 text-white rounded-lg hover:bg-purple-600"
      >
        Inspect Audio Element
      </button>
      
      <button 
        id="testProxy" 
        class="px-6 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600"
      >
        Test Audio Proxy
      </button>
      
      <div id="status" class="p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
        <p>Status: Waiting for episode load...</p>
      </div>
    </div>

    <div class="border-t pt-8">
      <h2 class="text-xl font-semibold mb-4">Test Navigation Links:</h2>
      <nav class="space-y-2">
        <a href="/" class="block text-blue-500 hover:underline">→ Go to Homepage</a>
        <a href="/episodes" class="block text-blue-500 hover:underline">→ Go to Episodes</a>
        <a href="/about" class="block text-blue-500 hover:underline">→ Go to About</a>
        <a href="/test-persistence" class="block text-blue-500 hover:underline">→ Reload This Page</a>
      </nav>
    </div>
  </main>

  <script>
    // Clear any existing state for clean testing
    if (window.audioPlayerActions) {
      window.audioPlayerActions.clearPlayer();
      console.log('🧹 Cleared existing audio state for clean test');
    }
    
    // Use a real episode from the podcast
    const testEpisode = {
      id: 'live-dutch-cro-awards-manuel-dacosta',
      title: 'Why focussing on a culture of experimentation is a waste of time, with Manuel DaCosta',
      audioUrl: 'https://media.transistor.fm/65c88289/d9718325.mp3',
      duration: 1767,
      description: 'Guest: Manuel Da Costa URL: https://www.cro.cafe/guest/manuel-da-costa',
      publishDate: '2019-10-20T13:00:00.000Z',
      imageUrl: 'https://img.transistor.fm/j-NEp0W9gcASp2Cl1C_0jxfWRPEY8yc58s8EsOhs6iE/rs:fill:3000:3000:1/q:60/aHR0cHM6Ly9pbWct/dXBsb2FkLXByb2R1/Y3Rpb24udHJhbnNp/c3Rvci5mbS83NjM4/NjcyMDAwOGEyYTIw/ZWI1OTcwMzg1YTBl/NDRlYy5qcGVn.webp',
      slug: 'live-dutch-cro-awards-manuel-dacosta',
      guests: ['Manuel Da Costa'],
      language: 'en'
    };

    // Load test episode
    document.getElementById('loadTestEpisode')?.addEventListener('click', () => {
      console.log('🔍 Test: Load button clicked');
      
      if (window.audioPlayerActions) {
        console.log('🔍 Test: audioPlayerActions available');
        
        // Check audio manager state
        if (window.enhancedAudioManager) {
          const audioState = window.enhancedAudioManager.getState();
          console.log('🔍 Test: Audio manager state before load:', audioState);
        }
        
        window.audioPlayerActions.loadEpisode(testEpisode);
        
        document.getElementById('status').innerHTML = `
          <p class="text-green-600">✅ Episode loaded!</p>
          <p class="mt-2">Now click play in the audio player and navigate to other pages.</p>
          <p class="text-sm mt-1 text-gray-600">The audio should keep playing!</p>
        `;
        
        // Check state after load
        setTimeout(() => {
          const state = window.audioPlayerStore.get();
          console.log('🔍 Test: Store state after load:', state);
          
          if (window.enhancedAudioManager) {
            const audioState = window.enhancedAudioManager.getState();
            console.log('🔍 Test: Audio manager state after load:', audioState);
          }
        }, 1000);
      } else {
        document.getElementById('status').innerHTML = '<p class="text-red-600">❌ Audio player not available</p>';
      }
    });

    // Play button
    document.getElementById('playTestEpisode')?.addEventListener('click', async () => {
      console.log('🔍 Test: Play button clicked');
      
      // Check the audio element directly
      if (window.enhancedAudioManager && window.enhancedAudioManager.audioElement) {
        const audio = window.enhancedAudioManager.audioElement;
        console.log('🔍 Direct audio element check:', {
          src: audio.src,
          readyState: audio.readyState,
          networkState: audio.networkState,
          error: audio.error,
          paused: audio.paused,
          currentTime: audio.currentTime
        });
        
        // Try direct play on audio element
        try {
          console.log('🔍 Attempting direct audio.play()...');
          await audio.play();
          console.log('✅ Direct play succeeded!');
        } catch (err) {
          console.error('❌ Direct play failed:', err);
        }
      }
      
      if (window.audioPlayerActions) {
        await window.audioPlayerActions.play();
        console.log('🔍 Test: Play action completed');
      }
    });

    // Inspect audio element button
    document.getElementById('inspectAudio')?.addEventListener('click', () => {
      console.log('🔍 Inspecting audio state...');
      
      // Check store state
      if (window.audioPlayerStore) {
        const state = window.audioPlayerStore.get();
        console.log('📦 Store state:', state);
      }
      
      // Check audio manager state
      if (window.enhancedAudioManager) {
        const managerState = window.enhancedAudioManager.getState();
        console.log('🎵 Audio manager state:', managerState);
        
        // Check audio element directly
        if (window.enhancedAudioManager.audioElement) {
          const audio = window.enhancedAudioManager.audioElement;
          console.log('🔊 Audio element:', {
            exists: !!audio,
            src: audio.src,
            readyState: audio.readyState,
            networkState: audio.networkState,
            error: audio.error,
            paused: audio.paused,
            duration: audio.duration,
            currentTime: audio.currentTime,
            volume: audio.volume,
            muted: audio.muted,
            autoplay: audio.autoplay,
            controls: audio.controls,
            crossOrigin: audio.crossOrigin,
            preload: audio.preload
          });
          
          // Check if audio element is in DOM
          const audioInDom = document.querySelector('audio');
          console.log('🔊 Audio in DOM:', !!audioInDom, audioInDom === audio);
        }
      } else {
        console.error('❌ Audio manager not available');
      }
    });

    // Test proxy button
    document.getElementById('testProxy')?.addEventListener('click', async () => {
      console.log('🔍 Testing audio proxy...');
      const proxyUrl = `/api/audio-proxy?url=${encodeURIComponent(testEpisode.audioUrl)}`;
      
      try {
        // Test fetch
        const response = await fetch(proxyUrl, { method: 'HEAD' });
        console.log('✅ Proxy HEAD response:', {
          status: response.status,
          contentType: response.headers.get('Content-Type'),
          contentLength: response.headers.get('Content-Length'),
          cors: response.headers.get('Access-Control-Allow-Origin')
        });
        
        // Test with audio element
        const testAudio = new Audio();
        testAudio.src = proxyUrl;
        
        testAudio.addEventListener('loadstart', () => {
          console.log('✅ Proxy audio: loadstart');
        });
        
        testAudio.addEventListener('loadedmetadata', () => {
          console.log('✅ Proxy audio: metadata loaded', {
            duration: testAudio.duration,
            readyState: testAudio.readyState
          });
        });
        
        testAudio.addEventListener('error', (e) => {
          console.error('❌ Proxy audio error:', e);
        });
        
        testAudio.load();
        
        document.getElementById('status').innerHTML = '<p class="text-green-600">✅ Testing proxy... check console for results</p>';
      } catch (err) {
        console.error('❌ Proxy test failed:', err);
        document.getElementById('status').innerHTML = `<p class="text-red-600">❌ Proxy test failed: ${err.message}</p>`;
      }
    });

    // Monitor audio state
    if (window.audioPlayerStore) {
      window.audioPlayerStore.subscribe((state) => {
        if (state.isPlaying) {
          console.log('🎵 Audio is playing during navigation!');
        }
      });
    }

    // Log View Transitions events
    document.addEventListener('astro:page-load', () => {
      console.log('📄 Page loaded via View Transitions');
      
      // Check if audio is still playing
      if (window.audioPlayerStore) {
        const state = window.audioPlayerStore.get();
        if (state.isPlaying) {
          console.log('✅ Audio is STILL PLAYING after navigation!');
        }
      }
    });
  </script>
</BaseLayout>