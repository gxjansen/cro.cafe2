---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Header from '../../../components/Header.astro';
import EpisodeImage from '../../../components/EpisodeImage.astro';
import GuestCard from '../../../components/GuestCard.astro';
import HostCard from '../../../components/HostCard.astro';
import SchemaPodcastEpisode from '../../../components/schema/SchemaPodcastEpisode.astro';
import { getEpisodeBySlug, getGuestBySlug, getGuestUrl, getHostBySlug } from '../../../utils/content';

export async function getStaticPaths() {
  const { getCollection } = await import('astro:content');
  const episodes = await getCollection('episodes');
  
  // Generate paths for English episodes only
  const englishEpisodes = episodes.filter(ep => ep.data.language === 'en' && ep.data.status === 'published');
  
  return englishEpisodes.map(episode => ({
    params: { slug: episode.data.slug || episode.slug },
    props: { episode }
  }));
}

const { episode } = Astro.props;
const language = 'en';

// Get episode data
const episodeData = await getEpisodeBySlug(episode.slug, language);
if (!episodeData) {
  return Astro.redirect('/en/episodes/', 404);
}

// Get guests for this episode
const guests = [];
if (episodeData.data.guests && episodeData.data.guests.length > 0) {
  for (const guestSlug of episodeData.data.guests) {
    const guest = await getGuestBySlug(guestSlug);
    if (guest) {
      guests.push(guest);
    }
  }
}

// Get hosts for this episode
const hosts = [];
if (episodeData.data.hosts && episodeData.data.hosts.length > 0) {
  for (const hostSlug of episodeData.data.hosts) {
    const host = await getHostBySlug(hostSlug);
    if (host) {
      hosts.push(host);
    }
  }
}

const title = `${episodeData.data.title} - CRO.CAFE Podcast`;
const description = episodeData.data.description || `Listen to ${episodeData.data.title} on the CRO.CAFE podcast.`;
---

<BaseLayout 
  title={title}
  description={description}
  language={language}
  canonical={`https://cro.cafe/en/episodes/${episodeData.slug}/`}
>
  <Header language={language} currentPath={`/en/episodes/${episodeData.slug}/`} />
  
  <main id="main-content" class="flex-1 py-8" tabindex="-1">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
        <!-- Main Episode Content -->
        <div class="lg:col-span-2">
          <!-- Episode Header -->
          <div class="mb-8">
            <div class="flex items-center gap-4 mb-4">
              <span class="px-3 py-1 bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 text-sm font-medium rounded-full">
                Season {episodeData.data.season} â€¢ Episode {episodeData.data.episode}
              </span>
              {episodeData.data.pubDate && (
                <time class="text-gray-500 dark:text-gray-400 text-sm">
                  {new Date(episodeData.data.pubDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
              )}
            </div>
            
            <h1 class="text-3xl md:text-4xl font-heading font-bold text-gray-900 dark:text-white mb-4">
              {episodeData.data.title}
            </h1>
            
            {episodeData.data.description && (
              <p class="text-lg text-gray-600 dark:text-gray-300 leading-relaxed">
                {episodeData.data.description}
              </p>
            )}
          </div>

          <!-- Episode Player/Audio -->
          {episodeData.data.audio_url && (
            <div class="mb-8">
              <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
                <audio 
                  controls 
                  class="w-full"
                  preload="metadata"
                >
                  <source src={episodeData.data.audio_url} type="audio/mpeg" />
                  Your browser does not support the audio element.
                </audio>
              </div>
            </div>
          )}

          <!-- Episode Content -->
          {episodeData.body && (
            <div class="prose prose-lg dark:prose-invert max-w-none mb-8">
              <episodeData.Content />
            </div>
          )}

          <!-- Keywords/Topics -->
          {episodeData.data.keywords && episodeData.data.keywords.length > 0 && (
            <div class="mb-8">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Topics Covered</h3>
              <div class="flex flex-wrap gap-2">
                {episodeData.data.keywords.map((keyword) => (
                  <span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-full">
                    {keyword}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1">
          <!-- Episode Image -->
          {episodeData.data.image && (
            <div class="mb-8">
              <EpisodeImage 
                episode={episodeData}
                class="w-full rounded-lg shadow-lg"
              />
            </div>
          )}

          <!-- Guests Section -->
          {guests.length > 0 && (
            <div class="mb-8">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                {guests.length === 1 ? 'Guest' : 'Guests'}
              </h3>
              <div class="space-y-4">
                {guests.map((guest) => (
                  <GuestCard 
                    guest={guest} 
                    language={language}
                    showEpisodeCount={false}
                  />
                ))}
              </div>
            </div>
          )}

          <!-- Hosts Section -->
          {hosts.length > 0 && (
            <div class="mb-8">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                {hosts.length === 1 ? 'Host' : 'Hosts'}
              </h3>
              <div class="space-y-4">
                {hosts.map((host) => (
                  <HostCard 
                    host={host} 
                    language={language}
                  />
                ))}
              </div>
            </div>
          )}

          <!-- Episode Stats -->
          <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Episode Details</h3>
            <dl class="space-y-3">
              {episodeData.data.duration && (
                <div>
                  <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Duration</dt>
                  <dd class="text-sm text-gray-900 dark:text-white">{episodeData.data.duration}</dd>
                </div>
              )}
              {episodeData.data.file_size && (
                <div>
                  <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">File Size</dt>
                  <dd class="text-sm text-gray-900 dark:text-white">{episodeData.data.file_size}</dd>
                </div>
              )}
              <div>
                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Language</dt>
                <dd class="text-sm text-gray-900 dark:text-white">English</dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
    </div>
  </main>

  <SchemaPodcastEpisode episode={episodeData} language={language} />
</BaseLayout>