---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Header from '../../../components/Header.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import EpisodeCard from '../../../components/EpisodeCard.astro';
import GuestProfilePicture from '../../../components/GuestProfilePicture.astro';
import CareerTimelineV2 from '../../../components/CareerTimelineV2.astro';
import SchemaPerson from '../../../components/schema/SchemaPerson.astro';
import GuestOtherCompany from '../../../components/GuestOtherCompany.astro';
import CountryFlag from '../../../components/CountryFlag.astro';
import { getGuestEpisodes, getGuestWithLinkedIn } from '../../../utils/content';
import { getOptimalProfessionalDisplay, checkIsFreelancer } from '../../../utils/guest-display-utils';
import { filterExcludedSkills } from '../../../utils/excludedSkills';
import type { Language } from '../../../types';

export async function getStaticPaths() {
  const { getCollection } = await import('astro:content');
  const guests = await getCollection('guests');
  const languages: Language[] = ['en', 'nl', 'de', 'es'];
  
  // Generate paths for each guest in each language they support
  const paths = [];
  for (const guest of guests) {
    for (const lang of languages) {
      if (guest.data.languages.includes(lang)) {
        paths.push({
          params: { lang, slug: guest.data.slug || guest.slug },
          props: { guest, language: lang }
        });
      }
    }
  }
  
  return paths;
}

const { guest, language } = Astro.props;
const guestSlug = guest.data.slug || guest.slug;

// Get guest data with LinkedIn enrichment
const guestWithLinkedIn = await getGuestWithLinkedIn(guestSlug);

// Get all episodes featuring this guest in the current language
const guestEpisodes = await getGuestEpisodes(guestSlug, language);

// Get popular platform links
const { getCollection: getContentCollection } = await import('astro:content');
const platforms = await getContentCollection('platforms');
const spotify = platforms.find(p => p.data.slug === 'spotify');
const applePodcasts = platforms.find(p => p.data.slug === 'apple-podcasts');
const youtube = platforms.find(p => p.data.slug === 'youtube');

// Translations
const translations = {
  en: {
    backToGuests: '← Back to All Guests',
    about: 'About',
    at: 'at',
    episodesWith: 'Episodes with',
    availableLanguages: 'Available in other languages',
    viewIn: 'View in',
    discoverMore: 'Discover More CRO Insights',
    exploreAll: 'Explore all episodes and learn from industry experts',
    browseAllEpisodes: 'Browse All Episodes',
    meetMoreGuests: 'Meet More Guests',
    subscribe: 'Subscribe to CRO.CAFE',
    listenOn: 'Listen on',
    morePlatforms: 'More platforms →'
  },
  nl: {
    backToGuests: '← Terug naar Alle Gasten',
    about: 'Over',
    at: 'bij',
    episodesWith: 'Afleveringen met',
    availableLanguages: 'Beschikbaar in andere talen',
    viewIn: 'Bekijk in het',
    discoverMore: 'Ontdek Meer CRO Inzichten',
    exploreAll: 'Verken alle afleveringen en leer van industrie experts',
    browseAllEpisodes: 'Bekijk Alle Afleveringen',
    meetMoreGuests: 'Ontmoet Meer Gasten',
    subscribe: 'Abonneer je op CRO.CAFE',
    listenOn: 'Luister op',
    morePlatforms: 'Meer platforms →'
  },
  de: {
    backToGuests: '← Zurück zu Allen Gästen',
    about: 'Über',
    at: 'bei',
    episodesWith: 'Folgen mit',
    availableLanguages: 'In anderen Sprachen verfügbar',
    viewIn: 'Ansehen auf',
    discoverMore: 'Entdecken Sie mehr CRO Einblicke',
    exploreAll: 'Entdecken Sie alle Folgen und lernen Sie von Branchenexperten',
    browseAllEpisodes: 'Alle Folgen durchsuchen',
    meetMoreGuests: 'Mehr Gäste kennenlernen',
    subscribe: 'CRO.CAFE abonnieren',
    listenOn: 'Anhören auf',
    morePlatforms: 'Weitere Plattformen →'
  },
  es: {
    backToGuests: '← Volver a Todos los Invitados',
    about: 'Acerca de',
    at: 'en',
    episodesWith: 'Episodios con',
    availableLanguages: 'Disponible en otros idiomas',
    viewIn: 'Ver en',
    discoverMore: 'Descubre más perspectivas de CRO',
    exploreAll: 'Explora todos los episodios y aprende de expertos de la industria',
    browseAllEpisodes: 'Ver todos los episodios',
    meetMoreGuests: 'Conoce más invitados',
    subscribe: 'Suscríbete a CRO.CAFE',
    listenOn: 'Escuchar en',
    morePlatforms: 'Más plataformas →'
  }
};

const t = translations[language];

// Language names mapping
const languageNames = {
  en: { nl: 'Engels', de: 'Englisch', es: 'inglés' },
  nl: { en: 'Dutch', de: 'Niederländisch', es: 'neerlandés' },
  de: { en: 'German', nl: 'Duits', es: 'alemán' },
  es: { en: 'Spanish', nl: 'Spaans', de: 'Spanisch' }
};

// SEO metadata - Use LinkedIn data when available
const guestName = guestWithLinkedIn?.linkedInData?.fullName || guestWithLinkedIn?.name || guest.data.name;
const guestBio = guestWithLinkedIn?.linkedInData?.bio || guestWithLinkedIn?.bio || guest.data.bio;
const profilePicUrl = guest.data.imageUrl || `/images/guests/${guestSlug}.jpeg`; // Use local image, not LinkedIn URL

const title = `${guestName} - CRO.CAFE Podcast`;
const description = guestBio.substring(0, 160);

// Since we have a global guest page, set canonical to that and don't use hreflang
// This prevents duplicate content issues
const hreflang = undefined;

// Get LinkedIn URL from various sources
const linkedInUrl = guestWithLinkedIn?.linkedInData?.url || 
                   guestWithLinkedIn?.linkedin ||
                   guest.data.linkedin ||
                   guest.data.socialLinks?.find((link: any) => link.platform === 'linkedin')?.url ||
                   null;
---

<BaseLayout 
  title={title}
  description={description}
  language={language}
  canonical={`https://cro.cafe/guests/${guestSlug}/`}
  hreflang={hreflang}
  ogImage={profilePicUrl}
>
  <!-- Person Schema for Guest -->
  <SchemaPerson 
    person={guest}
    type="guest"
    url={`https://cro.cafe/${language}/guests/${guestSlug}/`}
  />
  <Header language={language} currentPath={`/${language}/guests/`} />
  <Breadcrumb 
    language={language} 
    currentPath={`/${language}/guests/${guestSlug}/`}
    guestName={guest.data.name}
  />
  
  <main class="flex-grow">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="layout-with-sidebar">
        <!-- Main Content -->
        <article class="min-w-0">
      <!-- Guest Header -->
      <header class="mb-lg">
        <div class="flex items-center gap-4 text-sm text-subtle mb-md">
          <a 
            href={`/${language}/guests/`} 
            class="nav-back-link"
            aria-label={t.backToGuests.replace('←', 'Navigate back to')}
          >
            <span aria-hidden="true">←</span>
            <span>{t.backToGuests.replace('← ', '')}</span>
          </a>
        </div>
        
        <div class="flex flex-col md:flex-row gap-md items-start">
          <div class="relative flex-shrink-0">
            <GuestProfilePicture 
              guest={guestWithLinkedIn || guest}
              size="lg"
              class="w-32 h-32 md:w-40 md:h-40 rounded-full object-cover"
              showLinkedInBadge={false}
            />
          </div>
          
          <div class="flex-1">
            <h1 class="text-3xl md:text-4xl lg:text-5xl font-heading font-bold text-gray-900 dark:text-white mb-sm balance-text">
              {guestName}
            </h1>
            
{/* Extract professional data and apply deduplication */}
{(() => {
  const role = guestWithLinkedIn?.linkedInData?.currentRole || guestWithLinkedIn?.role || guest.data.role || guest.data.title;
  const headline = guestWithLinkedIn?.linkedInData?.headline || guest.data.linkedin_headline;
  const company = guestWithLinkedIn?.linkedInData?.currentCompany || null;
  const isFreelancer = checkIsFreelancer(headline, role);
  
  const professionalDisplay = getOptimalProfessionalDisplay(
    { role, company, headline, isFreelancer },
    language,
    translations
  );
  
  return (
    <div class="mb-sm">
      {professionalDisplay.primary && (
        <p class="text-professional-primary">
          {professionalDisplay.primary}
        </p>
      )}
      {professionalDisplay.showBoth && professionalDisplay.secondary && (
        <p class="text-professional-secondary">
          {professionalDisplay.secondary}
        </p>
      )}
    </div>
  );
})()}
            
            {/* Country flag */}
            {guestWithLinkedIn?.linkedInData?.country && (
              <div class="mb-md">
                <CountryFlag 
                  country={guestWithLinkedIn.linkedInData.country} 
                  size="md"
                  showName={true}
                />
              </div>
            )}
            
            {/* Social Links */}
            <div class="flex flex-wrap gap-3 mt-md">
              {guest.data.website && (
                <a 
                  href={guest.data.website} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300"
                >
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM4.332 8.027a6.012 6.012 0 011.912-2.706C6.512 5.73 6.974 6 7.5 6A1.5 1.5 0 019 7.5V8a2 2 0 004 0 2 2 0 011.523-1.943A5.977 5.977 0 0116 10c0 .34-.028.675-.083 1H15a2 2 0 00-2 2v2.197A5.973 5.973 0 0110 16v-2a2 2 0 00-2-2 2 2 0 01-2-2 2 2 0 00-1.668-1.973z" clip-rule="evenodd" />
                  </svg>
                  Website
                </a>
              )}
              
              {guest.data.twitter && (
                <a 
                  href={`https://twitter.com/${guest.data.twitter}`} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="flex items-center gap-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300"
                >
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                  </svg>
                  Twitter
                </a>
              )}
              
              {linkedInUrl && (
                <a 
                  href={linkedInUrl} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="inline-flex items-center gap-2 px-4 py-2 bg-[#0077B5] text-white rounded-md hover:bg-[#005582] transition-colors font-medium"
                >
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                  Connect on LinkedIn
                </a>
              )}
            </div>
          </div>
        </div>
      </header>

      <!-- Bio Section -->
      {(guestWithLinkedIn?.linkedInData?.bio || guest.data.bio) && (
        <section class="prose prose-lg dark:prose-invert max-w-none mb-lg content-spacing">
          <h2 class="text-2xl lg:text-3xl">{t.about} {guestName}</h2>
          
          {/* LinkedIn bio if available */}
          {guestWithLinkedIn?.linkedInData?.bio && (
            <div class="mb-md">
              <p class="whitespace-pre-wrap">{guestWithLinkedIn.linkedInData.bio}</p>
            </div>
          )}
          
          {/* Original bio if different or LinkedIn bio not available */}
          {(!guestWithLinkedIn?.linkedInData?.bio || 
            (guest.data.bio && guest.data.bio !== guestWithLinkedIn.linkedInData.bio)) && (
            <div class="mt-md">
              {guestWithLinkedIn?.linkedInData?.bio && (
                <p class="text-additional-info">Additional information:</p>
              )}
              <p>{guest.data.bio}</p>
            </div>
          )}
        </section>
      )}
      
      {/* LinkedIn Skills Section */}
      {(() => {
        // Handle both linkedInData.skills (array) and guest.data.linkedin_skills (string)
        let skills: string[] = [];
        
        // Try to get skills from LinkedIn data first
        if (guestWithLinkedIn?.linkedInData?.skills && Array.isArray(guestWithLinkedIn.linkedInData.skills)) {
          skills = guestWithLinkedIn.linkedInData.skills;
        } 
        // Fall back to parsing guest.data.linkedin_skills if available
        else if (guest.data.linkedin_skills) {
          try {
            // Handle both JSON array and comma-separated string formats
            const skillsData = guest.data.linkedin_skills;
            if (typeof skillsData === 'string') {
              // Try parsing as JSON first
              try {
                const parsed = JSON.parse(skillsData);
                if (Array.isArray(parsed)) {
                  skills = parsed.filter(skill => typeof skill === 'string');
                }
              } catch {
                // If JSON parsing fails, treat as comma-separated string
                skills = skillsData.split(',').map(skill => skill.trim()).filter(Boolean);
              }
            }
          } catch (error) {
            console.error('Error parsing skills:', error);
          }
        }
        
        // Filter and render skills if we have any
        if (skills.length > 0) {
          const filteredSkills = filterExcludedSkills(skills);
          if (filteredSkills.length > 0) {
            return (
              <section class="mb-lg">
                <h3 class="text-xl lg:text-2xl font-heading font-semibold text-gray-900 dark:text-white mb-md">Skills & Expertise</h3>
                <div class="flex flex-wrap gap-xs">
                  {filteredSkills.map((skill: string) => (
                    <a 
                      href={`/all/guests/?expertise=${encodeURIComponent(skill)}`}
                      class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 dark:bg-primary-900/30 text-primary-800 dark:text-primary-200 hover:bg-primary-200 dark:hover:bg-primary-900/50 transition-colors duration-200 cursor-pointer"
                      title={`View all guests with ${skill} expertise`}
                    >
                      {skill}
                    </a>
                  ))}
                </div>
              </section>
            );
          }
        }
        return null;
      })()}
      
      {/* Career Timeline */}
      {guestWithLinkedIn?.linkedInData?.experiences && 
       guestWithLinkedIn.linkedInData.experiences.length > 0 && 
       guestEpisodes.length > 0 && (
        (() => {
          const oldestEpisode = guestEpisodes.sort((a, b) => a.data.pubDate.getTime() - b.data.pubDate.getTime())[0];
          const firstEpisodeDate = oldestEpisode.data.pubDate.toISOString();
          
          return (
            <CareerTimelineV2
              experiences={JSON.stringify(guestWithLinkedIn.linkedInData.experiences)}
              firstEpisodeDate={firstEpisodeDate}
              episodeDates={guestEpisodes.map(ep => ep.data.pubDate.toISOString())}
              guestName={guest.data.name}
            />
          );
        })()
      )}

      <!-- Other Guests from Same Company -->
      <GuestOtherCompany guest={guest} language={language} />

      <!-- Mobile Episodes Section (Hidden on Desktop) -->
      <div class="lg:hidden">
        {guestEpisodes.length > 0 && (
          <section class="mt-lg">
            <h2 class="text-xl font-heading font-semibold text-gray-900 dark:text-white mb-md">
              {t.episodesWith} {guest.data.name}
            </h2>
            
            <div class="space-y-md">
              {guestEpisodes.map((episode) => (
                <EpisodeCard episode={episode} size="medium" showLanguage={false} />
              ))}
            </div>
          </section>
        )}
      </div>
    </article>

    <!-- Desktop Sidebar (Hidden on Mobile) -->
    <aside class="hidden lg:block sidebar-sticky space-y-lg">
      <!-- Subscribe Section -->
      <section class="bg-gray-50 dark:bg-gray-800 rounded-xl p-lg">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-md">
          {t.subscribe}
        </h3>
        <div class="space-y-4">
          {/* Spotify */}
          {spotify && spotify.data.urls[language] && (
            <a 
              href={spotify.data.urls[language]}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center gap-3 px-4 py-3 bg-[#1DB954] hover:bg-[#1aa34a] text-white rounded-lg transition-colors w-full"
              aria-label={`${t.listenOn} Spotify`}
            >
              <img 
                src={spotify.data.iconUrl} 
                alt="Spotify" 
                class="w-6 h-6 brightness-0 invert"
              />
              <span class="font-medium">Spotify</span>
            </a>
          )}
          
          {/* Apple Podcasts */}
          {applePodcasts && applePodcasts.data.urls[language] && (
            <a 
              href={applePodcasts.data.urls[language]}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center gap-3 px-4 py-3 bg-[#872EC4] hover:bg-[#7326ad] text-white rounded-lg transition-colors w-full"
              aria-label={`${t.listenOn} Apple Podcasts`}
            >
              <img 
                src={applePodcasts.data.iconUrl} 
                alt="Apple Podcasts" 
                class="w-6 h-6"
              />
              <span class="font-medium">Apple Podcasts</span>
            </a>
          )}
          
          {/* YouTube */}
          {youtube && youtube.data.urls[language] && (
            <a 
              href={youtube.data.urls[language]}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center gap-3 px-4 py-3 bg-[#FF0000] hover:bg-[#CC0000] text-white rounded-lg transition-colors w-full"
              aria-label={`${t.listenOn} YouTube`}
            >
              <img 
                src={youtube.data.iconUrl} 
                alt="YouTube" 
                class="w-6 h-6 brightness-0 invert"
              />
              <span class="font-medium">YouTube</span>
            </a>
          )}
          
          {/* More options link */}
          <a 
            href={`/${language}/subscribe/`} 
            class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium underline block text-center mt-md"
          >
            {t.morePlatforms}
          </a>
        </div>
      </section>

      <!-- Episodes Section -->
      {guestEpisodes.length > 0 && (
        <section>
          <h2 class="text-xl lg:text-2xl font-heading font-semibold text-gray-900 dark:text-white mb-md">
            {t.episodesWith} {guest.data.name}
          </h2>
          
          <div class="space-y-6">
            {guestEpisodes.map((episode) => (
              <EpisodeCard episode={episode} size="small" showLanguage={false} />
            ))}
          </div>
        </section>
      )}
    </aside>
  </div>
</div>

    <!-- Call to Action -->
    <section class="section-spacing bg-accent-500 dark:bg-accent-700">
      <div class="container text-center">
        <h2 class="text-3xl lg:text-4xl font-heading font-bold text-white mb-md balance-text">
          {t.discoverMore}
        </h2>
        <p class="text-xl lg:text-2xl text-white/90 mb-lg max-w-prose mx-auto">
          {t.exploreAll}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href={`/${language}/episodes/`}
            class="inline-flex items-center px-8 py-3 border-2 border-white text-base font-medium rounded-md text-accent-600 dark:text-accent-700 bg-white hover:bg-white/90 transition-all shadow-lg"
          >
            {t.browseAllEpisodes}
          </a>
          <a 
            href={`/${language}/guests/`}
            class="inline-flex items-center px-8 py-3 border-2 border-white/70 text-base font-medium rounded-md text-white bg-white/10 hover:bg-white/20 transition-all"
          >
            {t.meetMoreGuests}
          </a>
        </div>
      </div>
    </section>
  </main>
</BaseLayout>