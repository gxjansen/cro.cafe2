---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Header from '../../../components/Header.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import EpisodeImage from '../../../components/EpisodeImage.astro';
import GuestCardVertical from '../../../components/GuestCardVertical.astro';
import HostCardVertical from '../../../components/HostCardVertical.astro';
import SchemaPodcastEpisode from '../../../components/schema/SchemaPodcastEpisode.astro';
import RelatedEpisodes from '../../../components/RelatedEpisodes.astro';
import EpisodeNavigation from '../../../components/EpisodeNavigation.astro';
import SimpleAudioPlayer from '../../../components/SimpleAudioPlayer.astro';
import { getEpisodeBySlug, getGuestBySlug, getGuestUrl, getHostBySlug, getHostImageUrl } from '../../../utils/content';
import type { Language } from '../../../types';

export async function getStaticPaths() {
  const { getCollection } = await import('astro:content');
  const episodes = await getCollection('episodes');
  const languages: Language[] = ['en', 'nl', 'de', 'es'];
  
  // Generate paths for each published episode by language
  const paths = [];
  for (const lang of languages) {
    const langEpisodes = episodes.filter(ep => ep.data.language === lang && ep.data.status === 'published');
    for (const episode of langEpisodes) {
      paths.push({
        params: { lang, slug: episode.data.slug || episode.slug },
        props: { episode, language: lang }
      });
    }
  }
  
  return paths;
}

const { episode, language } = Astro.props;

// Get popular platform links
const { getCollection: getContentCollection } = await import('astro:content');
const platforms = await getContentCollection('platforms');
const spotify = platforms.find(p => p.data.slug === 'spotify');
const applePodcasts = platforms.find(p => p.data.slug === 'apple-podcasts');
const youtube = platforms.find(p => p.data.slug === 'youtube');

// Fetch guest details
const guestDetailsRaw = await Promise.all(
  episode.data.guests.map(async (guestSlug: string) => {
    const guest = await getGuestBySlug(guestSlug);
    return guest;
  })
);

// Filter out any null/undefined guests
const guestDetails = guestDetailsRaw.filter(guest => guest !== null && guest !== undefined);

// Fetch host details
const hostDetailsRaw = await Promise.all(
  episode.data.hosts.map(async (hostSlug: string) => {
    const host = await getHostBySlug(hostSlug);
    return host;
  })
);

// Filter out any null/undefined hosts
const hostDetails = hostDetailsRaw.filter(host => host !== null && host !== undefined);

// Translations
const translations = {
  en: {
    backToEpisodes: '← Back to Episodes',
    season: 'Season',
    episode: 'Episode',
    listenTo: 'Listen to this episode',
    subscribe: 'Subscribe to the English edition of the CRO.CAFE podcast',
    morePlatforms: 'More platforms →',
    description: 'Episode Description',
    summary: 'Summary',
    guest: 'Guest in this Episode',
    guests: 'Guests in this Episode',
    host: 'Hosted by',
    hosts: 'Hosted by',
    transcript: 'Episode Transcript',
    topics: 'Topics covered:',
    discoverMore: 'Discover More Episodes',
    continueListening: 'Continue your CRO journey with more expert insights',
    browseMoreEpisodes: 'Browse More Episodes',
    subscribeNow: 'Subscribe Now',
    playPause: 'Play/Pause',
    listenOn: 'Listen on'
  },
  nl: {
    backToEpisodes: '← Terug naar Afleveringen',
    season: 'Seizoen',
    episode: 'Aflevering',
    listenTo: 'Luister naar deze aflevering',
    subscribe: 'Abonneer je op de Nederlandse editie van de CRO.CAFE podcast',
    morePlatforms: 'Meer platforms →',
    description: 'Aflevering Beschrijving',
    summary: 'Samenvatting',
    guest: 'Gast in deze Aflevering',
    guests: 'Gasten in deze Aflevering',
    host: 'Gehost door',
    hosts: 'Gehost door',
    transcript: 'Aflevering Transcript',
    topics: 'Onderwerpen behandeld:',
    discoverMore: 'Ontdek Meer Afleveringen',
    continueListening: 'Ga door met je CRO reis met meer expert inzichten',
    browseMoreEpisodes: 'Bekijk Meer Afleveringen',
    subscribeNow: 'Abonneer Nu',
    playPause: 'Afspelen/Pauzeren',
    listenOn: 'Luister op'
  },
  de: {
    backToEpisodes: '← Zurück zu Folgen',
    season: 'Staffel',
    episode: 'Folge',
    listenTo: 'Diese Folge anhören',
    subscribe: 'Die deutsche Ausgabe des CRO.CAFE Podcasts abonnieren',
    morePlatforms: 'Weitere Plattformen →',
    description: 'Folgenbeschreibung',
    summary: 'Zusammenfassung',
    guest: 'Gast in dieser Folge',
    guests: 'Gäste in dieser Folge',
    host: 'Moderiert von',
    hosts: 'Moderiert von',
    transcript: 'Folgen-Transkript',
    topics: 'Behandelte Themen:',
    discoverMore: 'Weitere Folgen entdecken',
    continueListening: 'Setzen Sie Ihre CRO-Reise mit weiteren Experteneinblicken fort',
    browseMoreEpisodes: 'Weitere Folgen durchsuchen',
    subscribeNow: 'Jetzt abonnieren',
    playPause: 'Abspielen/Pausieren',
    listenOn: 'Anhören auf'
  },
  es: {
    backToEpisodes: '← Volver a Episodios',
    season: 'Temporada',
    episode: 'Episodio',
    listenTo: 'Escuchar este episodio',
    subscribe: 'Suscríbete a la edición en español del podcast CRO.CAFE',
    morePlatforms: 'Más plataformas →',
    description: 'Descripción del Episodio',
    summary: 'Resumen',
    guest: 'Invitado en este Episodio',
    guests: 'Invitados en este Episodio',
    host: 'Presentado por',
    hosts: 'Presentado por',
    transcript: 'Transcripción del Episodio',
    topics: 'Temas cubiertos:',
    discoverMore: 'Descubre Más Episodios',
    continueListening: 'Continúa tu viaje CRO con más perspectivas de expertos',
    browseMoreEpisodes: 'Ver Más Episodios',
    subscribeNow: 'Suscríbete Ahora',
    playPause: 'Reproducir/Pausar',
    listenOn: 'Escuchar en'
  }
};

const t = translations[language];


// SEO metadata
const title = episode.data.seoTitle || `${episode.data.title} - CRO.CAFE Podcast`;
const description = episode.data.metaDescription || episode.data.summary || episode.data.description.substring(0, 160);

// Generate hreflang URLs for other languages (only include if episode exists in those languages)
const hreflang: Record<Language, string> = {
  en: `https://cro.cafe/en/episodes/${episode.data.slug}/`,
  nl: `https://cro.cafe/nl/episodes/${episode.data.slug}/`,
  de: `https://cro.cafe/de/episodes/${episode.data.slug}/`,
  es: `https://cro.cafe/es/episodes/${episode.data.slug}/`
};

// Get locale-specific date formatting
const getDateLocale = (lang: Language) => {
  const locales = {
    nl: 'nl-NL',
    de: 'de-DE',
    es: 'es-ES',
    en: 'en-US'
  };
  return locales[lang];
};
---

<BaseLayout 
  title={title}
  description={description}
  language={language}
  canonical={`https://cro.cafe/${language}/episodes/${episode.data.slug}/`}
  hreflang={hreflang}
  ogImage={episode.data.imageUrl}
>
  <!-- PodcastEpisode Schema -->
  <SchemaPodcastEpisode 
    episode={episode}
    language={language}
    seriesUrl={`https://cro.cafe/${language}/`}
    hosts={hostDetails}
    guests={guestDetails}
  />
  <Header language={language} currentPath={`/${language}/episodes/`} />
  <Breadcrumb 
    language={language} 
    currentPath={`/${language}/episodes/${episode.data.slug || episode.slug}/`}
    episodeTitle={episode.data.title}
  />
  
  <main class="flex-grow">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="layout-with-sidebar">
        <!-- Main Content -->
        <article class="min-w-0">
          <!-- Episode Header -->
          <header class="mb-lg">
            <div class="flex items-center gap-4 text-sm text-subtle mb-md">
              <a 
                href={`/${language}/episodes/`} 
                class="nav-back-link"
                aria-label={t.backToEpisodes.replace('←', 'Navigate back to')}
              >
                <span aria-hidden="true">←</span>
                <span>{t.backToEpisodes.replace('← ', '')}</span>
              </a>
              {(episode.data.episode_type === 'trailer' || episode.data.episode_type === 'bonus') ? (
                <>
                  <span>•</span>
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 uppercase">
                    {episode.data.episode_type}
                  </span>
                </>
              ) : (
                <>
                  <span>•</span>
                  <span>{t.season} {episode.data.season}, {t.episode} {episode.data.episode}</span>
                </>
              )}
            </div>
            
            <h1 
              class={`${(() => {
                const titleLength = episode.data.title.length;
                if (titleLength <= 50) {
                  // Short titles: Use large, prominent sizes
                  return 'text-3xl md:text-4xl lg:text-5xl';
                } else if (titleLength <= 80) {
                  // Medium titles: Use moderate sizes
                  return 'text-2xl md:text-3xl lg:text-4xl';
                } else {
                  // Long titles: Use smaller, more readable sizes
                  return 'text-xl md:text-2xl lg:text-3xl';
                }
              })()} font-heading font-bold text-gray-900 dark:text-white mb-md balance-text`}
            >
              {episode.data.title}
            </h1>
            
            <div class="flex flex-wrap items-center gap-4 text-sm text-metadata">
              <time datetime={episode.data.pubDate.toISOString()}>
                {new Date(episode.data.pubDate).toLocaleDateString(getDateLocale(language), { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </time>
            </div>
          </header>

          <!-- Episode Image (Mobile Only) -->
          <div class="lg:hidden mb-lg rounded-xl overflow-hidden aspect-square">
            <EpisodeImage 
              imageUrl={episode.data.imageUrl} 
              alt={episode.data.title}
              class="w-full h-full object-cover"
              aspectRatio="square"
            />
          </div>

          <!-- Audio Player -->
          <div class="mb-lg bg-gray-100 dark:bg-gray-800 rounded-xl p-md lg:p-lg">
            <h2 class="text-lg lg:text-xl font-semibold text-gray-900 dark:text-white mb-md">{t.listenTo}</h2>
            
            <!-- Enhanced Audio Player -->
            <SimpleAudioPlayer 
              audioUrl={episode.data.audioUrl}
              episodeId={episode.id}
              episodeTitle={episode.data.title}
              duration={episode.data.duration}
            />
            
            <!-- Fallback: Embedded player if available -->
            {episode.data.embedHtml && (
              <details class="mb-md">
                <summary class="text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer hover:text-primary-600 dark:hover:text-primary-400">
                  Alternative Player
                </summary>
                <div set:html={episode.data.embedHtml} class="transistor-embed mt-2" />
              </details>
            )}
          </div>

          <!-- Episode Summary/Description -->
          <div class="prose prose-lg dark:prose-invert max-w-none mb-lg content-spacing">
            {episode.data.summary ? (
              <>
                <h2 class="text-2xl lg:text-3xl">{t.summary}</h2>
                <p>{episode.data.summary}</p>
              </>
            ) : (
              <>
                <h2 class="text-2xl lg:text-3xl">{t.description}</h2>
                <p>{episode.data.description}</p>
              </>
            )}
          </div>

          <!-- Guest(s) and Host(s) Section for Mobile -->
          <div class="lg:hidden">
            {guestDetails.length > 0 && (
              <section class="mb-lg">
                <h2 class="text-xl font-heading font-semibold text-gray-900 dark:text-white mb-md">
                  {guestDetails.length === 1 ? t.guest : t.guests}
                </h2>
                <div class="space-y-6">
                  {guestDetails.map((guest) => guest && (
                    <GuestCardVertical guest={guest} language={language} size="small" showEpisodeCount={false} />
                  ))}
                </div>
              </section>
            )}

            {hostDetails.length > 0 && (
              <section class="mb-lg">
                <h2 class="text-xl font-heading font-semibold text-gray-900 dark:text-white mb-md">
                  {hostDetails.length === 1 ? t.host : t.hosts}
                </h2>
                <div class="space-y-6">
                  {hostDetails.map((host) => host && (
                    <HostCardVertical 
                      host={{
                        ...host,
                        data: {
                          ...host.data,
                          imageUrl: getHostImageUrl(host.data.slug || host.slug)
                        }
                      }} 
                      language={language} 
                      size="small" 
                      showEpisodeCount={false} 
                    />
                  ))}
                </div>
              </section>
            )}
          </div>

          <!-- Transcript Section -->
          {episode.data.transcript && (
            <section class="mb-lg">
              <details class="bg-gray-50 dark:bg-gray-800 rounded-xl p-md lg:p-lg">
                <summary class="cursor-pointer font-semibold text-gray-900 dark:text-white text-lg lg:text-xl">
                  {t.transcript}
                </summary>
                <div class="mt-md prose prose-sm dark:prose-invert max-w-none">
                  <div set:html={episode.data.transcript} />
                </div>
              </details>
            </section>
          )}

          <!-- Keywords/Tags -->
          {episode.data.keywords.length > 0 && (
            <section class="mb-lg">
              <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-sm">{t.topics}</h3>
              <div class="flex flex-wrap gap-xs">
                {episode.data.keywords.map((keyword) => (
                  <span class="bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-1 rounded-full text-sm">
                    {keyword}
                  </span>
                ))}
              </div>
            </section>
          )}
          
          <!-- Episode Navigation -->
          <EpisodeNavigation currentEpisode={episode} language={language} />
        </article>

        <!-- Desktop Sidebar -->
        <aside class="hidden lg:block sidebar-sticky space-y-lg">
          <!-- Episode Image -->
          <div class="aspect-square rounded-xl overflow-hidden">
            <EpisodeImage 
              imageUrl={episode.data.imageUrl} 
              alt={episode.data.title}
              class="w-full h-full object-cover"
              aspectRatio="square"
              width={400}
            />
          </div>

          <!-- Subscribe Section -->
          <section class="bg-gray-50 dark:bg-gray-800 rounded-xl p-lg">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-md">
              {t.subscribe}
            </h3>
            <div class="space-y-4">
              {/* Spotify */}
              {spotify && spotify.data.urls[language] && (
                <a 
                  href={spotify.data.urls[language]}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center gap-3 px-4 py-3 bg-[#1DB954] hover:bg-[#1aa34a] text-white rounded-lg transition-colors w-full"
                  aria-label={`${t.listenOn} Spotify`}
                >
                  <img 
                    src={spotify.data.iconUrl} 
                    alt="Spotify" 
                    class="w-6 h-6 brightness-0 invert"
                  />
                  <span class="font-medium">Spotify</span>
                </a>
              )}
              
              {/* Apple Podcasts */}
              {applePodcasts && applePodcasts.data.urls[language] && (
                <a 
                  href={applePodcasts.data.urls[language]}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center gap-3 px-4 py-3 bg-[#872EC4] hover:bg-[#7326ad] text-white rounded-lg transition-colors w-full"
                  aria-label={`${t.listenOn} Apple Podcasts`}
                >
                  <img 
                    src={applePodcasts.data.iconUrl} 
                    alt="Apple Podcasts" 
                    class="w-6 h-6"
                  />
                  <span class="font-medium">Apple Podcasts</span>
                </a>
              )}
              
              {/* YouTube */}
              {youtube && youtube.data.urls[language] && (
                <a 
                  href={youtube.data.urls[language]}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center gap-3 px-4 py-3 bg-[#FF0000] hover:bg-[#CC0000] text-white rounded-lg transition-colors w-full"
                  aria-label={`${t.listenOn} YouTube`}
                >
                  <img 
                    src={youtube.data.iconUrl} 
                    alt="YouTube" 
                    class="w-6 h-6 brightness-0 invert"
                  />
                  <span class="font-medium">YouTube</span>
                </a>
              )}
              
              {/* More options link */}
              <a 
                href={`/${language}/subscribe/`} 
                class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium underline block text-center mt-md"
              >
                {t.morePlatforms}
              </a>
            </div>
          </section>

          <!-- Guest(s) Section -->
          {guestDetails.length > 0 && (
            <section>
              <h2 class="text-xl font-heading font-semibold text-gray-900 dark:text-white mb-md">
                {guestDetails.length === 1 ? t.guest : t.guests}
              </h2>
              <div class="space-y-6">
                {guestDetails.map((guest) => guest && (
                  <GuestCardVertical guest={guest} language={language} size="small" showEpisodeCount={false} />
                ))}
              </div>
            </section>
          )}

          <!-- Host(s) Section -->
          {hostDetails.length > 0 && (
            <section>
              <h2 class="text-xl font-heading font-semibold text-gray-900 dark:text-white mb-md">
                {hostDetails.length === 1 ? t.host : t.hosts}
              </h2>
              <div class="space-y-6">
                {hostDetails.map((host) => host && (
                  <HostCardVertical 
                    host={{
                      ...host,
                      data: {
                        ...host.data,
                        imageUrl: getHostImageUrl(host.data.slug || host.slug)
                      }
                    }} 
                    language={language} 
                    size="small" 
                    showEpisodeCount={false} 
                  />
                ))}
              </div>
            </section>
          )}
        </aside>
      </div>
    </div>

    <!-- Related Episodes -->
    <RelatedEpisodes episode={episode} language={language} />

    <!-- Call to Action -->
    <section class="section-spacing bg-accent-500 dark:bg-accent-700">
      <div class="container text-center">
        <h2 class="text-3xl lg:text-4xl font-heading font-bold text-white mb-md balance-text">
          {t.discoverMore}
        </h2>
        <p class="text-xl lg:text-2xl text-white/90 mb-lg max-w-prose mx-auto">
          {t.continueListening}
        </p>
        <div class="flex flex-col sm:flex-row gap-sm justify-center">
          <a 
            href={`/${language}/episodes/`}
            class="inline-flex items-center px-8 py-3 border-2 border-white text-base font-medium rounded-md text-accent-600 dark:text-accent-700 bg-white hover:bg-white/90 transition-all shadow-lg touch-target"
          >
            {t.browseMoreEpisodes}
          </a>
          <a 
            href={`/${language}/subscribe/`}
            class="inline-flex items-center px-8 py-3 border-2 border-white/70 text-base font-medium rounded-md text-white bg-white/10 hover:bg-white/20 transition-all touch-target"
          >
            {t.subscribeNow}
          </a>
        </div>
      </div>
    </section>
  </main>
</BaseLayout>

<style>
  /* Transistor embed styling */
  .transistor-embed :global(iframe) {
    width: 100% !important;
    max-width: 100% !important;
  }
</style>

<script>
// Initialize swipe gestures for episode navigation
import { SwipeGestures } from '../../../scripts/swipe-gestures.js'

// Initialize swipe gestures when DOM is ready
if (typeof window !== 'undefined') {
  document.addEventListener('DOMContentLoaded', () => {
    const swipeGestures = new SwipeGestures({
      threshold: 50,
      velocity: 0.3,
      restraint: 100,
      allowedTime: 300
    })

    // Show swipe hint on first visit
    const hasSeenHint = localStorage.getItem('swipeHintShown')
    if (!hasSeenHint && 'ontouchstart' in window) {
      setTimeout(() => {
        const hint = document.createElement('div')
        hint.className = 'swipe-hint show'
        hint.textContent = 'Swipe left or right to navigate episodes'
        document.body.appendChild(hint)

        setTimeout(() => {
          hint.classList.remove('show')
          setTimeout(() => hint.remove(), 300)
        }, 3000)

        localStorage.setItem('swipeHintShown', 'true')
      }, 2000)
    }
  })
}
</script>