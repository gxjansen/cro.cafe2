---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Header from '../../../components/Header.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import EpisodeImage from '../../../components/EpisodeImage.astro';
import GuestCard from '../../../components/GuestCard.astro';
import HostCard from '../../../components/HostCard.astro';
import SchemaPodcastEpisode from '../../../components/schema/SchemaPodcastEpisode.astro';
import RelatedEpisodes from '../../../components/RelatedEpisodes.astro';
import EpisodeNavigation from '../../../components/EpisodeNavigation.astro';
import PlayButton from '../../../components/AudioPlayer/PlayButton';
import { getEpisodeBySlug, getGuestBySlug, getGuestUrl, getHostBySlug } from '../../../utils/content';
import type { Language } from '../../../types';
import type { Episode } from '../../../stores/audioPlayerStore';

export async function getStaticPaths() {
  const { getCollection } = await import('astro:content');
  const episodes = await getCollection('episodes');
  const languages: Language[] = ['en', 'nl', 'de', 'es'];
  
  // Generate paths for each published episode by language
  const paths = [];
  for (const lang of languages) {
    const langEpisodes = episodes.filter(ep => ep.data.language === lang && ep.data.status === 'published');
    for (const episode of langEpisodes) {
      paths.push({
        params: { lang, slug: episode.data.slug || episode.slug },
        props: { episode, language: lang }
      });
    }
  }
  
  return paths;
}

const { episode, language } = Astro.props;

// Get popular platform links
const { getCollection: getContentCollection } = await import('astro:content');
const platforms = await getContentCollection('platforms');
const spotify = platforms.find(p => p.data.slug === 'spotify');
const applePodcasts = platforms.find(p => p.data.slug === 'apple-podcasts');

// Fetch guest details
const guestDetailsRaw = await Promise.all(
  episode.data.guests.map(async (guestSlug: string) => {
    const guest = await getGuestBySlug(guestSlug);
    return guest;
  })
);

// Filter out any null/undefined guests
const guestDetails = guestDetailsRaw.filter(guest => guest !== null && guest !== undefined);

// Fetch host details
const hostDetailsRaw = await Promise.all(
  episode.data.hosts.map(async (hostSlug: string) => {
    const host = await getHostBySlug(hostSlug);
    return host;
  })
);

// Filter out any null/undefined hosts
const hostDetails = hostDetailsRaw.filter(host => host !== null && host !== undefined);

// Translations
const translations = {
  en: {
    backToEpisodes: '← Back to Episodes',
    season: 'Season',
    episode: 'Episode',
    listenTo: 'Listen to this episode',
    subscribe: 'Subscribe to the English edition of the CRO.CAFE podcast',
    morePlatforms: 'More platforms →',
    description: 'Episode Description',
    summary: 'Summary',
    guest: 'Guest in this Episode',
    guests: 'Guests in this Episode',
    host: 'Hosted by',
    hosts: 'Hosted by',
    transcript: 'Episode Transcript',
    topics: 'Topics covered:',
    discoverMore: 'Discover More Episodes',
    continueListening: 'Continue your CRO journey with more expert insights',
    browseMoreEpisodes: 'Browse More Episodes',
    subscribeNow: 'Subscribe Now'
  },
  nl: {
    backToEpisodes: '← Terug naar Afleveringen',
    season: 'Seizoen',
    episode: 'Aflevering',
    listenTo: 'Luister naar deze aflevering',
    subscribe: 'Abonneer je op de Nederlandse editie van de CRO.CAFE podcast',
    morePlatforms: 'Meer platforms →',
    description: 'Aflevering Beschrijving',
    summary: 'Samenvatting',
    guest: 'Gast in deze Aflevering',
    guests: 'Gasten in deze Aflevering',
    host: 'Gehost door',
    hosts: 'Gehost door',
    transcript: 'Aflevering Transcript',
    topics: 'Onderwerpen behandeld:',
    discoverMore: 'Ontdek Meer Afleveringen',
    continueListening: 'Ga door met je CRO reis met meer expert inzichten',
    browseMoreEpisodes: 'Bekijk Meer Afleveringen',
    subscribeNow: 'Abonneer Nu'
  },
  de: {
    backToEpisodes: '← Zurück zu Folgen',
    season: 'Staffel',
    episode: 'Folge',
    listenTo: 'Diese Folge anhören',
    subscribe: 'Die deutsche Ausgabe des CRO.CAFE Podcasts abonnieren',
    morePlatforms: 'Weitere Plattformen →',
    description: 'Folgenbeschreibung',
    summary: 'Zusammenfassung',
    guest: 'Gast in dieser Folge',
    guests: 'Gäste in dieser Folge',
    host: 'Moderiert von',
    hosts: 'Moderiert von',
    transcript: 'Folgen-Transkript',
    topics: 'Behandelte Themen:',
    discoverMore: 'Weitere Folgen entdecken',
    continueListening: 'Setzen Sie Ihre CRO-Reise mit weiteren Experteneinblicken fort',
    browseMoreEpisodes: 'Weitere Folgen durchsuchen',
    subscribeNow: 'Jetzt abonnieren'
  },
  es: {
    backToEpisodes: '← Volver a Episodios',
    season: 'Temporada',
    episode: 'Episodio',
    listenTo: 'Escuchar este episodio',
    subscribe: 'Suscríbete a la edición en español del podcast CRO.CAFE',
    morePlatforms: 'Más plataformas →',
    description: 'Descripción del Episodio',
    summary: 'Resumen',
    guest: 'Invitado en este Episodio',
    guests: 'Invitados en este Episodio',
    host: 'Presentado por',
    hosts: 'Presentado por',
    transcript: 'Transcripción del Episodio',
    topics: 'Temas cubiertos:',
    discoverMore: 'Descubre Más Episodios',
    continueListening: 'Continúa tu viaje CRO con más perspectivas de expertos',
    browseMoreEpisodes: 'Ver Más Episodios',
    subscribeNow: 'Suscríbete Ahora'
  }
};

const t = translations[language];

// Convert episode data to audio player format
const audioPlayerEpisode: Episode = {
  id: episode.id,
  title: episode.data.title,
  audioUrl: episode.data.audioUrl,
  duration: episode.data.duration,
  description: episode.data.description,
  publishDate: episode.data.pubDate.toISOString(),
  imageUrl: episode.data.imageUrl,
  slug: episode.data.slug || episode.slug,
  guests: guestDetails.map(guest => guest?.data?.name).filter(Boolean),
  language: language,
};

// SEO metadata
const title = episode.data.seoTitle || `${episode.data.title} - CRO.CAFE Podcast`;
const description = episode.data.metaDescription || episode.data.summary || episode.data.description.substring(0, 160);

// Generate hreflang URLs for other languages (only include if episode exists in those languages)
const hreflang: Record<Language, string> = {
  en: `https://cro.cafe/en/episodes/${episode.data.slug}/`,
  nl: `https://cro.cafe/nl/episodes/${episode.data.slug}/`,
  de: `https://cro.cafe/de/episodes/${episode.data.slug}/`,
  es: `https://cro.cafe/es/episodes/${episode.data.slug}/`
};

// Get locale-specific date formatting
const getDateLocale = (lang: Language) => {
  const locales = {
    nl: 'nl-NL',
    de: 'de-DE',
    es: 'es-ES',
    en: 'en-US'
  };
  return locales[lang];
};
---

<BaseLayout 
  title={title}
  description={description}
  language={language}
  canonical={`https://cro.cafe/${language}/episodes/${episode.data.slug}/`}
  hreflang={hreflang}
  ogImage={episode.data.imageUrl}
>
  <!-- PodcastEpisode Schema -->
  <SchemaPodcastEpisode 
    episode={episode}
    language={language}
    seriesUrl={`https://cro.cafe/${language}/`}
    hosts={hostDetails}
    guests={guestDetails}
  />
  <Header language={language} currentPath={`/${language}/episodes/`} />
  <Breadcrumb 
    language={language} 
    currentPath={`/${language}/episodes/${episode.data.slug || episode.slug}/`}
    episodeTitle={episode.data.title}
  />
  
  <main class="flex-grow">
    <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Episode Header -->
      <header class="mb-8">
        <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-4">
          <a href={`/${language}/episodes/`} class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
            {t.backToEpisodes}
          </a>
          {(episode.data.episode_type === 'trailer' || episode.data.episode_type === 'bonus') ? (
            <>
              <span>•</span>
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 uppercase">
                {episode.data.episode_type}
              </span>
            </>
          ) : (
            <>
              <span>•</span>
              <span>{t.season} {episode.data.season}, {t.episode} {episode.data.episode}</span>
            </>
          )}
        </div>
        
        <h1 class="text-3xl md:text-4xl font-heading font-bold text-gray-900 dark:text-white mb-4">
          {episode.data.title}
        </h1>
        
        <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
          <time datetime={episode.data.pubDate.toISOString()}>
            {new Date(episode.data.pubDate).toLocaleDateString(getDateLocale(language), { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </time>
        </div>
      </header>

      <!-- Episode Image -->
      <div class="mb-8 rounded-xl overflow-hidden">
        <EpisodeImage 
          imageUrl={episode.data.imageUrl} 
          alt={episode.data.title}
          class="w-full h-auto max-h-96"
        />
      </div>

      <!-- Audio Player -->
      <div class="mb-8 bg-gray-100 dark:bg-gray-800 rounded-xl p-6">
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">{t.listenTo}</h2>
        
        <!-- Custom Audio Player -->
        <div class="flex items-center gap-4 mb-6">
          <PlayButton 
            episode={audioPlayerEpisode}
            size="lg"
            variant="primary"
            className="flex-shrink-0"
            client:load
          >
            <span class="text-lg font-medium">Play Episode</span>
          </PlayButton>
          
          <div class="flex-1 min-w-0">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Click play to start listening. Audio will continue playing as you browse other pages.
            </p>
          </div>
        </div>
        
        <!-- Fallback: Embedded player if available -->
        {episode.data.embedHtml && (
          <details class="mb-4">
            <summary class="text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer hover:text-primary-600 dark:hover:text-primary-400">
              Alternative Player
            </summary>
            <div set:html={episode.data.embedHtml} class="transistor-embed mt-2" />
          </details>
        )}
        
        <!-- Subscribe options -->
        <div class="mt-6 space-y-3">
          <p class="text-sm font-medium text-gray-700 dark:text-gray-300">
            {t.subscribe}
          </p>
          <div class="flex flex-wrap items-center gap-4">
            {/* Spotify */}
            {spotify && spotify.data.urls[language] && (
              <a 
                href={spotify.data.urls[language]}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center gap-2 px-4 py-2 bg-[#1DB954] hover:bg-[#1aa34a] text-white rounded-full transition-colors"
                aria-label="Listen on Spotify"
              >
                <img 
                  src={spotify.data.iconUrl} 
                  alt="Spotify" 
                  class="w-5 h-5 brightness-0 invert"
                />
                <span class="text-sm font-medium">Spotify</span>
              </a>
            )}
            
            {/* Apple Podcasts */}
            {applePodcasts && applePodcasts.data.urls[language] && (
              <a 
                href={applePodcasts.data.urls[language]}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center gap-2 px-4 py-2 bg-[#872EC4] hover:bg-[#7326ad] text-white rounded-full transition-colors"
                aria-label="Listen on Apple Podcasts"
              >
                <img 
                  src={applePodcasts.data.iconUrl} 
                  alt="Apple Podcasts" 
                  class="w-5 h-5"
                />
                <span class="text-sm font-medium">Apple Podcasts</span>
              </a>
            )}
            
            {/* More options link */}
            <a 
              href={`/${language}/subscribe/`} 
              class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium underline"
            >
              {t.morePlatforms}
            </a>
          </div>
        </div>
      </div>

      <!-- Episode Summary -->
      <div class="prose prose-lg dark:prose-invert max-w-none mb-8">
        {episode.data.summary ? (
          <>
            <h2>{t.summary}</h2>
            <p>{episode.data.summary}</p>
          </>
        ) : (
          <>
            <h2>{t.description}</h2>
            <p>{episode.data.description}</p>
          </>
        )}
      </div>

      <!-- Guest(s) and Host(s) Section -->
      {guestDetails.length === 1 && hostDetails.length > 0 ? (
        <!-- Single guest - show guest and host side by side -->
        <div class="mb-8">
          <div class="grid gap-6 md:grid-cols-2">
            <!-- Guest Column -->
            <div>
              <h2 class="text-2xl font-heading font-semibold text-gray-900 dark:text-white mb-6">
                {t.guest}
              </h2>
              {guestDetails.map((guest) => guest && (
                <GuestCard guest={guest} language={language} size="medium" />
              ))}
            </div>
            <!-- Host Column -->
            <div>
              <h2 class="text-2xl font-heading font-semibold text-gray-900 dark:text-white mb-6">
                {hostDetails.length === 1 ? t.host : t.hosts}
              </h2>
              <div class="space-y-6">
                {hostDetails.map((host) => host && (
                  <HostCard host={host} language={language} size="medium" />
                ))}
              </div>
            </div>
          </div>
        </div>
      ) : (
        <>
          <!-- Multiple guests or no guests - show sections separately -->
          {guestDetails.length > 0 && (
            <div class="mb-8">
              <h2 class="text-2xl font-heading font-semibold text-gray-900 dark:text-white mb-6">
                {guestDetails.length === 1 ? t.guest : t.guests}
              </h2>
              <div class="grid gap-6 md:grid-cols-2">
                {guestDetails.map((guest) => guest && (
                  <GuestCard guest={guest} language={language} size="medium" />
                ))}
              </div>
            </div>
          )}

          {hostDetails.length > 0 && (
            <div class="mb-8">
              <h2 class="text-2xl font-heading font-semibold text-gray-900 dark:text-white mb-6">
                {hostDetails.length === 1 ? t.host : t.hosts}
              </h2>
              <div class="grid gap-6 md:grid-cols-2">
                {hostDetails.map((host) => host && (
                  <HostCard host={host} language={language} size="medium" />
                ))}
              </div>
            </div>
          )}
        </>
      )}

      <!-- Transcript Section -->
      {episode.data.transcript && (
        <div class="mb-8">
          <details class="bg-gray-50 dark:bg-gray-800 rounded-xl p-6">
            <summary class="cursor-pointer font-semibold text-gray-900 dark:text-white">
              {t.transcript}
            </summary>
            <div class="mt-4 prose prose-sm dark:prose-invert max-w-none">
              <div set:html={episode.data.transcript} />
            </div>
          </details>
        </div>
      )}

      <!-- Keywords/Tags -->
      {episode.data.keywords.length > 0 && (
        <div class="mb-8">
          <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">{t.topics}</h3>
          <div class="flex flex-wrap gap-2">
            {episode.data.keywords.map((keyword) => (
              <span class="bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-1 rounded-full text-sm">
                {keyword}
              </span>
            ))}
          </div>
        </div>
      )}
      
      <!-- Episode Navigation -->
      <EpisodeNavigation currentEpisode={episode} language={language} />
    </article>

    <!-- Related Episodes -->
    <RelatedEpisodes episode={episode} language={language} />

    <!-- Call to Action -->
    <section class="py-16 bg-accent-500 dark:bg-accent-700 mt-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2 class="text-3xl font-heading font-bold text-white mb-4">
          {t.discoverMore}
        </h2>
        <p class="text-xl text-white/90 mb-8">
          {t.continueListening}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href={`/${language}/episodes/`}
            class="inline-flex items-center px-8 py-3 border-2 border-white text-base font-medium rounded-md text-accent-600 dark:text-accent-700 bg-white hover:bg-white/90 transition-all shadow-lg"
          >
            {t.browseMoreEpisodes}
          </a>
          <a 
            href={`/${language}/subscribe/`}
            class="inline-flex items-center px-8 py-3 border-2 border-white/70 text-base font-medium rounded-md text-white bg-white/10 hover:bg-white/20 transition-all"
          >
            {t.subscribeNow}
          </a>
        </div>
      </div>
    </section>
  </main>
</BaseLayout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Transistor embed styling */
  .transistor-embed :global(iframe) {
    width: 100% !important;
    max-width: 100% !important;
  }
</style>