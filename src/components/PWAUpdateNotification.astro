---
interface Props {
  language: 'en' | 'nl' | 'de' | 'es';
}

const { language } = Astro.props;

const translations = {
  en: {
    updateAvailable: 'Update Available',
    updateMessage: 'A new version of CRO.CAFE is available.',
    updateNow: 'Update Now',
    later: 'Later'
  },
  nl: {
    updateAvailable: 'Update Beschikbaar',
    updateMessage: 'Een nieuwe versie van CRO.CAFE is beschikbaar.',
    updateNow: 'Nu Updaten',
    later: 'Later'
  },
  de: {
    updateAvailable: 'Update Verfügbar',
    updateMessage: 'Eine neue Version von CRO.CAFE ist verfügbar.',
    updateNow: 'Jetzt Aktualisieren',
    later: 'Später'
  },
  es: {
    updateAvailable: 'Actualización Disponible',
    updateMessage: 'Una nueva versión de CRO.CAFE está disponible.',
    updateNow: 'Actualizar Ahora',
    later: 'Más Tarde'
  }
};

const t = translations[language];
---

<!-- PWA Update Notification -->
<div id="pwa-update-notification" class="fixed -top-full left-4 right-4 md:left-auto md:right-4 md:max-w-md bg-primary-600 dark:bg-primary-700 text-white rounded-lg shadow-lg p-4 transition-all duration-300 z-50 invisible" aria-live="polite" data-visible="false">
  <div class="flex items-center justify-between">
    <div class="flex items-center space-x-3">
      <svg class="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
      </svg>
      <div>
        <h4 class="font-semibold">{t.updateAvailable}</h4>
        <p class="text-sm opacity-90">{t.updateMessage}</p>
      </div>
    </div>
  </div>
  <div class="flex space-x-3 mt-3">
    <button 
      id="pwa-update-btn"
      class="px-4 py-2 bg-white text-primary-600 hover:bg-gray-100 rounded-md text-sm font-medium transition-colors"
    >
      {t.updateNow}
    </button>
    <button 
      id="pwa-update-later-btn"
      class="px-4 py-2 text-white opacity-90 hover:opacity-100 text-sm font-medium transition-opacity"
    >
      {t.later}
    </button>
  </div>
</div>

<script>
  import { registerSW } from 'virtual:pwa-register';

  const updateNotification = document.getElementById('pwa-update-notification');
  const updateBtn = document.getElementById('pwa-update-btn');
  const updateLaterBtn = document.getElementById('pwa-update-later-btn');

  // Register service worker with update handling
  const updateSW = registerSW({
    onNeedRefresh() {
      // Show update notification
      if (updateNotification) {
        updateNotification.classList.remove('-top-full', 'invisible');
        updateNotification.classList.add('top-4');
        updateNotification.setAttribute('data-visible', 'true');
      }
    },
    onOfflineReady() {
      console.log('App ready to work offline');
    },
  });

  // Handle update button click
  updateBtn?.addEventListener('click', () => {
    updateSW(true);
  });

  // Handle later button click
  updateLaterBtn?.addEventListener('click', () => {
    // Hide notification
    if (updateNotification) {
      updateNotification.classList.add('-top-full', 'invisible');
      updateNotification.classList.remove('top-4');
      updateNotification.setAttribute('data-visible', 'false');
    }
  });

  // Also listen for visibility change to prompt for update when user returns
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      // Check for updates when page becomes visible
      updateSW();
    }
  });
</script>