---
import GuestProfilePicture from './GuestProfilePicture.astro';
import CountryFlag from './CountryFlag.astro';
import type { Language } from '../types';

export interface Props {
  guest: any;
  language?: Language;
  size?: 'small' | 'medium' | 'large';
  showEpisodeCount?: boolean;
}

const { guest, language, size = 'medium', showEpisodeCount = false } = Astro.props;

// Helper function to get guest URL for a specific language
function getGuestUrl(guest: any, lang?: Language): string {
  const slug = guest.data.slug || guest.slug;
  if (!lang) {
    const firstLang = guest.data.languages[0];
    return firstLang === 'en' ? `/guests/${slug}/` : `/${firstLang}/guests/${slug}/`;
  }
  return lang === 'en' ? `/guests/${slug}/` : `/${lang}/guests/${slug}/`;
}

// Get LinkedIn URL from socialLinks
function getLinkedInUrl(guest: any): string | null {
  if (guest.data.linkedin) {
    return guest.data.linkedin;
  }
  if (guest.data.socialLinks) {
    const linkedinLink = guest.data.socialLinks.find((link: any) => link.platform === 'linkedin');
    return linkedinLink ? linkedinLink.url : null;
  }
  return null;
}

const linkedInUrl = getLinkedInUrl(guest);
const linkedinHeadline = guest.data.linkedin_headline || null;
const linkedinCountry = guest.data.linkedin_country || null;

// Truncate headline based on size
function truncateHeadline(headline: string | null, maxLength: number): string | null {
  if (!headline) return null;
  if (headline.length <= maxLength) return headline;
  
  const truncated = headline.substr(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  return headline.substr(0, lastSpace > 0 ? lastSpace : maxLength) + '...';
}

// Size-specific configurations with improved spacing
const sizeConfigs = {
  small: {
    container: 'p-4',
    imageSize: 'sm' as const,
    imageWrapper: 'w-14 h-14', // Explicit size
    title: 'text-sm font-semibold leading-tight',
    subtitle: 'text-xs leading-snug',
    headline: 'text-xs leading-relaxed',
    meta: 'text-xs',
    linkedin: 'w-4 h-4',
    flagSize: 'sm' as const,
    headlineLength: 120,
    gap: 'gap-3'
  },
  medium: {
    container: 'p-5',
    imageSize: 'md' as const,
    imageWrapper: 'w-20 h-20', // Increased from 64px
    title: 'text-base font-semibold leading-tight',
    subtitle: 'text-sm leading-snug',
    headline: 'text-sm leading-relaxed',
    meta: 'text-xs',
    linkedin: 'w-4 h-4',
    flagSize: 'sm' as const,
    headlineLength: 140,
    gap: 'gap-4'
  },
  large: {
    container: 'p-6',
    imageSize: 'lg' as const,
    imageWrapper: 'w-28 h-28', // 112px
    title: 'text-lg font-semibold leading-tight',
    subtitle: 'text-base leading-snug',
    headline: 'text-sm leading-relaxed',
    meta: 'text-sm',
    linkedin: 'w-5 h-5',
    flagSize: 'md' as const,
    headlineLength: 160,
    gap: 'gap-4'
  }
};

const config = sizeConfigs[size];
const truncatedHeadline = truncateHeadline(linkedinHeadline, config.headlineLength);
---

<div 
  class={`card card-interactive ${config.container} block group cursor-pointer`}
  role="article"
  data-guest-url={getGuestUrl(guest, language)}
  tabindex="0"
  aria-label={`${guest.data.name}'s profile`}
>
  <div class="flex flex-col space-y-3">
    <!-- Row 1: Profile Picture + Core Info + LinkedIn -->
    <div class={`flex items-start ${config.gap}`}>
      <!-- Profile Picture -->
      <div class={`${config.imageWrapper} flex-shrink-0 group-hover:scale-105 transition-transform duration-300`}>
        <GuestProfilePicture 
          guest={guest}
          size={config.imageSize}
          loading="lazy"
          grayscale={true}
        />
      </div>
      
      <!-- Core Info -->
      <div class="flex-1 min-w-0">
        <h3 class={`${config.title} text-gray-900 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-300 transition-colors mb-1`}>
          {guest.data.name}
        </h3>
        
        {(guest.data.role || guest.data.company) && (
          <p class={`${config.subtitle} text-gray-600 dark:text-gray-400`}>
            {guest.data.role && guest.data.company ? (
              <>{guest.data.role} at {guest.data.company}</>
            ) : (
              guest.data.role || guest.data.company
            )}
          </p>
        )}
      </div>
      
      <!-- LinkedIn Icon -->
      {linkedInUrl && (
        <a 
          href={linkedInUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="text-primary-600 hover:text-primary-700 dark:text-primary-300 dark:hover:text-primary-200 transition-colors flex-shrink-0 z-10 linkedin-link"
          aria-label={`${guest.data.name} on LinkedIn`}
          onClick={(e) => {
            e.stopPropagation();
          }}
        >
          <svg class={config.linkedin} fill="currentColor" viewBox="0 0 24 24">
            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
          </svg>
        </a>
      )}
    </div>
    
    <!-- Row 2: LinkedIn Headline + Meta Info (Full Width) -->
    {(truncatedHeadline || linkedinCountry || (showEpisodeCount && guest.data.episodeCount)) && (
      <div class="space-y-2">
        {/* LinkedIn Headline with better visual treatment */}
        {truncatedHeadline && (
          <div class="bg-gray-50 dark:bg-gray-800/30 rounded-md px-3 py-2 border-l-3 border-linkedin dark:border-linkedin-dark">
            <p class={`${config.headline} italic text-gray-700 dark:text-gray-300`}
               title={linkedinHeadline}>
              {truncatedHeadline}
            </p>
          </div>
        )}
        
        {/* Meta Information */}
        <div class="flex items-center gap-4">
          {linkedinCountry && (
            <CountryFlag 
              country={linkedinCountry}
              size={config.flagSize}
              showName={true}
            />
          )}
          
          {showEpisodeCount && guest.data.episodeCount && (
            <span class={`${config.meta} text-gray-500 dark:text-gray-400`}>
              {guest.data.episodeCount} episode{guest.data.episodeCount !== 1 ? 's' : ''}
            </span>
          )}
        </div>
      </div>
    )}
  </div>
</div>

<style>
  /* Ensure consistent card heights within grid */
  .card {
    height: 100%;
  }
  
  /* Subtle border on hover */
  .card-interactive {
    border: 1px solid transparent;
    transition: all 0.2s ease-in-out;
  }
  
  .card-interactive:hover {
    border-color: var(--color-primary-200);
    transform: translateY(-1px);
  }
  
  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .card-interactive:hover {
      border-color: var(--color-primary-700);
    }
  }
  
  /* Custom border width utility */
  .border-l-3 {
    border-left-width: 3px;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Handle guest card clicks
  const guestCards = document.querySelectorAll('[data-guest-url]')

  guestCards.forEach(card => {
    const guestUrl = card.getAttribute('data-guest-url')

    // Handle click on the card
    card.addEventListener('click', (e) => {
      // Don't navigate if clicking on a link inside the card
      if (e.target.closest('a')) {
        return
      }
      if (guestUrl) {
        window.location.href = guestUrl
      }
    })

    // Handle keyboard navigation
    card.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.target.closest('a')) {
        e.preventDefault()
        if (guestUrl) {
          window.location.href = guestUrl
        }
      }
    })
  })
})
</script>