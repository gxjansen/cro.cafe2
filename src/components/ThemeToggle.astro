---
// Theme toggle component following Astro/Tailwind best practices
---

<button
  id="theme-toggle"
  type="button"
  class="relative inline-flex items-center justify-center w-10 h-10 text-gray-500 transition-colors duration-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white dark:focus:ring-offset-gray-900 focus:ring-primary-500"
  aria-label="Toggle theme"
>
  <!-- Light mode icon (sun) - visible when dark mode is active -->
  <svg
    class="absolute w-5 h-5 transition-all scale-100 rotate-0 dark:scale-0 dark:rotate-90"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    />
  </svg>
  
  <!-- Dark mode icon (moon) - visible when light mode is active -->
  <svg
    class="absolute w-5 h-5 transition-all scale-0 -rotate-90 dark:scale-100 dark:rotate-0"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    />
  </svg>
</button>

<script>
  // Get theme toggle button
  const themeToggle = document.getElementById('theme-toggle');
  
  if (themeToggle) {
    // Handle click events
    themeToggle.addEventListener('click', () => {
      // Toggle dark class on html element
      document.documentElement.classList.toggle('dark');
      
      // Get new theme state
      const isDark = document.documentElement.classList.contains('dark');
      
      // Save to localStorage
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Update aria-label
      themeToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`);
    });
    
    // Set initial aria-label
    const isDark = document.documentElement.classList.contains('dark');
    themeToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`);
  }
  
  // Re-attach event listener after Astro page transitions
  document.addEventListener('astro:page-load', () => {
    const toggle = document.getElementById('theme-toggle');
    if (toggle) {
      // Remove any existing listeners
      const newToggle = toggle.cloneNode(true);
      toggle.parentNode?.replaceChild(newToggle, toggle);
      
      // Re-attach listener
      newToggle.addEventListener('click', () => {
        document.documentElement.classList.toggle('dark');
        const isDark = document.documentElement.classList.contains('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        newToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`);
      });
      
      // Update aria-label
      const isDark = document.documentElement.classList.contains('dark');
      newToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`);
    }
  });
</script>

<style>
  /* Additional styles for smooth icon transitions */
  #theme-toggle svg {
    transition: transform 0.3s ease, scale 0.3s ease;
  }
</style>