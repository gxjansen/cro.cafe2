---
// Theme toggle with properly centered icons
---

<button
  id="theme-toggle"
  type="button"
  class="relative inline-flex items-center justify-center w-11 h-11 text-gray-500 transition-colors duration-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white dark:focus:ring-offset-gray-900 focus:ring-primary-500 touch-target"
  aria-label="Toggle theme"
>
  
  <!-- Sun Icon (Heroicons outline sun) -->
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="sun-icon w-5 h-5">
    <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
  </svg>
  
  <!-- Moon Icon (Heroicons outline moon) -->
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="moon-icon w-5 h-5">
    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
  </svg>
</button>

<script>
// Get theme toggle button
const themeToggle = document.getElementById('theme-toggle')

if (themeToggle) {
  // Handle click events
  themeToggle.addEventListener('click', () => {
    // Toggle dark class on html element
    document.documentElement.classList.toggle('dark')

    // Get new theme state
    const isDark = document.documentElement.classList.contains('dark')

    // Save to localStorage
    localStorage.setItem('theme', isDark ? 'dark' : 'light')

    // Update aria-label
    themeToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`)
  })

  // Set initial aria-label
  const isDark = document.documentElement.classList.contains('dark')
  themeToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`)
}

// Re-attach event listener after Astro page transitions
document.addEventListener('astro:page-load', () => {
  const toggle = document.getElementById('theme-toggle')
  if (toggle) {
    // Remove any existing listeners
    const newToggle = toggle.cloneNode(true)
    toggle.parentNode?.replaceChild(newToggle, toggle)

    // Re-attach listener
    newToggle.addEventListener('click', () => {
      document.documentElement.classList.toggle('dark')
      const isDark = document.documentElement.classList.contains('dark')
      localStorage.setItem('theme', isDark ? 'dark' : 'light')
      newToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`)
    })

    // Update aria-label
    const isDark = document.documentElement.classList.contains('dark')
    newToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`)
  }
})
</script>

<style>
  /* Both icons are positioned absolutely to overlap perfectly */
  .sun-icon,
  .moon-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 0.2s ease-in-out;
  }
  
  /* Light mode - show sun, hide moon */
  :global(html:not(.dark)) .sun-icon {
    opacity: 1;
  }
  
  :global(html:not(.dark)) .moon-icon {
    opacity: 0;
  }
  
  /* Dark mode - hide sun, show moon */
  :global(html.dark) .sun-icon {
    opacity: 0;
  }
  
  :global(html.dark) .moon-icon {
    opacity: 1;
  }
</style>