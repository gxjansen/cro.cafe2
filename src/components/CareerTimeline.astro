---
import type { LinkedInExperience } from '../types/linkedin';
import { safeJsonParse } from '../types/linkedin';

export interface Props {
  experiences: string;
  firstEpisodeDate: string;
  guestName: string;
}

const { experiences, firstEpisodeDate, guestName } = Astro.props;

// Parse experiences from JSON string
const parsedExperiences = safeJsonParse<LinkedInExperience[]>(experiences, []);

// Return early if no experiences
if (parsedExperiences.length === 0) {
  return null;
}

// Remove duplicate experiences and fix broken data
const cleanedExperiences = parsedExperiences.filter((exp, index, self) => {
  // Remove if it's a duplicate (same title and company)
  const isDuplicate = self.findIndex(e => 
    e.title === exp.title && 
    e.company === exp.company
  ) !== index;
  
  // Remove if dates are invalid (both start and end are missing or invalid)
  const hasValidDates = exp.startDate || exp.endDate || exp.isCurrent;
  
  return !isDuplicate && hasValidDates;
});

// Sort experiences by start date (most recent first)
const sortedExperiences = [...cleanedExperiences].sort((a, b) => {
  const dateA = a.startDate ? new Date(a.startDate).getTime() : 0;
  const dateB = b.startDate ? new Date(b.startDate).getTime() : 0;
  return dateB - dateA;
});

// Filter experiences to show only from first episode onwards
const relevantExperiences = sortedExperiences.filter(exp => {
  const expStartDate = exp.startDate ? new Date(exp.startDate) : new Date();
  const firstEpisode = new Date(firstEpisodeDate);
  
  // Include if:
  // 1. Job started after first episode, OR
  // 2. Job was active during first episode (no end date or ended after episode)
  return expStartDate >= firstEpisode || 
         (!exp.endDate || new Date(exp.endDate) >= firstEpisode);
});

// If no relevant experiences, return null
if (relevantExperiences.length === 0) {
  return null;
}

// Format date for display
function formatDate(dateStr?: string | null): string {
  if (!dateStr) return 'Present';
  
  try {
    const date = new Date(dateStr);
    // Check if date is valid
    if (isNaN(date.getTime())) {
      return 'Present';
    }
    return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
  } catch {
    return 'Present';
  }
}

---

{parsedExperiences.length > 0 && relevantExperiences.length > 0 && (
<div class="career-timeline" data-timeline role="region" aria-label={`Career journey for ${guestName}`}>
  <div class="timeline-header">
    <h2>Career Journey</h2>
    <button 
      class="timeline-toggle"
      aria-label="Toggle timeline view"
      data-timeline-toggle
    >
      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M5 7.5L10 12.5L15 7.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>

  <!-- Timeline labels -->
  <div class={`timeline-labels ${relevantExperiences.length <= 3 ? 'few-items-labels' : ''}`} aria-hidden="true">
    <span class="timeline-label timeline-label-start">Previously</span>
    <span class="timeline-label timeline-label-end">Today</span>
  </div>
  
  <div class={`timeline-container ${relevantExperiences.length <= 3 ? 'few-items' : ''}`} data-timeline-container>
    <div class="timeline-track"></div>

    <!-- Timeline arrow for desktop -->
    <div class="timeline-arrow" aria-hidden="true">
      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M14 10L19 10M19 10L16 7M19 10L16 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </div>
    
    <div class="timeline-items">
      {relevantExperiences.map((experience, index) => {
        const isCurrentRole = experience.isCurrent;
        
        return (
          <div 
            class={`timeline-item ${isCurrentRole ? 'current' : ''}`}
            data-timeline-item
          >
            <div class="timeline-dot"></div>
            <div class="timeline-content">
              <div class="timeline-header-content">
                <h4 class="timeline-title">{experience.title}</h4>
                <div class="timeline-company">
                  <span>{experience.company}</span>
                </div>
              </div>
              
              <div class="timeline-meta">
                <time class="timeline-date">
                  {experience.duration || `${formatDate(experience.startDate)} - ${formatDate(experience.endDate)}`}
                </time>
                {experience.location && (
                  <span class="timeline-location">{experience.location}</span>
                )}
              </div>
              
              {experience.description && (
                <p class="timeline-description">{experience.description}</p>
              )}
            </div>
          </div>
        );
      })}
    </div>
  </div>
</div>
)}

<style>
  .career-timeline {
    --timeline-color: #e5e7eb;
    --timeline-active-color: #3b82f6;
    --timeline-dot-size: 12px;
    --timeline-gap: 2rem;
    margin: 2rem 0;
  }

  .timeline-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .timeline-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .timeline-toggle {
    background: none;
    border: 1px solid var(--timeline-color);
    border-radius: 0.375rem;
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .timeline-toggle:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  .timeline-toggle svg {
    transition: transform 0.3s ease;
  }

  .career-timeline[data-collapsed] .timeline-toggle svg {
    transform: rotate(-90deg);
  }

  .timeline-container {
    position: relative;
    overflow: hidden;
    transition: max-height 0.3s ease;
    max-height: 2000px;
  }

  .career-timeline[data-collapsed] .timeline-container {
    max-height: 0;
  }

  .timeline-track {
    position: absolute;
    background-color: var(--timeline-color);
    z-index: 0;
  }

  /* Mobile: Vertical layout */
  @media (max-width: 768px) {
    .timeline-track {
      left: var(--timeline-dot-size);
      top: 0;
      bottom: 0;
      width: 2px;
      transform: translateX(-50%);
    }

    .timeline-items {
      display: flex;
      flex-direction: column-reverse; /* Reverse to show newest first */
      gap: var(--timeline-gap);
    }

    .timeline-item {
      position: relative;
      padding-left: calc(var(--timeline-dot-size) * 2 + 1rem);
    }

    /* Timeline arrow on mobile */
    .timeline-arrow {
      position: absolute;
      left: var(--timeline-dot-size);
      bottom: -20px;
      transform: translateX(-50%) rotate(90deg);
      z-index: 2;
      color: var(--timeline-active-color);
    }
  }

  /* Desktop: Horizontal layout */
  @media (min-width: 769px) {
    .timeline-track {
      left: 0;
      right: 0;
      top: var(--timeline-dot-size);
      height: 2px;
      transform: translateY(-50%);
    }
    
    /* Shorter track when items are centered */
    .timeline-container.few-items .timeline-track {
      left: 20%;
      right: 20%;
    }

    .timeline-items {
      display: flex;
      flex-direction: row-reverse; /* Reverse to show newest first */
      gap: var(--timeline-gap);
      padding-top: calc(var(--timeline-dot-size) * 2);
      overflow-x: auto;
      scroll-behavior: smooth;
      justify-content: flex-end; /* Default: left-align for scrolling */
    }
    
    /* Center items when few */
    .timeline-container.few-items .timeline-items {
      justify-content: center;
    }

    .timeline-item {
      position: relative;
      flex: 0 0 300px;
      max-width: 350px;
    }

    .timeline-item:nth-child(even) {
      margin-top: 4rem;
    }

    /* Timeline arrow */
    .timeline-arrow {
      position: absolute;
      right: -10px;
      top: var(--timeline-dot-size);
      transform: translateY(-50%);
      z-index: 2;
      color: var(--timeline-active-color);
    }
    
    /* Adjust arrow position when items are centered (few items) */
    .timeline-container.few-items .timeline-arrow {
      right: calc(20% - 10px);
    }
  }

  .timeline-dot {
    position: absolute;
    width: var(--timeline-dot-size);
    height: var(--timeline-dot-size);
    background-color: white;
    border: 2px solid var(--timeline-color);
    border-radius: 50%;
    z-index: 1;
    transition: all 0.3s ease;
  }

  @media (max-width: 768px) {
    .timeline-dot {
      left: var(--timeline-dot-size);
      top: 0.5rem;
      transform: translateX(-50%);
    }
  }

  @media (min-width: 769px) {
    .timeline-dot {
      left: 50%;
      top: 0;
      transform: translate(-50%, -50%);
    }
  }

  .timeline-item.current .timeline-dot {
    background-color: var(--timeline-active-color);
    border-color: var(--timeline-active-color);
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);
  }

  .timeline-item:hover .timeline-dot {
    transform: scale(1.2) translateX(-50%);
    border-color: var(--timeline-active-color);
  }

  @media (min-width: 769px) {
    .timeline-item:hover .timeline-dot {
      transform: scale(1.2) translate(-50%, -50%);
    }
  }

  .timeline-content {
    background-color: white;
    border: 1px solid var(--timeline-color);
    border-radius: 0.5rem;
    padding: 1.25rem;
    transition: all 0.3s ease;
  }

  .timeline-item.current .timeline-content {
    border-color: var(--timeline-active-color);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .timeline-item:hover .timeline-content {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .timeline-header-content {
    margin-bottom: 0.75rem;
  }

  .timeline-title {
    margin: 0 0 0.25rem;
    font-size: 1rem;
    font-weight: 600;
    color: #111827;
  }

  .timeline-company {
    font-size: 0.875rem;
    color: #6b7280;
  }


  .timeline-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    font-size: 0.75rem;
    color: #9ca3af;
    margin-bottom: 0.75rem;
  }

  .timeline-date {
    font-weight: 500;
    color: #6b7280;
  }

  .timeline-location::before {
    content: "📍 ";
  }

  .timeline-description {
    margin: 0;
    font-size: 0.875rem;
    color: #4b5563;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Timeline labels */
  .timeline-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.5rem;
    padding: 0 0.5rem;
  }

  .timeline-label {
    background-color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  /* Desktop labels positioning */
  @media (min-width: 769px) {
    .timeline-labels {
      margin-bottom: 1rem;
    }
    
    /* Adjust labels when items are centered (few items) */
    .career-timeline:has(.few-items) .timeline-labels,
    .timeline-labels.few-items-labels {
      max-width: 60%;
      margin-left: 20%;
      margin-right: 20%;
    }
  }

  /* Mobile labels positioning */
  @media (max-width: 768px) {
    .timeline-labels {
      margin-left: calc(var(--timeline-dot-size) * 2 + 1rem);
      margin-bottom: 1rem;
      gap: 0.5rem;
    }
  }

  /* Hide arrow on very small screens */
  @media (max-width: 640px) {
    .timeline-arrow {
      display: none;
    }
  }

  /* Dark mode labels */
  @media (prefers-color-scheme: dark) {
    .timeline-label {
      background-color: #374151;
      color: #d1d5db;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .career-timeline {
      --timeline-color: #374151;
      --timeline-active-color: #60a5fa;
    }

    .timeline-content {
      background-color: #1f2937;
      border-color: var(--timeline-color);
    }

    .timeline-title {
      color: #f9fafb;
    }

    .timeline-company,
    .timeline-description {
      color: #9ca3af;
    }

    .timeline-toggle:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const timelines = document.querySelectorAll('[data-timeline]');
    
    timelines.forEach(timeline => {
      const toggle = timeline.querySelector('[data-timeline-toggle]');
      const container = timeline.querySelector('[data-timeline-container]');
      
      if (toggle && container) {
        toggle.addEventListener('click', () => {
          const isCollapsed = timeline.hasAttribute('data-collapsed');
          
          if (isCollapsed) {
            timeline.removeAttribute('data-collapsed');
          } else {
            timeline.setAttribute('data-collapsed', '');
          }
        });
      }
    });
  });
</script>