---
import HostImage from './HostImage.astro';
import type { Language } from '../types';

export interface Props {
  host: any;
  language?: Language;
  size?: 'small' | 'medium' | 'large';
  showEpisodeCount?: boolean;
}

const { host, language, size = 'medium', showEpisodeCount = false } = Astro.props;

// Helper function to get host URL
function getHostUrl(host: any): string {
  const slug = host.data.slug || host.slug;
  return `/hosts/${slug}/`;
}

// Get social links
function getWebsiteUrl(host: any): string | null {
  if (host.data.website) return host.data.website;
  if (host.data.socialLinks) {
    const websiteLink = host.data.socialLinks.find((link: any) => link.platform === 'website');
    return websiteLink ? websiteLink.url : null;
  }
  return null;
}

function getLinkedInUrl(host: any): string | null {
  // First check the direct linkedin field
  if (host.data.linkedin) {
    // Ensure it's a full URL
    const linkedin = host.data.linkedin;
    return linkedin.startsWith('http') ? linkedin : `https://linkedin.com/in/${linkedin}`;
  }
  // Then check socialLinks array
  if (host.data.socialLinks) {
    const linkedinLink = host.data.socialLinks.find((link: any) => link.platform === 'linkedin');
    return linkedinLink ? linkedinLink.url : null;
  }
  return null;
}

function getTwitterUrl(host: any): string | null {
  if (host.data.twitter) {
    return host.data.twitter.startsWith('http') ? host.data.twitter : `https://twitter.com/${host.data.twitter.replace('@', '')}`;
  }
  if (host.data.socialLinks) {
    const twitterLink = host.data.socialLinks.find((link: any) => link.platform === 'twitter');
    return twitterLink ? twitterLink.url : null;
  }
  return null;
}

// Get host image URL
function getHostImageUrl(host: any): string {
  if (host.data.imageUrl) return host.data.imageUrl;
  if (host.data.image) return host.data.image;
  
  // Use the utility function as fallback
  const slug = host.data.slug || host.slug;
  return `/images/hosts/${slug}.webp`;
}

const websiteUrl = getWebsiteUrl(host);
const linkedInUrl = getLinkedInUrl(host);
const twitterUrl = getTwitterUrl(host);
const imageUrl = getHostImageUrl(host);

// Size-specific classes
const sizeClasses = {
  small: {
    container: 'p-4',
    image: 'w-12 h-12',
    title: 'text-sm font-semibold',
    subtitle: 'text-xs',
    social: 'w-4 h-4'
  },
  medium: {
    container: 'p-4',
    image: 'w-16 h-16',
    title: 'text-base font-semibold',
    subtitle: 'text-sm',
    social: 'w-4 h-4'
  },
  large: {
    container: 'p-6',
    image: 'w-20 h-20',
    title: 'text-lg font-semibold',
    subtitle: 'text-base',
    social: 'w-5 h-5'
  }
};

const classes = sizeClasses[size];
---

<div class={`bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow border border-gray-200 dark:border-gray-700 ${classes.container}`}>
  <div class="flex items-start gap-4">
    <!-- Host Image -->
    <div class="flex-shrink-0">
      <HostImage 
        imageUrl={imageUrl} 
        alt={host.data.name}
        class={`${classes.image} rounded-full object-cover`}
      />
    </div>
    
    <!-- Host Info -->
    <div class="flex-1 min-w-0">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <!-- Host Name -->
          <h3 class={`${classes.title} text-gray-900 dark:text-white mb-1`}>
            <a 
              href={getHostUrl(host)} 
              class="hover:text-primary-600 dark:hover:text-primary-300 transition-colors"
            >
              {host.data.name}
            </a>
          </h3>
          
          <!-- Title and Company -->
          {(host.data.title || host.data.role || host.data.company) && (
            <p class={`${classes.subtitle} text-gray-600 dark:text-gray-400 mb-2`}>
              {host.data.title || host.data.role}
              {(host.data.title || host.data.role) && host.data.company && ' at '}
              {host.data.company}
            </p>
          )}
          
          <!-- Episode Count (optional) -->
          {showEpisodeCount && host.data.episodes && (
            <p class="text-xs text-gray-500 dark:text-gray-400">
              {host.data.episodes.length} episode{host.data.episodes.length !== 1 ? 's' : ''}
            </p>
          )}
        </div>
        
        <!-- Social Icons -->
        <div class="flex gap-2 flex-shrink-0 ml-2">
          {websiteUrl && (
            <a 
              href={websiteUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-primary-600 hover:text-primary-700 dark:text-primary-300 dark:hover:text-primary-200 transition-colors"
              aria-label={`${host.data.name}'s website`}
            >
              <svg class={classes.social} fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM4.332 8.027a6.012 6.012 0 011.912-2.706C6.512 5.73 6.974 6 7.5 6A1.5 1.5 0 019 7.5V8a2 2 0 004 0 2 2 0 011.523-1.943A5.977 5.977 0 0116 10c0 .34-.028.675-.083 1H15a2 2 0 00-2 2v2.197A5.973 5.973 0 0110 16v-2a2 2 0 00-2-2 2 2 0 01-2-2 2 2 0 00-1.668-1.973z" clip-rule="evenodd" />
              </svg>
            </a>
          )}
          
          {twitterUrl && (
            <a 
              href={twitterUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-primary-600 hover:text-primary-700 dark:text-primary-300 dark:hover:text-primary-200 transition-colors"
              aria-label={`${host.data.name} on Twitter`}
            >
              <svg class={classes.social} fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
              </svg>
            </a>
          )}
          
          {linkedInUrl && (
            <a 
              href={linkedInUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-primary-600 hover:text-primary-700 dark:text-primary-300 dark:hover:text-primary-200 transition-colors"
              aria-label={`${host.data.name} on LinkedIn`}
            >
              <svg class={classes.social} fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
          )}
        </div>
      </div>
    </div>
  </div>
</div>