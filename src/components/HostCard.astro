---
import HostImage from './HostImage.astro';
import { getHostImageUrl } from '../utils/content';
import type { Language } from '../types';

export interface Props {
  host: any;
  language?: Language;
  size?: 'small' | 'medium' | 'large';
  showEpisodeCount?: boolean;
}

const { host, language, size = 'medium', showEpisodeCount = false } = Astro.props;

// Helper function to get host URL
function getHostUrl(host: any): string {
  const slug = host.data.slug || host.slug;
  return `/hosts/${slug}/`;
}

// Get social links
function getWebsiteUrl(host: any): string | null {
  if (host.data.website) return host.data.website;
  if (host.data.socialLinks) {
    const websiteLink = host.data.socialLinks.find((link: any) => link.platform === 'website');
    return websiteLink ? websiteLink.url : null;
  }
  return null;
}

function getLinkedInUrl(host: any): string | null {
  // First check the direct linkedin field
  if (host.data.linkedin) {
    // Ensure it's a full URL
    const linkedin = host.data.linkedin;
    return linkedin.startsWith('http') ? linkedin : `https://linkedin.com/in/${linkedin}`;
  }
  // Then check socialLinks array
  if (host.data.socialLinks) {
    const linkedinLink = host.data.socialLinks.find((link: any) => link.platform === 'linkedin');
    return linkedinLink ? linkedinLink.url : null;
  }
  return null;
}

function getTwitterUrl(host: any): string | null {
  if (host.data.twitter) {
    return host.data.twitter.startsWith('http') ? host.data.twitter : `https://twitter.com/${host.data.twitter.replace('@', '')}`;
  }
  if (host.data.socialLinks) {
    const twitterLink = host.data.socialLinks.find((link: any) => link.platform === 'twitter');
    return twitterLink ? twitterLink.url : null;
  }
  return null;
}

// Get host image URL using the utility function for consistency
function getHostImageUrlForComponent(host: any): string {
  if (host.data.imageUrl) return host.data.imageUrl;
  if (host.data.image) return host.data.image;
  
  // Use the centralized utility function as fallback
  const slug = host.data.slug || host.slug;
  return getHostImageUrl(slug);
}

const websiteUrl = getWebsiteUrl(host);
const linkedInUrl = getLinkedInUrl(host);
const twitterUrl = getTwitterUrl(host);
const imageUrl = getHostImageUrlForComponent(host);

// Size-specific classes
const sizeClasses = {
  small: {
    container: 'p-4',
    image: 'w-12 h-12',
    title: 'text-sm font-semibold',
    subtitle: 'text-xs',
    social: 'w-4 h-4'
  },
  medium: {
    container: 'p-4',
    image: 'w-16 h-16',
    title: 'text-base font-semibold',
    subtitle: 'text-sm',
    social: 'w-4 h-4'
  },
  large: {
    container: 'p-6',
    image: 'w-20 h-20',
    title: 'text-lg font-semibold',
    subtitle: 'text-base',
    social: 'w-5 h-5'
  }
};

const classes = sizeClasses[size];
---

<a 
  href={getHostUrl(host)} 
  class={`card card-interactive ${classes.container} block hover:shadow-lg transition-all duration-200 h-full`}
>
  <div class="flex items-start gap-4 h-full">
    <!-- Host Image -->
    <div class="flex-shrink-0">
      <HostImage 
        imageUrl={imageUrl} 
        alt={`Photo of ${host.data.name}, host`}
        class={`${classes.image} rounded-full object-cover`}
      />
    </div>
    
    <!-- Host Info -->
    <div class="flex-1 min-w-0">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <!-- Host Name -->
          <h3 class={`${classes.title} text-gray-900 dark:text-white mb-1`}>
            {host.data.name}
          </h3>
          
          <!-- Title and Company -->
          {(host.data.title || host.data.role || host.data.company) && (
            <p class={`${classes.subtitle} text-gray-600 dark:text-gray-400 mb-2`}>
              {host.data.title || host.data.role}
              {(host.data.title || host.data.role) && host.data.company && ' at '}
              {host.data.company}
            </p>
          )}
          
          <!-- Episode Count (optional) -->
          {showEpisodeCount && host.data.episodes && (
            <p class="text-xs text-gray-500 dark:text-gray-400">
              {host.data.episodes.length} episode{host.data.episodes.length !== 1 ? 's' : ''}
            </p>
          )}
        </div>
      </div>
    </div>
  </div>
</a>