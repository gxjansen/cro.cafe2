---
import { formatSyncTimestamp, transitionClasses, shadowClasses } from '../utils/linkedinDesign';

export interface Props {
  historical: {
    role: string;
    company: string;
    date: Date;
  };
  current?: {
    role: string;
    company: string;
    lastUpdated: Date;
  };
  episodeId: string;
  episodeTitle?: string;
  class?: string;
}

const { historical, current, episodeId, episodeTitle, class: className = '' } = Astro.props;

// Format date to readable string
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'short' 
  }).format(date);
}

// Check if career has progressed (different role or company)
const hasProgressed = current && (
  historical.role !== current.role || 
  historical.company !== current.company
);

// Create episode link
const episodeLink = `/episodes/${episodeId}`;
---

<div class={`${className} bg-white dark:bg-gray-800 rounded-lg overflow-hidden ${shadowClasses.linkedin} ${transitionClasses.smooth} hover:${shadowClasses.linkedinHover}`}>
  <div class="p-6">
    {/* Header with episode info */}
    <div class="mb-6">
      <a 
        href={episodeLink} 
        class="text-sm text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-300 transition-colors"
      >
        {episodeTitle || `Episode ${episodeId}`}
      </a>
    </div>

    {/* Timeline */}
    <div class="relative">
      {/* Timeline line */}
      <div class="absolute left-6 top-12 bottom-0 w-0.5 bg-gray-200 dark:bg-gray-700" aria-hidden="true"></div>
      
      {/* Then section */}
      <div class="relative mb-8">
        <div class="flex items-start">
          {/* Timeline dot */}
          <div class="relative z-10 flex-shrink-0 w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center">
            <div class="w-4 h-4 bg-gray-400 dark:bg-gray-500 rounded-full"></div>
          </div>
          
          {/* Content */}
          <div class="ml-4 flex-1">
            <div class="flex items-center mb-1">
              <span class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Then
              </span>
              <span class="ml-2 text-xs text-gray-500 dark:text-gray-500">
                {formatDate(historical.date)}
              </span>
            </div>
            <h3 class="text-base font-semibold text-gray-900 dark:text-white mb-1">
              {historical.role}
            </h3>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              {historical.company}
            </p>
          </div>
        </div>
      </div>

      {/* Progress arrow (if career changed) */}
      {hasProgressed && (
        <div class="absolute left-4 top-[4.5rem] w-8 h-8 transform rotate-180">
          <svg class="w-full h-full text-primary-500 dark:text-primary-400" viewBox="0 0 24 24" fill="none">
            <path 
              d="M12 4L12 20M12 20L18 14M12 20L6 14" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round"
            />
          </svg>
        </div>
      )}

      {/* Now section */}
      <div class="relative">
        <div class="flex items-start">
          {/* Timeline dot */}
          <div class="relative z-10 flex-shrink-0 w-12 h-12 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center">
            {current ? (
              <div class="w-4 h-4 bg-primary-500 dark:bg-primary-400 rounded-full"></div>
            ) : (
              <div class="w-4 h-4 bg-gray-300 dark:bg-gray-600 rounded-full animate-pulse"></div>
            )}
          </div>
          
          {/* Content */}
          <div class="ml-4 flex-1">
            <div class="flex items-center mb-1">
              <span class="text-xs font-semibold text-primary-600 dark:text-primary-400 uppercase tracking-wider">
                Now
              </span>
              {current && (
                <span class="ml-2 text-xs text-gray-500 dark:text-gray-500">
                  Updated {formatSyncTimestamp(current.lastUpdated)}
                </span>
              )}
            </div>
            
            {current ? (
              <>
                <h3 class="text-base font-semibold text-gray-900 dark:text-white mb-1">
                  {current.role}
                </h3>
                <p class="text-sm text-gray-600 dark:text-gray-400">
                  {current.company}
                </p>
                
                {/* Career progression indicator */}
                {hasProgressed && (
                  <div class="mt-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200">
                    <svg class="mr-1 w-3 h-3" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                    Career Progression
                  </div>
                )}
              </>
            ) : (
              <div class="space-y-2">
                <div class="h-5 bg-gray-200 dark:bg-gray-700 rounded animate-pulse w-3/4"></div>
                <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse w-1/2"></div>
                <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">
                  LinkedIn data not available
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>