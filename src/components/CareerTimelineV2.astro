---
import type { LinkedInExperience } from '../types/linkedin';
import { safeJsonParse } from '../types/linkedin';

export interface Props {
  experiences: string;
  firstEpisodeDate: string;
  episodeDates?: string[];
  guestName: string;
}

const { experiences, firstEpisodeDate, episodeDates, guestName } = Astro.props;

// Parse experiences from JSON string
const parsedExperiences = safeJsonParse<LinkedInExperience[]>(experiences, []);

// Return early if no experiences
if (parsedExperiences.length === 0) {
  return null;
}

// Remove duplicate experiences and fix broken data
const cleanedExperiences = parsedExperiences.filter((exp, index, self) => {
  const isDuplicate = self.findIndex(e => 
    e.title === exp.title && 
    e.company === exp.company
  ) !== index;
  
  const hasValidDates = exp.startDate || exp.endDate || exp.isCurrent;
  
  return !isDuplicate && hasValidDates;
});

// Sort experiences by start date (most recent first)
const sortedExperiences = [...cleanedExperiences].sort((a, b) => {
  const dateA = a.startDate ? new Date(a.startDate).getTime() : 0;
  const dateB = b.startDate ? new Date(b.startDate).getTime() : 0;
  return dateB - dateA;
});

// Filter relevant experiences
const relevantExperiences = (() => {
  const currentJobs = sortedExperiences.filter(exp => !exp.endDate || exp.isCurrent);
  
  const episodeTimeJobs = episodeDates ? sortedExperiences.filter(exp => {
    if (!exp.endDate || exp.isCurrent) return false;
    
    const expStartDate = exp.startDate ? new Date(exp.startDate) : null;
    const expEndDate = exp.endDate ? new Date(exp.endDate) : null;
    
    return episodeDates.some(episodeDate => {
      const epDate = new Date(episodeDate);
      const startedBeforeEpisode = !expStartDate || (expStartDate <= epDate);
      const endedAfterEpisode = !expEndDate || (expEndDate >= epDate);
      
      return startedBeforeEpisode && endedAfterEpisode;
    });
  }) : [];
  
  const allRelevantJobs = [...currentJobs, ...episodeTimeJobs];
  const uniqueJobs = allRelevantJobs.filter((exp, index, self) => 
    self.findIndex(e => 
      e.title === exp.title && 
      e.company === exp.company &&
      e.startDate === exp.startDate
    ) === index
  );
  
  return uniqueJobs.sort((a, b) => {
    const dateA = a.startDate ? new Date(a.startDate).getTime() : Date.now();
    const dateB = b.startDate ? new Date(b.startDate).getTime() : Date.now();
    return dateB - dateA;
  }).slice(0, 6); // Allow up to 6 jobs
})();

if (relevantExperiences.length === 0) {
  return null;
}

// Format date for display
function formatDate(dateStr?: string | null): string {
  if (!dateStr) return 'Present';
  
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) {
      return 'Present';
    }
    return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
  } catch {
    return 'Present';
  }
}

// Process experiences with episode information
const processedExperiences = relevantExperiences.map(experience => {
  const isCurrentRole = experience.isCurrent || !experience.endDate;
  
  let wasActiveAtRecording = false;
  if (episodeDates) {
    for (const episodeDate of episodeDates) {
      const epDate = new Date(episodeDate);
      const expStartDate = experience.startDate ? new Date(experience.startDate) : null;
      const expEndDate = experience.endDate ? new Date(experience.endDate) : null;
      
      const startedBeforeEpisode = !expStartDate || expStartDate.getTime() <= epDate.getTime();
      const endedAfterEpisode = !expEndDate || expEndDate.getTime() >= epDate.getTime();
      
      if (startedBeforeEpisode && endedAfterEpisode) {
        wasActiveAtRecording = true;
        break;
      }
    }
  }
  
  return {
    ...experience,
    isCurrentRole,
    wasActiveAtRecording,
    formattedDuration: experience.duration || `${formatDate(experience.startDate)} - ${formatDate(experience.endDate)}`
  };
});

// Always show scroll controls on desktop since timeline can overflow horizontally
const needsScroll = true; // Show controls if timeline might overflow
const timelineId = `timeline-${Math.random().toString(36).substr(2, 9)}`;

// Debug logging
console.log('CareerTimelineV2 Debug:', {
  parsedExperiencesCount: parsedExperiences.length,
  relevantExperiencesCount: relevantExperiences.length,
  cleanedExperiencesCount: cleanedExperiences.length,
  needsScroll,
  timelineId,
  guestName,
  willRender: parsedExperiences.length > 0 && relevantExperiences.length > 0
});
---

{parsedExperiences.length > 0 && relevantExperiences.length > 0 ? (
<section class="career-timeline-section" data-timeline role="region" aria-label={`Career journey for ${guestName}`}>
  <div class="career-timeline-container">
    <div class="timeline-header">
      <h2>Career Journey</h2>
    </div>

    <!-- Timeline labels -->
    <div class="timeline-labels">
      <button 
        class="timeline-label timeline-label-start timeline-label-clickable" 
        type="button"
        aria-label="Scroll to earliest experience"
        data-timeline-id={timelineId}
        data-scroll="start"
      >
        Previously
      </button>
      <button 
        class="timeline-label timeline-label-end timeline-label-clickable" 
        type="button"
        aria-label="Scroll to most recent experience"
        data-timeline-id={timelineId}
        data-scroll="end"
      >
        Today
      </button>
    </div>
    
    <div class={`timeline-wrapper ${needsScroll ? 'has-scroll' : ''}`}>
      <div class="timeline-scroll-container" id={timelineId} data-timeline-container>
        <div class="timeline-track"></div>

        <!-- Timeline arrow for desktop -->
        <div class="timeline-arrow" aria-hidden="true">
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14 10L19 10M19 10L16 7M19 10L16 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        
        <div class="timeline-items">
          {processedExperiences.map((experience, index) => (
            <div 
              class={`timeline-item ${experience.isCurrentRole ? 'current' : ''} ${experience.wasActiveAtRecording ? 'episode-time' : ''}`}
              data-timeline-item
            >
              <div class="timeline-dot"></div>
              <div class="timeline-content">
                <div class="timeline-header-content">
                  <h3 class="timeline-title">{experience.title}</h3>
                  <div class="timeline-company">
                    <span>{experience.company}</span>
                  </div>
                </div>
                
                <div class="timeline-meta">
                  <time class="timeline-date">
                    {experience.formattedDuration}
                  </time>
                  {experience.location && (
                    <span class="timeline-location">{experience.location}</span>
                  )}
                </div>
                
                {experience.wasActiveAtRecording && !experience.isCurrentRole && (
                  <div class="timeline-badge">
                    <span class="episode-badge">During CRO.CAFE episode</span>
                  </div>
                )}
                
                {experience.description && (
                  <p class="timeline-description">{experience.description}</p>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>
) : null}

<style>
  .career-timeline-section {
    --timeline-color: #e5e7eb;
    --timeline-active-color: #3b82f6;
    --timeline-dot-size: 12px;
    --timeline-gap: 1.5rem;
    --timeline-card-width: 280px;
    
    padding: 0 1rem;
    /* Remove any background - let parent control it */
    background: transparent;
  }

  .career-timeline-container {
    width: 100%;
  }

  .timeline-header {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 0 0.5rem;
  }

  .timeline-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: #111827;
    text-align: left; /* Ensure left alignment */
  }

  /* Timeline wrapper with scroll indicators */
  .timeline-wrapper {
    position: relative;
  }
  
  .timeline-scroll-container {
    position: relative;
    overflow: visible;
  }

  .timeline-track {
    position: absolute;
    background-color: var(--timeline-color);
    z-index: 0;
  }

  /* Mobile: Vertical layout */
  @media (max-width: 767px) {
    .timeline-controls {
      display: none;
    }
    
    .timeline-track {
      left: var(--timeline-dot-size);
      top: 0;
      bottom: 0;
      width: 2px;
      transform: translateX(-50%);
    }

    .timeline-items {
      display: flex;
      flex-direction: column-reverse;
      gap: var(--timeline-gap);
    }

    .timeline-item {
      position: relative;
      padding-left: calc(var(--timeline-dot-size) * 2 + 1rem);
    }
  }

  /* Desktop: Horizontal scrollable layout */
  @media (min-width: 768px) {
    .timeline-scroll-container {
      overflow-x: auto;
      overflow-y: visible;
      scroll-behavior: smooth;
      scrollbar-width: thin;
      scrollbar-color: var(--timeline-color) transparent;
      
      /* Hide scrollbar but keep functionality */
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
    
    .timeline-scroll-container::-webkit-scrollbar {
      display: none;
    }
    
    .timeline-track {
      left: 0;
      right: 0;
      top: var(--timeline-dot-size);
      height: 2px;
      transform: translateY(-50%);
    }

    .timeline-items {
      display: flex;
      flex-direction: row-reverse;
      gap: var(--timeline-gap);
      padding: calc(var(--timeline-dot-size) * 2) 1rem;
      width: max-content;
      min-width: 100%;
    }

    .timeline-item {
      position: relative;
      flex: 0 0 var(--timeline-card-width);
      max-width: var(--timeline-card-width);
    }

    .timeline-item:nth-child(even) {
      margin-top: 4rem;
    }
    
    /* Scroll indicators - removed gradients, keeping structure for potential future use */
    .timeline-scroll-indicator {
      display: none; /* Hide scroll indicators */
    }
  }

  /* Timeline arrow */
  .timeline-arrow {
    display: none;
  }
  
  @media (min-width: 768px) {
    .timeline-arrow {
      display: block;
      position: absolute;
      right: 0;
      top: var(--timeline-dot-size);
      transform: translateY(-50%);
      z-index: 2;
      color: var(--timeline-active-color);
    }
  }

  /* Timeline labels */
  .timeline-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 1rem;
    padding: 0 1rem;
  }
  
  @media (min-width: 768px) {
    .timeline-labels {
      padding: 0 1rem;
    }
  }

  .timeline-label {
    background-color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px; /* rounded-full for pill shape */
    /* Subtle shadow matching site's design */
    box-shadow: 
      0 1px 3px 0 rgba(0, 0, 0, 0.1),
      0 1px 2px -1px rgba(0, 0, 0, 0.1);
  }

  .timeline-label-clickable {
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
  }

  .timeline-label-clickable:hover {
    background-color: var(--timeline-active-color);
    color: white;
    transform: translateY(-1px);
    box-shadow: 
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
  }

  .timeline-label-clickable:active {
    transform: translateY(0);
  }

  /* Timeline dot */
  .timeline-dot {
    position: absolute;
    width: var(--timeline-dot-size);
    height: var(--timeline-dot-size);
    background-color: white;
    border: 2px solid var(--timeline-color);
    border-radius: 50%;
    z-index: 1;
    transition: all 0.3s ease;
  }

  @media (max-width: 767px) {
    .timeline-dot {
      left: var(--timeline-dot-size);
      top: 0.5rem;
      transform: translateX(-50%);
    }
  }

  @media (min-width: 768px) {
    .timeline-dot {
      left: 50%;
      top: 0;
      transform: translate(-50%, -50%);
    }
  }

  .timeline-item.current .timeline-dot {
    background-color: var(--timeline-active-color);
    border-color: var(--timeline-active-color);
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);
  }

  /* Timeline content */
  .timeline-content {
    background-color: white;
    border: 2px solid var(--timeline-color);
    border-radius: 0.5rem; /* rounded-lg to match site design */
    padding: 1.25rem;
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
    /* Multi-layer shadow for enhanced depth - matching site's card system */
    box-shadow: 
      0 1px 3px 0 rgba(0, 0, 0, 0.1),
      0 1px 2px -1px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .timeline-item.current .timeline-content {
    border-color: var(--timeline-active-color);
    /* Enhanced shadow for current role - matching card-elevated */
    box-shadow: 
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -4px rgba(0, 0, 0, 0.1);
  }

  .timeline-item:hover .timeline-content {
    /* Enhanced hover effect matching site's card-interactive system */
    box-shadow: 
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 8px 10px -6px rgba(0, 0, 0, 0.1);
    transform: translateY(-4px) scale(1.02);
  }

  .timeline-header-content {
    margin-bottom: 0.75rem;
  }

  .timeline-title {
    margin: 0 0 0.25rem;
    font-size: 1rem;
    font-weight: 600;
    color: #111827;
    line-height: 1.3;
  }

  .timeline-company {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .timeline-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    font-size: 0.75rem;
    color: #9ca3af;
    margin-bottom: 0.75rem;
  }

  .timeline-date {
    font-weight: 500;
    color: #6b7280;
  }

  .timeline-location::before {
    content: "📍 ";
  }

  .timeline-description {
    margin: 0.75rem 0 0;
    font-size: 0.875rem;
    color: #4b5563;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    flex-grow: 1;
  }
  
  /* Episode badge */
  .timeline-badge {
    margin-top: auto;
    padding-top: 0.75rem;
  }
  
  .episode-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
    background-color: #dbeafe;
    color: #1e40af;
    border-radius: 9999px;
    gap: 0.25rem;
  }
  
  .episode-badge::before {
    content: "🎙️";
    font-size: 0.875rem;
  }
  
  /* Episode-time job styling */
  .timeline-item.episode-time .timeline-dot {
    border-color: #3b82f6;
    background-color: #dbeafe;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .career-timeline-section {
      /* Remove background - let parent control it */
      background: transparent;
      --timeline-color: #374151;
      --timeline-active-color: #60a5fa;
    }
    
    .timeline-header h2 {
      color: #f9fafb;
    }
    
    .timeline-nav-btn {
      background-color: #374151;
      border-color: #4b5563;
      color: #d1d5db;
    }
    
    .timeline-nav-btn:hover:not(:disabled) {
      background-color: #1e3a8a;
      border-color: #60a5fa;
      color: #dbeafe;
    }

    .timeline-content {
      background-color: #1f2937; /* gray-800 to match site's dark cards */
      border-color: #4b5563;
      /* Dark mode shadow matching site's card system */
      box-shadow: 
        0 1px 3px 0 rgba(0, 0, 0, 0.4),
        inset 0 1px 0 0 rgba(255, 255, 255, 0.05),
        inset 0 -1px 0 0 rgba(0, 0, 0, 0.2);
    }

    .timeline-title {
      color: #f9fafb;
    }

    .timeline-company,
    .timeline-description {
      color: #9ca3af;
    }
    
    .timeline-label {
      background-color: #374151;
      color: #d1d5db;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .timeline-label-clickable:hover {
      background-color: var(--timeline-active-color);
      color: white;
    }
    
    .episode-badge {
      background-color: #1e3a8a;
      color: #dbeafe;
    }
    
    .timeline-item.episode-time .timeline-dot {
      background-color: #1e3a8a;
    }
  }
</style>

<script>
  // Timeline scroll controls with clickable labels
  document.addEventListener('DOMContentLoaded', () => {
    const timelines = document.querySelectorAll('[data-timeline-container]');
    
    timelines.forEach(timeline => {
      const section = timeline.closest('.career-timeline-section');
      if (!section) return;
      
      // Find clickable labels for this timeline
      const labelButtons = section.querySelectorAll('.timeline-label-clickable');
      
      labelButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const scrollDirection = button.getAttribute('data-scroll');
          
          if (scrollDirection === 'start') {
            // Scroll to the leftmost position (most recent jobs)
            timeline.scrollTo({ left: 0, behavior: 'smooth' });
          } else if (scrollDirection === 'end') {
            // Scroll to the rightmost position (earliest jobs)
            timeline.scrollTo({ left: timeline.scrollWidth, behavior: 'smooth' });
          }
        });
      });
      
      // Add mouse wheel support for horizontal scrolling
      timeline.addEventListener('wheel', (e) => {
        // Only handle horizontal scrolling if timeline has overflow
        if (timeline.scrollWidth > timeline.clientWidth) {
          e.preventDefault();
          // Shift+wheel or horizontal wheel for horizontal scroll
          if (e.shiftKey || Math.abs(e.deltaX) > Math.abs(e.deltaY)) {
            timeline.scrollLeft += e.deltaX || e.deltaY;
          } else {
            // Regular vertical scroll becomes horizontal
            timeline.scrollLeft += e.deltaY;
          }
        }
      }, { passive: false });
    });
  });
</script>