---
/**
 * Adaptive Header Component
 * Standard header for the website
 */
import type { Language } from '../types';
import LanguageSwitcher from './LanguageSwitcher.astro';
import ThemeToggle from './ThemeToggle.astro';

export interface Props {
  language: Language;
  currentPath: string;
  showNavigation?: boolean;
  showLanguageSwitcher?: boolean;
  showThemeToggle?: boolean;
}

const {
  language,
  currentPath,
  showNavigation = true,
  showLanguageSwitcher = true,
  showThemeToggle = true
} = Astro.props;

// Navigation items
const navigationItems = [
  { href: `/${language}/episodes/`, label: 'Episodes', isActive: currentPath.includes('/episodes/') },
  { href: `/${language}/guests/`, label: 'Guests', isActive: currentPath.includes('/guests/') },
  { href: `/about/`, label: 'About', isActive: currentPath.includes('/about') },
  { href: `/${language}/subscribe/`, label: 'Subscribe', isActive: currentPath.includes('/subscribe/') },
];
---

<!-- Header -->
  <header class="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50" transition:persist>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <!-- Logo and Brand -->
        <div class="flex items-center flex-shrink-0">
          <a href="/" class="flex items-center group" aria-label="CRO.CAFE Home">
            <img 
              src="/images/crocafe-logo.svg" 
              alt="CRO.CAFE Logo" 
              class="h-8 w-auto group-hover:scale-105 transition-transform duration-200"
              width="32"
              height="32"
            />
            <span class="ml-3 text-xl font-bold text-cro-orange dark:text-cro-orange-light">
              CRO.CAFE
            </span>
          </a>
        </div>

        <!-- Desktop Navigation -->
        {showNavigation && (
          <nav class="hidden md:flex space-x-8" aria-label="Main navigation">
            {navigationItems.map((item) => (
              <a
                href={item.href}
                class={`text-sm font-medium transition-colors duration-200 ${
                  item.isActive
                    ? 'text-cro-orange dark:text-cro-orange-light border-b-2 border-cro-orange dark:border-cro-orange-light pb-1'
                    : 'text-gray-700 dark:text-gray-300 hover:text-cro-orange dark:hover:text-cro-orange-light'
                }`}
                aria-current={item.isActive ? 'page' : undefined}
              >
                {item.label}
              </a>
            ))}
          </nav>
        )}

        <!-- Right side controls -->
        <div class="flex items-center space-x-4">
          {showLanguageSwitcher && (
            <LanguageSwitcher language={language} currentPath={currentPath} />
          )}
          {showThemeToggle && <ThemeToggle />}
          
          <!-- Mobile menu button -->
          <button
            type="button"
            class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-700 dark:text-gray-300 hover:text-cro-orange dark:hover:text-cro-orange-light hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cro-orange"
            aria-expanded="false"
            aria-controls="mobile-menu"
            data-mobile-menu-button
          >
            <span class="sr-only">Open main menu</span>
            <!-- Menu icon -->
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Mobile Navigation Menu -->
      <div class="md:hidden hidden" id="mobile-menu" data-mobile-menu>
        <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-gray-200 dark:border-gray-700">
          {navigationItems.map((item) => (
            <a
              href={item.href}
              class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
                item.isActive
                  ? 'text-cro-orange dark:text-cro-orange-light bg-cro-orange/10 dark:bg-cro-orange-light/10'
                  : 'text-gray-700 dark:text-gray-300 hover:text-cro-orange dark:hover:text-cro-orange-light hover:bg-gray-100 dark:hover:bg-gray-800'
              }`}
              aria-current={item.isActive ? 'page' : undefined}
            >
              {item.label}
            </a>
          ))}
        </div>
      </div>
    </div>
  </header>

<!-- Header JavaScript -->
<script>
// Mobile menu toggle for browser mode
function initializeMobileMenu() {
  const mobileMenuButton = document.querySelector('[data-mobile-menu-button]')
  const mobileMenu = document.querySelector('[data-mobile-menu]')

  // Clean up existing listeners
  if ((mobileMenuButton as any)?.__menuClickHandler) {
    mobileMenuButton?.removeEventListener('click', (mobileMenuButton as any).__menuClickHandler)
  }
  if ((document as any).__documentClickHandler) {
    document.removeEventListener('click', (document as any).__documentClickHandler)
  }

  if (mobileMenuButton && mobileMenu) {
    const menuClickHandler = () => {
      const isHidden = mobileMenu.classList.contains('hidden')
      mobileMenu.classList.toggle('hidden', !isHidden)
      mobileMenuButton.setAttribute('aria-expanded', isHidden.toString())
    }

    mobileMenuButton.addEventListener('click', menuClickHandler)
    ;(mobileMenuButton as any).__menuClickHandler = menuClickHandler
  }

  // Close menus when clicking outside
  const documentClickHandler = (event: Event) => {
    const target = event.target as Element

    // Close mobile menu if clicking outside
    if (mobileMenu && mobileMenuButton && !mobileMenu.contains(target) && !mobileMenuButton.contains(target)) {
      mobileMenu.classList.add('hidden')
      mobileMenuButton.setAttribute('aria-expanded', 'false')
    }
  }

  document.addEventListener('click', documentClickHandler)
  ;(document as any).__documentClickHandler = documentClickHandler
}

document.addEventListener('DOMContentLoaded', initializeMobileMenu)
document.addEventListener('astro:page-load', initializeMobileMenu)
</script>

<style>
  /* Header specific styles */
  
  /* Smooth transitions for menu states */
  [data-mobile-menu] {
    transition: all 0.2s ease-in-out;
  }
</style>