---
import { Image } from 'astro:assets';

export interface Props {
  images: Array<{
    src: string;
    alt: string;
    event?: string;
    date?: string;
  }>;
  columns?: 2 | 3 | 4 | 6;
  variant?: 'grid' | 'masonry' | 'carousel';
  showOverlay?: boolean;
  className?: string;
}

const { 
  images, 
  columns = 4, 
  variant = 'grid',
  showOverlay = false,
  className = ''
} = Astro.props;

const gridClass = {
  2: 'grid-cols-1 sm:grid-cols-2',
  3: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-4',
  6: 'grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6'
}[columns];
---

<div class={`photo-gallery photo-gallery--${variant} ${className}`}>
  {variant === 'grid' && (
    <div class={`grid ${gridClass} gap-2 sm:gap-3 lg:gap-4`}>
      {images.map((image) => (
        <div class="photo-gallery__item group relative overflow-hidden rounded-lg">
          <Image
            src={image.src}
            alt={image.alt}
            loading="lazy"
            decoding="async"
            width={400}
            height={300}
            class="w-full h-auto object-cover transition-transform duration-300 group-hover:scale-105"
          />
          {showOverlay && image.event && (
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-3">
              <div class="text-white">
                <p class="text-sm font-semibold line-clamp-1">{image.event}</p>
                {image.date && (
                  <p class="text-xs opacity-80">{image.date}</p>
                )}
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  )}
  
  {variant === 'carousel' && (
    <div class="photo-carousel relative" data-carousel>
      <div class="carousel-container overflow-x-auto overflow-y-hidden scrollbar-hide">
        <div class="flex gap-4 transition-transform duration-300 pb-2" data-carousel-track>
          {images.map((image, index) => (
            <div class="photo-carousel__item flex-shrink-0 w-[calc(50%-0.5rem)] sm:w-[calc(33.333%-0.667rem)] lg:w-[calc(25%-0.75rem)]">
              <Image
                src={image.src}
                alt={image.alt}
                loading={index < 4 ? 'eager' : 'lazy'}
                decoding="async"
                width={600}
                height={400}
                class="w-full h-48 sm:h-56 lg:h-64 object-cover rounded-lg"
            />
            {image.event && (
              <div class="mt-2">
                <p class="text-sm font-medium text-gray-900 dark:text-gray-100">{image.event}</p>
                {image.date && (
                  <p class="text-xs text-gray-600 dark:text-gray-400">{image.date}</p>
                )}
              </div>
            )}
          </div>
        ))}
        </div>
      </div>
      <button 
        class="carousel-nav carousel-nav--prev absolute left-2 top-[40%] -translate-y-1/2 min-w-[48px] min-h-[48px] bg-white/90 dark:bg-gray-800/90 rounded-full flex items-center justify-center shadow-lg opacity-0 hover:opacity-100 transition-opacity disabled:opacity-0 touch-target"
        data-carousel-prev
        aria-label="Previous image"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      <button 
        class="carousel-nav carousel-nav--next absolute right-2 top-[40%] -translate-y-1/2 min-w-[48px] min-h-[48px] bg-white/90 dark:bg-gray-800/90 rounded-full flex items-center justify-center shadow-lg opacity-0 hover:opacity-100 transition-opacity disabled:opacity-0 touch-target"
        data-carousel-next
        aria-label="Next image"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  )}
  
  {variant === 'masonry' && (
    <div class={`columns-${columns} gap-2 sm:gap-3 lg:gap-4 space-y-2 sm:space-y-3 lg:space-y-4`}>
      {images.map((image) => (
        <div class="photo-gallery__item break-inside-avoid group relative overflow-hidden rounded-lg">
          <Image
            src={image.src}
            alt={image.alt}
            loading="lazy"
            decoding="async"
            width={400}
            height={600}
            class="w-full transition-transform duration-300 group-hover:scale-105"
          />
          {showOverlay && image.event && (
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-3">
              <div class="text-white">
                <p class="text-sm font-semibold line-clamp-1">{image.event}</p>
                {image.date && (
                  <p class="text-xs opacity-80">{image.date}</p>
                )}
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  )}
</div>

<style>
  .photo-gallery--carousel {
    position: relative;
  }
  
  .photo-gallery--carousel:hover .carousel-nav:not(:disabled) {
    opacity: 1;
  }
  
  .carousel-container {
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
  }
  
  .scrollbar-hide {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  @media (max-width: 640px) {
    .carousel-nav {
      display: none;
    }
  }
</style>

<script>
// Enhanced carousel functionality with smooth scrolling
document.addEventListener('DOMContentLoaded', () => {
  const carousels = document.querySelectorAll('[data-carousel]')

  carousels.forEach(carousel => {
    const container = carousel.querySelector('.carousel-container')
    const track = carousel.querySelector('[data-carousel-track]')
    const prevBtn = carousel.querySelector('[data-carousel-prev]')
    const nextBtn = carousel.querySelector('[data-carousel-next]')

    if (!track || !container || !prevBtn || !nextBtn) {return}

    const updateButtons = () => {
      const scrollLeft = container.scrollLeft
      const maxScroll = container.scrollWidth - container.clientWidth

      prevBtn.disabled = scrollLeft <= 0
      nextBtn.disabled = scrollLeft >= maxScroll - 1
    }

    const scrollToIndex = (direction) => {
      const containerWidth = container.clientWidth
      const currentScroll = container.scrollLeft
      const items = track.children
      let targetScroll = currentScroll

      if (direction === 'next') {
        // Find the first item that's partially out of view
        for (let i = 0; i < items.length; i++) {
          const item = items[i]
          const itemLeft = item.offsetLeft
          const itemRight = itemLeft + item.offsetWidth

          if (itemRight > currentScroll + containerWidth + 10) {
            targetScroll = Math.min(itemLeft, container.scrollWidth - containerWidth)
            break
          }
        }
      } else {
        // Find the first item that's partially out of view on the left
        for (let i = items.length - 1; i >= 0; i--) {
          const item = items[i]
          const itemLeft = item.offsetLeft

          if (itemLeft < currentScroll - 10) {
            targetScroll = itemLeft
            break
          }
        }
      }

      container.scrollTo({
        left: targetScroll,
        behavior: 'smooth'
      })
    }

    prevBtn.addEventListener('click', () => scrollToIndex('prev'))
    nextBtn.addEventListener('click', () => scrollToIndex('next'))
    container.addEventListener('scroll', updateButtons)

    // Initial button state
    updateButtons()

    // Touch/swipe support for mobile
    let touchStartX = 0
    let touchEndX = 0

    container.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX
    }, { passive: true })

    container.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX
      const diff = touchStartX - touchEndX

      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          scrollToIndex('next')
        } else {
          scrollToIndex('prev')
        }
      }
    }, { passive: true })
  })
})
</script>