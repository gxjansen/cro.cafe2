---
import GuestProfilePictureOptimized from './GuestProfilePictureOptimized.astro';
import CountryFlag from './CountryFlag.astro';
import { getOptimalProfessionalDisplay, checkIsFreelancer } from '../utils/guest-display-utils';
import type { Language } from '../types';

export interface Props {
  guest: any;
  language?: Language;
  size?: 'small' | 'medium' | 'large';
  showEpisodeCount?: boolean;
}

const { guest, language = 'en', size = 'medium', showEpisodeCount = false } = Astro.props;

// Translations for the "at" text
const translations = {
  en: { at: 'at' },
  nl: { at: 'bij' },
  de: { at: 'bei' },
  es: { at: 'en' }
};

// Helper function to get guest URL for a specific language
function getGuestUrl(guest: any, lang?: Language): string {
  const slug = guest.data.slug || guest.slug;
  
  // Check if guest has episodes in the requested language
  const guestLanguages = guest.data.languages || [];
  
  if (!lang) {
    // Use the first available language for the guest
    const firstLang = guestLanguages[0] || 'en';
    return firstLang === 'en' ? `/guests/${slug}/` : `/${firstLang}/guests/${slug}/`;
  }
  
  // If guest has episodes in the requested language, use language-specific URL
  if (guestLanguages.includes(lang)) {
    return lang === 'en' ? `/guests/${slug}/` : `/${lang}/guests/${slug}/`;
  }
  
  // If guest has no episodes in the requested language, link to their first available language
  if (guestLanguages.length > 0) {
    const firstLang = guestLanguages[0];
    return firstLang === 'en' ? `/guests/${slug}/` : `/${firstLang}/guests/${slug}/`;
  }
  
  // If guest has no episodes at all, link to the all guests listing page
  return lang === 'en' ? '/guests/' : `/${lang}/guests/`;
}

// Get LinkedIn URL from socialLinks
function getLinkedInUrl(guest: any): string | null {
  if (guest.data.linkedin) {
    return guest.data.linkedin;
  }
  if (guest.data.socialLinks) {
    const linkedinLink = guest.data.socialLinks.find((link: any) => link.platform === 'linkedin');
    return linkedinLink ? linkedinLink.url : null;
  }
  return null;
}

// Get guest image URL
function getGuestImageUrl(guest: any): string | undefined {
  if (guest.data.imageUrl) return guest.data.imageUrl;
  if (guest.data.image) return guest.data.image;
  
  // Construct image path from slug
  const slug = guest.data.slug || guest.slug;
  return `/images/guests/${slug}.webp`;
}

const linkedInUrl = getLinkedInUrl(guest);
const imageUrl = getGuestImageUrl(guest);

// Get LinkedIn data with priority: LinkedIn data first, then fallback to static data
const guestName = guest.data.linkedin_full_name || guest.data.name;
const guestRole = guest.data.linkedin_current_role || guest.data.role;
const guestCompany = guest.data.linkedin_current_company || null;
const linkedinHeadline = guest.data.linkedin_headline || null;
const isFreelancer = checkIsFreelancer(linkedinHeadline, guestRole);

// Get optimized professional display using smart deduplication
const professionalDisplay = getOptimalProfessionalDisplay(
  { role: guestRole, company: guestCompany, headline: linkedinHeadline, isFreelancer },
  language,
  translations
);

// Get LinkedIn country
const linkedinCountry = guest.data.linkedin_country || null;

// Truncate headline based on size
function truncateText(text: string | null, maxLength: number): string | null {
  if (!text) return null;
  if (text.length <= maxLength) return text;
  
  // Smart truncation at word boundary
  const truncated = text.substr(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  return text.substr(0, lastSpace > 0 ? lastSpace : maxLength) + '...';
}

// Get truncated lengths based on screen size
const getTextLengths = () => {
  switch(size) {
    case 'small': return { primary: 35, headline: 45 };
    case 'medium': return { primary: 50, headline: 60 };
    case 'large': return { primary: 70, headline: 80 };
    default: return { primary: 50, headline: 60 };
  }
};

const textLengths = getTextLengths();
const truncatedPrimaryText = truncateText(professionalDisplay.primary, textLengths.primary);
const truncatedSecondaryText = truncateText(professionalDisplay.secondary, textLengths.headline);

// Size-specific classes
const sizeClasses = {
  small: {
    container: 'p-4',
    imageSize: 'sm' as const,
    title: 'text-sm font-semibold',
    subtitle: 'text-xs',
    headline: 'text-xs',
    linkedin: 'w-4 h-4',
    flagSize: 'sm' as const
  },
  medium: {
    container: 'p-4',
    imageSize: 'sm' as const,
    title: 'text-base font-semibold',
    subtitle: 'text-sm',
    headline: 'text-sm',
    linkedin: 'w-4 h-4',
    flagSize: 'sm' as const
  },
  large: {
    container: 'p-6',
    imageSize: 'md' as const,
    title: 'text-lg font-semibold',
    subtitle: 'text-base',
    headline: 'text-sm',
    linkedin: 'w-5 h-5',
    flagSize: 'md' as const
  }
};

const classes = sizeClasses[size];
---

<a 
  href={getGuestUrl(guest, language)} 
  class={`card card-interactive ${classes.container} block group`}
  aria-label={`View ${guestName}'s profile`}
>
  <div class="flex items-start gap-4">
    <!-- Guest Image -->
    <div class="flex-shrink-0 group-hover:opacity-90 transition-opacity">
      <GuestProfilePictureOptimized 
        guest={guest}
        size={classes.imageSize}
        loading="lazy"
        grayscale={true}
      />
    </div>
    
    <!-- Guest Info -->
    <div class="flex-1 min-w-0">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <!-- Guest Name -->
          <h3 class={`${classes.title} text-gray-900 dark:text-white mb-1 group-hover:text-primary-600 dark:group-hover:text-primary-300 transition-colors`}>
            {guestName}
          </h3>
          
          <!-- Primary Professional Information -->
          {truncatedPrimaryText && (
            <p class={`${classes.subtitle} text-gray-600 dark:text-gray-400 ${professionalDisplay.showBoth && truncatedSecondaryText ? 'mb-1' : 'mb-2'}`}
               title={professionalDisplay.primary}>
              {truncatedPrimaryText}
            </p>
          )}
          
          <!-- Secondary Professional Information (only shown if different and meaningful) -->
          {professionalDisplay.showBoth && truncatedSecondaryText && (
            <p class={`${classes.headline} italic font-medium text-gray-600 dark:text-gray-300 border-l-2 border-linkedin dark:border-linkedin-dark pl-2 mb-2 line-clamp-2`}
               title={professionalDisplay.secondary}>
              {truncatedSecondaryText}
            </p>
          )}
          
          <!-- Location with Country Flag -->
          {linkedinCountry && (
            <div class="mb-2">
              <CountryFlag 
                country={linkedinCountry}
                size={classes.flagSize}
                showName={true}
              />
            </div>
          )}
          
          <!-- Episode Count (optional) -->
          {showEpisodeCount && guest.data.episodeCount && (
            <p class="text-xs text-gray-500 dark:text-gray-400">
              {guest.data.episodeCount} episode{guest.data.episodeCount !== 1 ? 's' : ''}
            </p>
          )}
        </div>
        
      </div>
    </div>
  </div>
</a>