---
import GuestImage from './GuestImage.astro';
import type { Language } from '../types';

export interface Props {
  guest: any;
  language?: Language;
  size?: 'small' | 'medium' | 'large';
  showEpisodeCount?: boolean;
}

const { guest, language, size = 'medium', showEpisodeCount = false } = Astro.props;

// Helper function to get guest URL for a specific language
function getGuestUrl(guest: any, lang?: Language): string {
  const slug = guest.data.slug || guest.slug;
  if (!lang) {
    // Use the first available language for the guest
    const firstLang = guest.data.languages[0];
    return firstLang === 'en' ? `/guests/${slug}/` : `/${firstLang}/guests/${slug}/`;
  }
  return lang === 'en' ? `/guests/${slug}/` : `/${lang}/guests/${slug}/`;
}

// Get LinkedIn URL from socialLinks
function getLinkedInUrl(guest: any): string | null {
  if (guest.data.linkedin) {
    return guest.data.linkedin;
  }
  if (guest.data.socialLinks) {
    const linkedinLink = guest.data.socialLinks.find((link: any) => link.platform === 'linkedin');
    return linkedinLink ? linkedinLink.url : null;
  }
  return null;
}

// Get guest image URL
function getGuestImageUrl(guest: any): string | undefined {
  if (guest.data.imageUrl) return guest.data.imageUrl;
  if (guest.data.image) return guest.data.image;
  
  // Construct image path from slug
  const slug = guest.data.slug || guest.slug;
  return `/images/guests/${slug}.webp`;
}

const linkedInUrl = getLinkedInUrl(guest);
const imageUrl = getGuestImageUrl(guest);

// Size-specific classes
const sizeClasses = {
  small: {
    container: 'p-4',
    image: 'w-12 h-12',
    title: 'text-sm font-semibold',
    subtitle: 'text-xs',
    linkedin: 'w-4 h-4'
  },
  medium: {
    container: 'p-4',
    image: 'w-16 h-16',
    title: 'text-base font-semibold',
    subtitle: 'text-sm',
    linkedin: 'w-4 h-4'
  },
  large: {
    container: 'p-6',
    image: 'w-20 h-20',
    title: 'text-lg font-semibold',
    subtitle: 'text-base',
    linkedin: 'w-5 h-5'
  }
};

const classes = sizeClasses[size];
---

<a 
  href={getGuestUrl(guest, language)} 
  class={`card card-interactive ${classes.container} block group`}
  aria-label={`View ${guest.data.name}'s profile`}
>
  <div class="flex items-start gap-4">
    <!-- Guest Image -->
    <div class="flex-shrink-0 group-hover:opacity-80 transition-opacity">
      <GuestImage 
        imageUrl={imageUrl} 
        alt={`Photo of ${guest.data.name}`}
        class={`${classes.image} rounded-full object-cover`}
      />
    </div>
    
    <!-- Guest Info -->
    <div class="flex-1 min-w-0">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <!-- Guest Name -->
          <h3 class={`${classes.title} text-gray-900 dark:text-white mb-1 group-hover:text-primary-600 dark:group-hover:text-primary-300 transition-colors`}>
            {guest.data.name}
          </h3>
          
          <!-- Job Title and Company -->
          {(guest.data.role || guest.data.company) && (
            <p class={`${classes.subtitle} text-gray-600 dark:text-gray-400 mb-2`}>
              {guest.data.role && guest.data.company ? (
                <>{guest.data.role} at {guest.data.company}</>
              ) : (
                guest.data.role || guest.data.company
              )}
            </p>
          )}
          
          <!-- Episode Count (optional) -->
          {showEpisodeCount && guest.data.episodeCount && (
            <p class="text-xs text-gray-500 dark:text-gray-400">
              {guest.data.episodeCount} episode{guest.data.episodeCount !== 1 ? 's' : ''}
            </p>
          )}
        </div>
        
        <!-- LinkedIn Icon -->
        {linkedInUrl && (
          <div 
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              window.open(linkedInUrl, '_blank', 'noopener,noreferrer');
            }}
            class="text-primary-600 hover:text-primary-700 dark:text-primary-300 dark:hover:text-primary-200 transition-colors flex-shrink-0 ml-2 cursor-pointer relative z-10"
            aria-label={`${guest.data.name} on LinkedIn`}
            role="button"
            tabindex="0"
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                e.stopPropagation();
                window.open(linkedInUrl, '_blank', 'noopener,noreferrer');
              }
            }}
          >
            <svg class={classes.linkedin} fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </div>
        )}
      </div>
    </div>
  </div>
</a>