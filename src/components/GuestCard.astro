---
import GuestProfilePicture from './GuestProfilePicture.astro';
import LinkedInBadge from './LinkedInBadge.astro';
import { hasLinkedInData } from '../utils/content';
import type { Language } from '../types';

export interface Props {
  guest: any;
  language?: Language;
  size?: 'small' | 'medium' | 'large';
  showEpisodeCount?: boolean;
}

const { guest, language, size = 'medium', showEpisodeCount = false } = Astro.props;

// Helper function to get guest URL with optional language parameter
function getGuestUrl(guest: any, currentLanguage?: Language): string {
  const slug = guest.data.slug || guest.slug;
  return currentLanguage ? `/guests/${slug}/?lang=${currentLanguage}` : `/guests/${slug}/`;
}

// Get LinkedIn URL from socialLinks
function getLinkedInUrl(guest: any): string | null {
  if (guest.data.linkedin) {
    return guest.data.linkedin;
  }
  if (guest.data.socialLinks) {
    const linkedinLink = guest.data.socialLinks.find((link: any) => link.platform === 'linkedin');
    return linkedinLink ? linkedinLink.url : null;
  }
  return null;
}

// Check if guest has LinkedIn data
const hasLinkedIn = hasLinkedInData(guest);
const linkedInUrl = getLinkedInUrl(guest);

// Get LinkedIn sync status
const linkedInSyncStatus = guest?.linkedInData?.lastSync ? 'synced' : 'never';
const lastSyncDate = guest?.linkedInData?.lastSync ? new Date(guest.linkedInData.lastSync) : undefined;

// Get current role/company from LinkedIn data (for hover effect)
const currentRole = guest?.linkedInData?.headline || guest?.data?.role;
const currentCompany = guest?.linkedInData?.currentCompany || guest?.data?.company;

// Size-specific classes
const sizeClasses = {
  small: {
    container: 'p-4',
    image: 'sm', // GuestProfilePicture size
    title: 'text-sm font-semibold',
    subtitle: 'text-xs',
    linkedin: 'w-4 h-4',
    badge: 'sm'
  },
  medium: {
    container: 'p-4',
    image: 'md', // GuestProfilePicture size
    title: 'text-base font-semibold',
    subtitle: 'text-sm',
    linkedin: 'w-4 h-4',
    badge: 'sm'
  },
  large: {
    container: 'p-6',
    image: 'lg', // GuestProfilePicture size
    title: 'text-lg font-semibold',
    subtitle: 'text-base',
    linkedin: 'w-5 h-5',
    badge: 'md'
  }
};

const classes = sizeClasses[size];
---

<div class={`card card-interactive ${classes.container} group`}>
  <div class="flex items-start gap-4">
    <!-- Guest Profile Picture with LinkedIn indicator -->
    <a 
      href={getGuestUrl(guest, language)} 
      class="relative flex-shrink-0 hover:opacity-80 transition-opacity"
      aria-label={`View ${guest.data.name}'s profile`}
    >
      <GuestProfilePicture 
        guest={guest}
        size={classes.image}
        loading="lazy"
        class="transition-transform group-hover:scale-105"
        showLinkedInBadge={hasLinkedIn}
      />
    </a>
    
    <!-- Guest Info -->
    <div class="flex-1 min-w-0">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <!-- Guest Name -->
          <h3 class={`${classes.title} text-gray-900 dark:text-white mb-1`}>
            <a 
              href={getGuestUrl(guest, language)} 
              class="hover:text-primary-600 dark:hover:text-primary-300 transition-colors"
            >
              {guest.data.name}
            </a>
          </h3>
          
          <!-- Job Title and Company with LinkedIn hover effect -->
          {(guest.data.role || guest.data.company || currentRole || currentCompany) && (
            <div class="relative mb-2">
              <a 
                href={getGuestUrl(guest, language)} 
                class={`${classes.subtitle} text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-300 transition-all duration-300 block`}
              >
                {/* Default role/company */}
                <span class="block group-hover:opacity-0 transition-opacity duration-300">
                  {guest.data.role && guest.data.company ? (
                    <>{guest.data.role} at {guest.data.company}</>
                  ) : (
                    guest.data.role || guest.data.company
                  )}
                </span>
                
                {/* LinkedIn current role/company (shown on hover if different) */}
                {hasLinkedIn && (currentRole !== guest.data.role || currentCompany !== guest.data.company) && (
                  <span class={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 ${classes.subtitle} text-primary-600 dark:text-primary-300`}>
                    {currentRole && currentCompany ? (
                      <>{currentRole} at {currentCompany}</>
                    ) : (
                      currentRole || currentCompany
                    )}
                  </span>
                )}
              </a>
              
              {/* LinkedIn sync badge */}
              {hasLinkedIn && (
                <div class="inline-flex items-center gap-2 mt-1">
                  <LinkedInBadge 
                    status={linkedInSyncStatus}
                    lastSync={lastSyncDate}
                    size={classes.badge}
                    class="opacity-60 group-hover:opacity-100 transition-opacity duration-300"
                  />
                </div>
              )}
            </div>
          )}
          
          <!-- Episode Count (optional) -->
          {showEpisodeCount && guest.data.episodeCount && (
            <p class="text-xs text-gray-500 dark:text-gray-400">
              {guest.data.episodeCount} episode{guest.data.episodeCount !== 1 ? 's' : ''}
            </p>
          )}
        </div>
        
        <!-- LinkedIn Icon -->
        {linkedInUrl && (
          <a 
            href={linkedInUrl} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-primary-600 hover:text-primary-700 dark:text-primary-300 dark:hover:text-primary-200 transition-colors flex-shrink-0 ml-2"
            aria-label={`${guest.data.name} on LinkedIn`}
          >
            <svg class={classes.linkedin} fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </a>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  /* Smooth transitions for hover effects */
  .group:hover .transition-opacity {
    transition-delay: 0.1s;
  }
  
  /* LinkedIn data indicator animation */
  @keyframes linkedInPulse {
    0%, 100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }
  
  /* Dark mode adjustments for LinkedIn badge */
  :global(.dark) .group:hover .text-primary-600 {
    color: var(--color-primary-300);
  }
  
  /* Accessibility: Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .transition-opacity,
    .transition-transform,
    .transition-all,
    .transition-colors {
      transition: none !important;
    }
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .group:hover .opacity-0 {
      opacity: 0.1;
    }
    .group:hover .opacity-100 {
      opacity: 1;
      font-weight: bold;
    }
  }
</style>