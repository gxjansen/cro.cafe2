---
import type { CollectionEntry } from 'astro:content';
import type { Language } from '../types';

interface Props {
  guests: CollectionEntry<'guests'>[];
  showLanguageFilter?: boolean;
  language?: Language;
}

const { guests, showLanguageFilter = true, language } = Astro.props;

// Filter out guests with zero episodes
const guestsWithEpisodes = guests.filter(guest => 
  guest.data.episodes && guest.data.episodes.length > 0
);

// Prepare filter data
const showFilters = showLanguageFilter ? {
  en: { name: 'English', flag: 'ðŸ‡¬ðŸ‡§', count: 0 },
  nl: { name: 'Dutch', flag: 'ðŸ‡³ðŸ‡±', count: 0 },
  de: { name: 'German', flag: 'ðŸ‡©ðŸ‡ª', count: 0 },
  es: { name: 'Spanish', flag: 'ðŸ‡ªðŸ‡¸', count: 0 }
} : {};

// Count guests per show/language only if showing language filter
if (showLanguageFilter) {
  guestsWithEpisodes.forEach(guest => {
    guest.data.languages.forEach(lang => {
      if (showFilters[lang]) {
        showFilters[lang].count++;
      }
    });
  });
}

// Get unique countries from guests
const countryMap = new Map<string, number>();
guestsWithEpisodes.forEach(guest => {
  if (guest.data.linkedin_country) {
    countryMap.set(guest.data.linkedin_country, (countryMap.get(guest.data.linkedin_country) || 0) + 1);
  }
});
const countries = Array.from(countryMap.entries())
  .sort(([a], [b]) => a.localeCompare(b))
  .map(([country, count]) => ({ name: country, count }));

// Curated list of most relevant CRO/digital marketing skills
const relevantSkills = [
  'Online Marketing',
  'E-commerce', 
  'Web Analytics',
  'Google Analytics',
  'Conversion Optimization',
  'SEO',
  'Digital Marketing',
  'User Experience',
  'Usability',
  'Analytics',
  'A/B Testing',
  'UX',
  'Marketing Strategy',
  'Performance Marketing',
  'Growth Hacking',
  'CRO',
  'Conversion Rate Optimization',
  'Digital Strategy',
  'Marketing Automation',
  'Email Marketing',
  'Content Marketing',
  'Social Media Marketing',
  'Pay Per Click',
  'PPC',
  'SEM',
  'Search Engine Marketing',
  'Data Analysis',
  'Customer Experience',
  'Lead Generation',
  'Marketing Research',
  'Brand Management',
  'Product Management',
  'Web Development',
  'JavaScript',
  'Marketing Analytics',
  'Customer Acquisition',
  'Retention Marketing',
  'Funnel Optimization',
  'Landing Page Optimization',
  'Mobile Marketing'
];

// Count guests for each relevant skill
const skillCounts: Record<string, number> = {};
relevantSkills.forEach(skill => {
  let count = 0;
  guestsWithEpisodes.forEach(guest => {
    if (guest.data.linkedin_skills) {
      const skillsText = typeof guest.data.linkedin_skills === 'string' 
        ? guest.data.linkedin_skills.toLowerCase()
        : '';
      if (skillsText.includes(skill.toLowerCase())) {
        count++;
      }
    }
  });
  if (count > 0) {
    skillCounts[skill] = count;
  }
});

// Sort skills by count and keep only those with guests
const skills = Object.entries(skillCounts)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 30) // Top 30 most popular relevant skills
  .map(([skill, count]) => ({ name: skill, count }));

// Unique ID for this instance to avoid conflicts
const instanceId = Math.random().toString(36).substring(7);
---

<!-- Filter Controls -->
<section class="mb-6" data-filter-instance={instanceId}>
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-3">
    <!-- Single Row Layout -->
    <div class="flex flex-col lg:flex-row lg:items-center gap-4">
      <!-- Filter Label & Clear Button -->
      <div class="flex items-center justify-between lg:justify-start lg:gap-4 flex-shrink-0">
        <h2 class="text-sm font-semibold text-gray-900 dark:text-white">Filter:</h2>
        <button 
          id={`clearFilters-${instanceId}`}
          class="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors lg:order-last"
        >
          Clear All
        </button>
      </div>

      {showLanguageFilter && (
        <!-- Show Pills -->
        <div class="flex flex-wrap gap-1.5 flex-shrink-0">
          {Object.entries(showFilters).map(([lang, info]) => (
            <label class="inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                name={`show-${instanceId}`}
                value={lang}
                class="hidden peer"
                checked
              />
              <div class="flex items-center gap-1.5 px-2.5 py-1.5 text-xs rounded-full border border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50 text-gray-500 dark:text-gray-400 transition-all
                peer-checked:bg-primary-100 peer-checked:border-primary-500 peer-checked:text-primary-700 
                dark:peer-checked:bg-primary-900/30 dark:peer-checked:border-primary-400 dark:peer-checked:text-primary-300
                hover:border-primary-300 dark:hover:border-primary-500">
                <span class="text-sm">{info.flag}</span>
                <span class="font-medium">{info.name}</span>
                <span class="opacity-70">({info.count})</span>
              </div>
            </label>
          ))}
        </div>
      )}

      <!-- Compact Dropdowns -->
      <div class="flex gap-3 flex-grow lg:flex-grow-0 lg:ml-auto">
        <select 
          id={`countryFilter-${instanceId}`}
          class="flex-1 lg:w-40 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-xs focus:ring-primary-500 focus:border-primary-500"
        >
          <option value="">All Countries</option>
          {countries.map(country => (
            <option value={country.name}>{country.name} ({country.count})</option>
          ))}
        </select>

        <select 
          id={`skillFilter-${instanceId}`}
          class="flex-1 lg:w-48 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-xs focus:ring-primary-500 focus:border-primary-500"
        >
          <option value="">All Expertise</option>
          {skills.map(skill => (
            <option value={skill.name}>{skill.name} ({skill.count})</option>
          ))}
        </select>
      </div>
    </div>
  </div>
</section>

<script data-instance-id={instanceId} data-show-language-filter={showLanguageFilter.toString()} data-language={language}>
  // Import instance-specific variables
  const instanceId = document.currentScript?.getAttribute('data-instance-id');
  const showLanguageFilter = document.currentScript?.getAttribute('data-show-language-filter') === 'true';
  const language = document.currentScript?.getAttribute('data-language');

  // Guest filtering functionality
  function initializeFilters() {
    const filterInstance = document.querySelector(`[data-filter-instance="${instanceId}"]`);
    if (!filterInstance) return;

    const showCheckboxes = showLanguageFilter 
      ? filterInstance.querySelectorAll(`input[name="show-${instanceId}"]`)
      : [];
    const countryFilter = document.getElementById(`countryFilter-${instanceId}`) as HTMLSelectElement;
    const skillFilter = document.getElementById(`skillFilter-${instanceId}`) as HTMLSelectElement;
    const clearButton = document.getElementById(`clearFilters-${instanceId}`);
    const resultsInfo = document.getElementById('resultsInfo');
    const guestsGrid = document.getElementById('guestsGrid');
    
    function filterGuests() {
      const selectedShows = showLanguageFilter
        ? Array.from(showCheckboxes)
            .filter((cb): cb is HTMLInputElement => cb instanceof HTMLInputElement && cb.checked)
            .map((cb) => cb.value)
        : [language]; // If no language filter, use the current page language
      
      const selectedCountry = countryFilter?.value || '';
      const selectedSkill = skillFilter?.value || '';
      
      const guestCards = guestsGrid?.querySelectorAll('.guest-card') || [];
      const noShowsMessage = document.getElementById('noShowsMessage');
      const noResultsMessage = document.getElementById('noResultsMessage');
      let visibleCount = 0;
      
      // Check if no shows are selected (only relevant for international page)
      if (showLanguageFilter && selectedShows.length === 0) {
        // Hide all cards and show no shows message
        guestCards.forEach((card) => {
          if (card instanceof HTMLElement) {
            card.style.display = 'none';
          }
        });
        if (guestsGrid) guestsGrid.style.display = 'none';
        if (noShowsMessage) noShowsMessage.classList.remove('hidden');
        if (noResultsMessage) noResultsMessage.classList.add('hidden');
        if (resultsInfo) resultsInfo.textContent = 'No filters selected';
        return;
      }
      
      // Shows are selected or we're on a language-specific page
      if (noShowsMessage) noShowsMessage.classList.add('hidden');
      
      // Apply filters and count visible guests
      guestCards.forEach((card) => {
        if (!(card instanceof HTMLElement)) return;
        
        const languages = JSON.parse(card.getAttribute('data-languages') || '[]');
        const country = card.getAttribute('data-country') || '';
        const skills = card.getAttribute('data-skills') || '';
        
        // Check show filter
        const showMatch = showLanguageFilter 
          ? languages.some((lang: string) => selectedShows.includes(lang))
          : true; // For language-specific pages, we already filtered by language server-side
        
        // Check country filter
        const countryMatch = !selectedCountry || country === selectedCountry;
        
        // Check skill filter
        const skillMatch = !selectedSkill || skills.toLowerCase().includes(selectedSkill.toLowerCase());
        
        const shouldShow = showMatch && countryMatch && skillMatch;
        
        if (shouldShow) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Show appropriate message based on results
      if (visibleCount === 0) {
        // No results from filter combination
        if (guestsGrid) guestsGrid.style.display = 'none';
        if (noResultsMessage) noResultsMessage.classList.remove('hidden');
      } else {
        // Has results, show grid and hide no results message
        if (guestsGrid) guestsGrid.style.display = 'grid';
        if (noResultsMessage) noResultsMessage.classList.add('hidden');
      }
      
      // Update results info
      if (resultsInfo) {
        if (visibleCount === 0) {
          resultsInfo.textContent = 'No matching experts found';
        } else {
          const filterText: string[] = [];
          if (showLanguageFilter && selectedShows.length > 0 && selectedShows.length < 4) {
            const showNames = selectedShows.map((lang: string) => {
              const checkbox = filterInstance.querySelector(`input[value="${lang}"]`) as HTMLInputElement;
              return checkbox?.parentElement?.querySelector('span:nth-child(2)')?.textContent;
            }).filter(Boolean);
            filterText.push(showNames.join(', '));
          }
          if (selectedCountry) filterText.push(selectedCountry);
          if (selectedSkill) filterText.push(selectedSkill);
          
          const filterDescription = filterText.length > 0 ? ` (${filterText.join(', ')})` : '';
          resultsInfo.textContent = `Showing ${visibleCount} experts${filterDescription}`;
        }
      }
    }
    
    function clearFilters() {
      showCheckboxes.forEach((cb) => {
        if (cb instanceof HTMLInputElement) {
          cb.checked = true;
        }
      });
      if (countryFilter) countryFilter.value = '';
      if (skillFilter) skillFilter.value = '';
      filterGuests();
    }
    
    // Event listeners
    showCheckboxes.forEach(cb => cb.addEventListener('change', filterGuests));
    countryFilter?.addEventListener('change', filterGuests);
    skillFilter?.addEventListener('change', filterGuests);
    clearButton?.addEventListener('click', clearFilters);
    
    // Initialize with all filters active
    filterGuests();
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }
</script>