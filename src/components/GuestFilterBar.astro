---
import type { CollectionEntry } from 'astro:content';
import type { Language } from '../types';
import { SKILL_GROUPS, countGuestsInGroup, getGroupDisplay } from '../utils/skillGroups';
import { checkIsFreelancer } from '../utils/guest-display-utils';

interface Props {
  guests: CollectionEntry<'guests'>[];
  showLanguageFilter?: boolean;
  language?: Language;
}

const { guests, showLanguageFilter = true, language } = Astro.props;

// For filter counts, we still use guests with episodes
// but for display purposes, we'll show all guests
const guestsWithEpisodes = guests.filter(guest => 
  guest.data.episodes && Array.isArray(guest.data.episodes) && guest.data.episodes.length > 0
);

// Count freelancers among all guests (not just those with episodes)
let freelancerCount = 0;
guests.forEach(guest => {
  if (guest?.data && checkIsFreelancer(guest.data.linkedin_headline, guest.data.role)) {
    freelancerCount++;
  }
});

// Prepare filter data
const showFilters = showLanguageFilter ? {
  en: { name: 'English', flag: 'ðŸ‡¬ðŸ‡§', count: 0 },
  nl: { name: 'Dutch', flag: 'ðŸ‡³ðŸ‡±', count: 0 },
  de: { name: 'German', flag: 'ðŸ‡©ðŸ‡ª', count: 0 },
  es: { name: 'Spanish', flag: 'ðŸ‡ªðŸ‡¸', count: 0 }
} : {};

// Count guests per show/language only if showing language filter
if (showLanguageFilter) {
  guestsWithEpisodes.forEach(guest => {
    guest.data.languages.forEach(lang => {
      if (showFilters[lang]) {
        showFilters[lang].count++;
      }
    });
  });
}

// Get unique countries from guests
const countryMap = new Map<string, number>();
guestsWithEpisodes.forEach(guest => {
  if (guest.data.linkedin_country) {
    countryMap.set(guest.data.linkedin_country, (countryMap.get(guest.data.linkedin_country) || 0) + 1);
  }
});
const countries = Array.from(countryMap.entries())
  .sort(([a], [b]) => a.localeCompare(b))
  .map(([country, count]) => ({ name: country, count }));

// Curated list of most relevant CRO/digital marketing skills
// Excluding CRO, A/B Testing, and Conversion Rate Optimization as they're implicit
const relevantSkills = [
  'Online Marketing',
  'E-commerce', 
  'Web Analytics',
  'Google Analytics',
  'SEO',
  'Digital Marketing',
  'User Experience',
  'Usability',
  'Analytics',
  'UX',
  'Marketing Strategy',
  'Performance Marketing',
  'Growth Hacking',
  'Digital Strategy',
  'Marketing Automation',
  'Email Marketing',
  'Content Marketing',
  'Social Media Marketing',
  'Pay Per Click',
  'PPC',
  'SEM',
  'Search Engine Marketing',
  'Data Analysis',
  'Customer Experience',
  'Lead Generation',
  'Marketing Research',
  'Brand Management',
  'Product Management',
  'Web Development',
  'JavaScript',
  'Marketing Analytics',
  'Customer Acquisition',
  'Retention Marketing',
  'Funnel Optimization',
  'Landing Page Optimization',
  'Mobile Marketing'
];

// Count guests for each relevant skill
const skillCounts: Record<string, number> = {};
relevantSkills.forEach(skill => {
  let count = 0;
  guestsWithEpisodes.forEach(guest => {
    if (guest.data.linkedin_skills) {
      const skillsText = typeof guest.data.linkedin_skills === 'string' 
        ? guest.data.linkedin_skills.toLowerCase()
        : '';
      if (skillsText.includes(skill.toLowerCase())) {
        count++;
      }
    }
  });
  if (count > 0) {
    skillCounts[skill] = count;
  }
});

// Sort skills by count and keep only those with guests
const skills = Object.entries(skillCounts)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 30) // Top 30 most popular relevant skills
  .map(([skill, count]) => ({ name: skill, count }));

// Prepare skill groups with counts
const skillGroups = SKILL_GROUPS.map(group => ({
  ...group,
  count: countGuestsInGroup(guestsWithEpisodes, group.id),
  display: getGroupDisplay(group.id)
})).filter(group => group.count > 0);

// Unique ID for this instance to avoid conflicts
const instanceId = Math.random().toString(36).substring(7);
---

<!-- Filter Controls -->
<section class="hidden lg:block mb-6 guest-filter-bar" data-filter-instance={instanceId}>
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-3">
    <!-- Responsive Layout with Flex Wrap -->
    <div class="flex flex-wrap items-center gap-4">
      <!-- Filter Label & Clear Button -->
      <div class="flex items-center gap-4 flex-shrink-0">
        <span class="text-sm font-semibold text-gray-900 dark:text-white">Filter:</span>
        <button 
          id={`clearFilters-${instanceId}`}
          class="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors clear-filters-btn"
        >
          Clear All
        </button>
      </div>

      {showLanguageFilter && (
        <!-- Show Pills -->
        <div class="flex items-center gap-3 flex-shrink-0">
          <span class="text-xs text-gray-600 dark:text-gray-400 font-medium">Shows:</span>
          <div class="flex flex-wrap gap-1.5">
            {Object.entries(showFilters).map(([lang, info]) => (
              <label class="inline-flex items-center cursor-pointer">
                <input 
                  type="checkbox" 
                  name={`show-${instanceId}`}
                  value={lang}
                  class="hidden peer show-checkbox"
                  checked
                  data-filter-type="language"
                />
                <div class="flex items-center gap-1.5 px-2.5 py-1.5 text-xs rounded-full border border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50 text-gray-500 dark:text-gray-400 transition-all
                  peer-checked:bg-primary-100 peer-checked:border-primary-500 peer-checked:text-primary-700 
                  dark:peer-checked:bg-primary-900/30 dark:peer-checked:border-primary-400 dark:peer-checked:text-primary-300
                  hover:border-primary-300 dark:hover:border-primary-500">
                  <span class="text-sm">{info.flag}</span>
                  <span class="font-medium">{info.name}</span>
                  <span class="opacity-70">({info.count})</span>
                </div>
              </label>
            ))}
          </div>
        </div>
      )}

      <!-- Compact Dropdowns -->
      <div class="flex gap-3 flex-grow lg:flex-grow-0 relative">
        <div class="flex items-center gap-2">
          <span class="text-xs text-gray-600 dark:text-gray-400 font-medium whitespace-nowrap">Guest location:</span>
          <select 
            id={`countryFilter-${instanceId}`}
            class="min-h-[48px] px-3 py-2 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-sm focus:ring-primary-500 focus:border-primary-500 country-filter touch-target"
            data-filter-type="country"
            aria-label="Filter by guest country"
            aria-describedby={`countryFilterDesc-${instanceId}`}
          >
            <option value="">All Countries</option>
            {countries.map(country => (
              <option value={country.name}>{country.name} ({country.count})</option>
            ))}
          </select>
        </div>

        <div class="flex items-center gap-2">
          <span class="text-xs text-gray-600 dark:text-gray-400 font-medium whitespace-nowrap">Expertise:</span>
          
          <select 
            id={`expertiseFilter-${instanceId}`}
            class="min-h-[48px] px-3 py-2 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-sm focus:ring-primary-500 focus:border-primary-500 expertise-filter touch-target"
            data-filter-type="expertise"
            aria-label="Filter guests by expertise"
            aria-describedby={`expertiseFilterDesc-${instanceId}`}
          >
            <option value="">All Expertise</option>
            {skillGroups.map(group => (
              <option value={`group:${group.id}`} data-group-id={group.id}>
                {group.display} ({group.count} guests)
              </option>
            ))}
          </select>
        </div>

        <!-- Freelancer Toggle -->
        <div class="flex items-center gap-2">
          <label class="inline-flex items-center cursor-pointer touch-target">
            <input 
              type="checkbox" 
              id={`freelancerFilter-${instanceId}`}
              class="hidden peer freelancer-checkbox"
              data-filter-type="freelancer"
            />
            <div class="flex items-center gap-2 px-3 py-2 text-sm rounded-md border border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50 text-gray-500 dark:text-gray-400 transition-all
              peer-checked:bg-primary-100 peer-checked:border-primary-500 peer-checked:text-primary-700 
              dark:peer-checked:bg-primary-900/30 dark:peer-checked:border-primary-400 dark:peer-checked:text-primary-300
              hover:border-primary-300 dark:hover:border-primary-500">
              <span class="font-medium">Freelancers</span>
              <span class="opacity-70">({freelancerCount})</span>
            </div>
          </label>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden descriptive text for screen readers -->
  <div class="sr-only">
    <div id={`countryFilterDesc-${instanceId}`}>
      Filter guests by their country/location. Select a country to show only guests from that location.
    </div>
    <div id={`expertiseFilterDesc-${instanceId}`}>
      Filter guests by their area of expertise. Select an expertise category to show only guests with those skills.
    </div>
  </div>
</section>

<script>
import { skillMatchesGroup, getGroupSkills, SKILL_GROUPS } from '../utils/skillGroups'

function initializeGuestFilters() {
  // Initialize all filter bars on the page
  document.querySelectorAll('.guest-filter-bar').forEach(filterBar => {
    const instanceId = filterBar.getAttribute('data-filter-instance')
    if (!instanceId) {return}

    const showCheckboxes = filterBar.querySelectorAll('.show-checkbox')
    const countryFilter = filterBar.querySelector('.country-filter') as HTMLSelectElement
    const expertiseFilter = filterBar.querySelector('.expertise-filter') as HTMLSelectElement
    const freelancerCheckbox = filterBar.querySelector('.freelancer-checkbox') as HTMLInputElement
    const clearButton = filterBar.querySelector('.clear-filters-btn')

    // Global elements to filter
    const resultsInfo = document.getElementById('resultsInfo')
    const guestsGrid = document.getElementById('guestsGrid')
    const noShowsMessage = document.getElementById('noShowsMessage')
    const noResultsMessage = document.getElementById('noResultsMessage')


    function filterGuests() {
      // Get selected languages (if language filter is shown)
      const selectedShows = showCheckboxes.length > 0
        ? Array.from(showCheckboxes)
          .filter((cb): cb is HTMLInputElement => cb instanceof HTMLInputElement && cb.checked)
          .map((cb) => cb.value)
        : null

      const selectedCountry = countryFilter?.value || ''
      const selectedExpertise = expertiseFilter?.value || ''
      const freelancerOnly = freelancerCheckbox?.checked || false

      const guestCards = guestsGrid?.querySelectorAll('.guest-card') || []
      let visibleCount = 0

      // Check if no shows are selected (only for international page)
      if (selectedShows !== null && selectedShows.length === 0) {
        guestCards.forEach((card) => {
          if (card instanceof HTMLElement) {
            card.style.display = 'none'
          }
        })
        if (guestsGrid) {guestsGrid.style.display = 'none'}
        if (noShowsMessage) {noShowsMessage.classList.remove('hidden')}
        if (noResultsMessage) {noResultsMessage.classList.add('hidden')}
        if (resultsInfo) {resultsInfo.textContent = 'No filters selected'}
        return
      }

      // Shows are selected or no language filter
      if (noShowsMessage) {noShowsMessage.classList.add('hidden')}

      // Apply filters
      guestCards.forEach((card) => {
        if (!(card instanceof HTMLElement)) {return}

        const languages = JSON.parse(card.getAttribute('data-languages') || '[]')
        const country = card.getAttribute('data-country') || ''
        const skills = card.getAttribute('data-skills') || ''
        const isFreelancer = card.getAttribute('data-freelancer') === 'true'

        // Language filter (only if showing language checkboxes)
        const showMatch = selectedShows === null ||
            languages.some((lang: string) => selectedShows.includes(lang))

        // Country filter
        const countryMatch = !selectedCountry || country === selectedCountry

        // Expertise filter
        let expertiseMatch = false
        if (!selectedExpertise) {
          expertiseMatch = true
        } else if (selectedExpertise.startsWith('group:')) {
          // Group-based filtering
          const groupId = selectedExpertise.substring(6) // Remove 'group:' prefix
          expertiseMatch = skillMatchesGroup(skills, groupId)
        } else {
          // Individual skill filtering
          expertiseMatch = skills.toLowerCase().includes(selectedExpertise.toLowerCase())
        }

        // Freelancer filter
        const freelancerMatch = !freelancerOnly || isFreelancer

        const shouldShow = showMatch && countryMatch && expertiseMatch && freelancerMatch

        card.style.display = shouldShow ? '' : 'none'
        if (shouldShow) {visibleCount++}
      })

      // Update UI based on results
      if (visibleCount === 0) {
        if (guestsGrid) {guestsGrid.style.display = 'none'}
        if (noResultsMessage) {noResultsMessage.classList.remove('hidden')}
      } else {
        if (guestsGrid) {guestsGrid.style.display = ''}
        if (noResultsMessage) {noResultsMessage.classList.add('hidden')}
      }

      // Update results info
      if (resultsInfo) {
        const filterText: string[] = []

        if (selectedShows && selectedShows.length > 0 && selectedShows.length < 4) {
          const showNames = selectedShows.map(lang => {
            const checkbox = filterBar.querySelector(`input[value="${lang}"]`)
            const label = checkbox?.parentElement
            return label?.querySelector('span:nth-child(2)')?.textContent || lang
          })
          filterText.push(showNames.join(', '))
        }

        if (selectedCountry) {filterText.push(selectedCountry)}
        if (selectedExpertise) {
          if (selectedExpertise.startsWith('group:')) {
            // Find the group name for display
            const groupId = selectedExpertise.substring(6)
            const groupOption = filterBar.querySelector(`option[value="${selectedExpertise}"]`) as HTMLOptionElement
            const groupName = groupOption?.textContent?.split(' (')[0] || selectedExpertise
            filterText.push(groupName)
          } else {
            filterText.push(selectedExpertise)
          }
        }
        if (freelancerOnly) {filterText.push('Freelancers')}

        const filterDescription = filterText.length > 0
          ? ` (${filterText.join(', ')})`
          : ''

        resultsInfo.textContent = visibleCount === 0
          ? 'No matching experts found'
          : `Showing ${visibleCount} experts${filterDescription}`
      }
    }

    function clearFilters() {
      showCheckboxes.forEach((cb) => {
        if (cb instanceof HTMLInputElement) {
          cb.checked = true
        }
      })
      if (countryFilter) {countryFilter.value = ''}
      if (expertiseFilter) {expertiseFilter.value = ''}
      if (freelancerCheckbox) {freelancerCheckbox.checked = false}
      filterGuests()
    }

    // Attach event listeners
    showCheckboxes.forEach(cb => cb.addEventListener('change', filterGuests))
    countryFilter?.addEventListener('change', filterGuests)
    expertiseFilter?.addEventListener('change', filterGuests)
    freelancerCheckbox?.addEventListener('change', filterGuests)
    clearButton?.addEventListener('click', clearFilters)

    // Read URL parameters on initialization
    const urlParams = new URLSearchParams(window.location.search)
    const expertiseParam = urlParams.get('expertise')

    if (expertiseParam && expertiseFilter) {
      // Check if it's already a group parameter
      if (expertiseParam.startsWith('group:')) {
        expertiseFilter.value = expertiseParam
      } else {
        // Map individual skill to its group
        for (const group of SKILL_GROUPS) {
          if (group.skills.some(skill => skill.toLowerCase() === expertiseParam.toLowerCase())) {
            expertiseFilter.value = `group:${group.id}`
            break
          }
        }
      }
    }

    // Initialize
    filterGuests()
  })
}

// Initialize on DOMContentLoaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeGuestFilters)
} else {
  initializeGuestFilters()
}

// Re-initialize on Astro page navigation
document.addEventListener('astro:page-load', initializeGuestFilters)
</script>