---
import type { CollectionEntry } from 'astro:content';
import type { Language } from '../types';

interface Props {
  guests: CollectionEntry<'guests'>[];
  showLanguageFilter?: boolean;
  language?: Language;
}

const { guests, showLanguageFilter = true, language } = Astro.props;

// Filter out guests with zero episodes
const guestsWithEpisodes = guests.filter(guest => 
  guest.data.episodes && guest.data.episodes.length > 0
);

// Prepare filter data
const showFilters = showLanguageFilter ? {
  en: { name: 'English', flag: 'ðŸ‡¬ðŸ‡§', count: 0 },
  nl: { name: 'Dutch', flag: 'ðŸ‡³ðŸ‡±', count: 0 },
  de: { name: 'German', flag: 'ðŸ‡©ðŸ‡ª', count: 0 },
  es: { name: 'Spanish', flag: 'ðŸ‡ªðŸ‡¸', count: 0 }
} : {};

// Count guests per show/language only if showing language filter
if (showLanguageFilter) {
  guestsWithEpisodes.forEach(guest => {
    guest.data.languages.forEach(lang => {
      if (showFilters[lang]) {
        showFilters[lang].count++;
      }
    });
  });
}

// Get unique countries from guests
const countryMap = new Map<string, number>();
guestsWithEpisodes.forEach(guest => {
  if (guest.data.linkedin_country) {
    countryMap.set(guest.data.linkedin_country, (countryMap.get(guest.data.linkedin_country) || 0) + 1);
  }
});
const countries = Array.from(countryMap.entries())
  .sort(([a], [b]) => a.localeCompare(b))
  .map(([country, count]) => ({ name: country, count }));

// Curated list of most relevant CRO/digital marketing skills
const relevantSkills = [
  'Online Marketing',
  'E-commerce', 
  'Web Analytics',
  'Google Analytics',
  'Conversion Optimization',
  'SEO',
  'Digital Marketing',
  'User Experience',
  'Usability',
  'Analytics',
  'A/B Testing',
  'UX',
  'Marketing Strategy',
  'Performance Marketing',
  'Growth Hacking',
  'CRO',
  'Conversion Rate Optimization',
  'Digital Strategy',
  'Marketing Automation',
  'Email Marketing',
  'Content Marketing',
  'Social Media Marketing',
  'Pay Per Click',
  'PPC',
  'SEM',
  'Search Engine Marketing',
  'Data Analysis',
  'Customer Experience',
  'Lead Generation',
  'Marketing Research',
  'Brand Management',
  'Product Management',
  'Web Development',
  'JavaScript',
  'Marketing Analytics',
  'Customer Acquisition',
  'Retention Marketing',
  'Funnel Optimization',
  'Landing Page Optimization',
  'Mobile Marketing'
];

// Count guests for each relevant skill
const skillCounts: Record<string, number> = {};
relevantSkills.forEach(skill => {
  let count = 0;
  guestsWithEpisodes.forEach(guest => {
    if (guest.data.linkedin_skills) {
      const skillsText = typeof guest.data.linkedin_skills === 'string' 
        ? guest.data.linkedin_skills.toLowerCase()
        : '';
      if (skillsText.includes(skill.toLowerCase())) {
        count++;
      }
    }
  });
  if (count > 0) {
    skillCounts[skill] = count;
  }
});

// Sort skills by count and keep only those with guests
const skills = Object.entries(skillCounts)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 30) // Top 30 most popular relevant skills
  .map(([skill, count]) => ({ name: skill, count }));

// Unique ID for this instance to avoid conflicts
const instanceId = Math.random().toString(36).substring(7);
---

<!-- Filter Controls -->
<section class="mb-6 guest-filter-bar" data-filter-instance={instanceId}>
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-3">
    <!-- Single Row Layout -->
    <div class="flex flex-col lg:flex-row lg:items-center gap-4">
      <!-- Filter Label & Clear Button -->
      <div class="flex items-center justify-between lg:justify-start lg:gap-4 flex-shrink-0">
        <h2 class="text-sm font-semibold text-gray-900 dark:text-white">Filter:</h2>
        <button 
          id={`clearFilters-${instanceId}`}
          class="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors lg:order-last clear-filters-btn"
        >
          Clear All
        </button>
      </div>

      {showLanguageFilter && (
        <!-- Show Pills -->
        <div class="flex flex-wrap gap-1.5 flex-shrink-0">
          {Object.entries(showFilters).map(([lang, info]) => (
            <label class="inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                name={`show-${instanceId}`}
                value={lang}
                class="hidden peer show-checkbox"
                checked
                data-filter-type="language"
              />
              <div class="flex items-center gap-1.5 px-2.5 py-1.5 text-xs rounded-full border border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50 text-gray-500 dark:text-gray-400 transition-all
                peer-checked:bg-primary-100 peer-checked:border-primary-500 peer-checked:text-primary-700 
                dark:peer-checked:bg-primary-900/30 dark:peer-checked:border-primary-400 dark:peer-checked:text-primary-300
                hover:border-primary-300 dark:hover:border-primary-500">
                <span class="text-sm">{info.flag}</span>
                <span class="font-medium">{info.name}</span>
                <span class="opacity-70">({info.count})</span>
              </div>
            </label>
          ))}
        </div>
      )}

      <!-- Compact Dropdowns -->
      <div class="flex gap-3 flex-grow lg:flex-grow-0 lg:ml-auto">
        <select 
          id={`countryFilter-${instanceId}`}
          class="flex-1 lg:w-40 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-xs focus:ring-primary-500 focus:border-primary-500 country-filter"
          data-filter-type="country"
        >
          <option value="">All Countries</option>
          {countries.map(country => (
            <option value={country.name}>{country.name} ({country.count})</option>
          ))}
        </select>

        <select 
          id={`skillFilter-${instanceId}`}
          class="flex-1 lg:w-48 rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white text-xs focus:ring-primary-500 focus:border-primary-500 skill-filter"
          data-filter-type="skill"
        >
          <option value="">All Expertise</option>
          {skills.map(skill => (
            <option value={skill.name}>{skill.name} ({skill.count})</option>
          ))}
        </select>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize all filter bars on the page
    document.querySelectorAll('.guest-filter-bar').forEach(filterBar => {
      const instanceId = filterBar.getAttribute('data-filter-instance');
      if (!instanceId) return;

      const showCheckboxes = filterBar.querySelectorAll('.show-checkbox');
      const countryFilter = filterBar.querySelector('.country-filter') as HTMLSelectElement;
      const skillFilter = filterBar.querySelector('.skill-filter') as HTMLSelectElement;
      const clearButton = filterBar.querySelector('.clear-filters-btn');
      
      // Global elements to filter
      const resultsInfo = document.getElementById('resultsInfo');
      const guestsGrid = document.getElementById('guestsGrid');
      const noShowsMessage = document.getElementById('noShowsMessage');
      const noResultsMessage = document.getElementById('noResultsMessage');

      function filterGuests() {
        // Get selected languages (if language filter is shown)
        const selectedShows = showCheckboxes.length > 0
          ? Array.from(showCheckboxes)
              .filter((cb): cb is HTMLInputElement => cb instanceof HTMLInputElement && cb.checked)
              .map((cb) => cb.value)
          : null;
        
        const selectedCountry = countryFilter?.value || '';
        const selectedSkill = skillFilter?.value || '';
        
        const guestCards = guestsGrid?.querySelectorAll('.guest-card') || [];
        let visibleCount = 0;
        
        // Check if no shows are selected (only for international page)
        if (selectedShows !== null && selectedShows.length === 0) {
          guestCards.forEach((card) => {
            if (card instanceof HTMLElement) {
              card.style.display = 'none';
            }
          });
          if (guestsGrid) guestsGrid.style.display = 'none';
          if (noShowsMessage) noShowsMessage.classList.remove('hidden');
          if (noResultsMessage) noResultsMessage.classList.add('hidden');
          if (resultsInfo) resultsInfo.textContent = 'No filters selected';
          return;
        }
        
        // Shows are selected or no language filter
        if (noShowsMessage) noShowsMessage.classList.add('hidden');
        
        // Apply filters
        guestCards.forEach((card) => {
          if (!(card instanceof HTMLElement)) return;
          
          const languages = JSON.parse(card.getAttribute('data-languages') || '[]');
          const country = card.getAttribute('data-country') || '';
          const skills = card.getAttribute('data-skills') || '';
          
          // Language filter (only if showing language checkboxes)
          const showMatch = selectedShows === null || 
            languages.some((lang: string) => selectedShows.includes(lang));
          
          // Country filter
          const countryMatch = !selectedCountry || country === selectedCountry;
          
          // Skill filter
          const skillMatch = !selectedSkill || 
            skills.toLowerCase().includes(selectedSkill.toLowerCase());
          
          const shouldShow = showMatch && countryMatch && skillMatch;
          
          card.style.display = shouldShow ? '' : 'none';
          if (shouldShow) visibleCount++;
        });
        
        // Update UI based on results
        if (visibleCount === 0) {
          if (guestsGrid) guestsGrid.style.display = 'none';
          if (noResultsMessage) noResultsMessage.classList.remove('hidden');
        } else {
          if (guestsGrid) guestsGrid.style.display = '';
          if (noResultsMessage) noResultsMessage.classList.add('hidden');
        }
        
        // Update results info
        if (resultsInfo) {
          const filterText: string[] = [];
          
          if (selectedShows && selectedShows.length > 0 && selectedShows.length < 4) {
            const showNames = selectedShows.map(lang => {
              const checkbox = filterBar.querySelector(`input[value="${lang}"]`);
              const label = checkbox?.parentElement;
              return label?.querySelector('span:nth-child(2)')?.textContent || lang;
            });
            filterText.push(showNames.join(', '));
          }
          
          if (selectedCountry) filterText.push(selectedCountry);
          if (selectedSkill) filterText.push(selectedSkill);
          
          const filterDescription = filterText.length > 0 
            ? ` (${filterText.join(', ')})` 
            : '';
          
          resultsInfo.textContent = visibleCount === 0 
            ? 'No matching experts found'
            : `Showing ${visibleCount} experts${filterDescription}`;
        }
      }

      function clearFilters() {
        showCheckboxes.forEach((cb) => {
          if (cb instanceof HTMLInputElement) {
            cb.checked = true;
          }
        });
        if (countryFilter) countryFilter.value = '';
        if (skillFilter) skillFilter.value = '';
        filterGuests();
      }

      // Attach event listeners
      showCheckboxes.forEach(cb => cb.addEventListener('change', filterGuests));
      countryFilter?.addEventListener('change', filterGuests);
      skillFilter?.addEventListener('change', filterGuests);
      clearButton?.addEventListener('click', clearFilters);
      
      // Initialize
      filterGuests();
    });
  });
</script>