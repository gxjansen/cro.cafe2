---
import ResponsiveImage from './ResponsiveImage.astro';

export interface Props {
  imageUrl?: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  episodeTitle?: string;
  episodeNumber?: number;
  season?: number;
  guestName?: string;
  aspectRatio?: 'square' | '16:9' | '21:9' | '2:1';
}

const { 
  imageUrl, 
  alt, 
  class: className = '',
  width = 400,
  height = 400,
  episodeTitle,
  episodeNumber,
  season,
  guestName,
  aspectRatio = 'square'
} = Astro.props;

// Calculate height based on aspect ratio
const calculateHeight = () => {
  switch (aspectRatio) {
    case 'square':
      return width;
    case '16:9':
      return Math.round(width * 9 / 16);
    case '21:9':
      return Math.round(width * 9 / 21);
    case '2:1':
      return Math.round(width / 2);
    default:
      return width;
  }
};

const computedHeight = calculateHeight();

// Fallback gradient background for episodes without images
const fallbackGradient = `bg-gradient-to-br from-primary-400 to-accent-500`;

// Build comprehensive alt text with context
const buildAltText = () => {
  const parts = [];
  
  // Use provided alt text as base
  if (alt) {
    parts.push(alt);
  } else {
    parts.push('Episode cover art');
  }
  
  // Add episode details if provided
  if (season && episodeNumber) {
    parts.push(`Season ${season}, Episode ${episodeNumber}`);
  }
  
  // Add guest name if provided
  if (guestName) {
    parts.push(`featuring ${guestName}`);
  }
  
  // Add podcast branding if not already included
  if (!alt?.includes('CRO.CAFE')) {
    parts.push('CRO.CAFE podcast');
  }
  
  return parts.join(' - ');
};

const standardizedAlt = buildAltText();
---

{imageUrl ? (
  <ResponsiveImage 
    src={imageUrl} 
    alt={standardizedAlt}
    width={width}
    height={computedHeight}
    class={className}
    loading="lazy"
    formats={['avif', 'webp', 'jpeg']}
    quality={85}
    widths={[240, 320, 480, 640, 800, 1024]}
    sizes="(max-width: 320px) 240px, (max-width: 640px) 320px, (max-width: 1024px) 480px, 640px"
    aspectRatio={computedHeight / width}
    onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
  />
  <div class={`hidden items-center justify-center ${fallbackGradient} ${className}`}>
    <svg class="w-1/3 h-1/3 text-white/50" fill="currentColor" viewBox="0 0 24 24" role="presentation" aria-hidden="true">
      <path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z"/>
    </svg>
  </div>
) : (
  <div class={`flex items-center justify-center ${fallbackGradient} ${className}`}>
    <svg class="w-1/3 h-1/3 text-white/50" fill="currentColor" viewBox="0 0 24 24" role="presentation" aria-hidden="true">
      <path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z"/>
    </svg>
  </div>
)}

<style>
  /* Ensure images maintain aspect ratio */
  img {
    object-fit: cover;
  }
</style>