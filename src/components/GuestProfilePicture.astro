---
import { Image } from 'astro:assets';
import { getGuestProfilePicture } from '../utils/content';

export interface Props {
  guest: any; // Guest data with potential LinkedIn data
  size?: 'sm' | 'md' | 'lg' | 'xl';
  loading?: 'lazy' | 'eager';
  class?: string;
  grayscale?: boolean;
}

const { 
  guest,
  size = 'md',
  loading = 'lazy',
  class: className = '',
  grayscale = false
} = Astro.props;

// Get the profile picture URL with fallback chain
const profilePictureUrl = getGuestProfilePicture(guest);

// Extract guest name and company for alt text
const guestName = guest?.data?.name || guest?.name || 'Guest';
const guestCompany = guest?.data?.company || guest?.company || '';
const guestRole = guest?.data?.role || guest?.role || '';

// Generate initials for fallback
const getInitials = (name: string): string => {
  if (!name) return '?';
  const parts = name.trim().split(' ');
  if (parts.length === 1) return parts[0].charAt(0).toUpperCase();
  return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();
};

const guestInitials = getInitials(guestName);

// Size mappings
const sizeClasses = {
  sm: 'w-16 h-16',
  md: 'w-24 h-24',
  lg: 'w-32 h-32',
  xl: 'w-48 h-48'
};

const imageSizes = {
  sm: 64,
  md: 96,
  lg: 128,
  xl: 192
};

// Text size classes for initials based on component size
const textSizeClasses = {
  sm: 'text-lg',
  md: 'text-2xl',
  lg: 'text-3xl',
  xl: 'text-5xl'
};

// Create comprehensive alt text
const altText = [
  guestName,
  guestRole && `${guestRole}`,
  guestCompany && `at ${guestCompany}`,
  '- CRO.CAFE podcast guest'
].filter(Boolean).join(' ');

// Fallback gradient for placeholder using new Tailwind config
const fallbackGradient = 'bg-gradient-teal dark:bg-gradient-teal-dark';

// Generate a unique ID for this instance
const instanceId = `guest-picture-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`relative rounded-full overflow-hidden transition-transform duration-300 hover:scale-105 ${sizeClasses[size]} ${className}`}
  data-guest-picture={instanceId}
>
  <!-- Loading placeholder with initials -->
  <div 
    class={`absolute inset-0 ${fallbackGradient} animate-pulse transition-opacity duration-500`}
    data-placeholder={instanceId}
  >
    <div class="flex items-center justify-center w-full h-full">
      <span class={`text-white font-semibold ${textSizeClasses[size]}`}>
        {guestInitials}
      </span>
    </div>
  </div>

  <!-- Main image -->
  {profilePictureUrl && profilePictureUrl !== '/images/default-guest.jpg' ? (
    <img 
      src={profilePictureUrl}
      alt={altText}
      width={imageSizes[size]}
      height={imageSizes[size]}
      class={`absolute inset-0 w-full h-full object-cover opacity-0 transition-opacity duration-500 hover:brightness-110 ${grayscale ? 'grayscale' : ''}`}
      loading={loading}
      data-image={instanceId}
      onload={`
        const img = event.target;
        const placeholder = document.querySelector('[data-placeholder="${instanceId}"]');
        if (placeholder) {
          img.classList.remove('opacity-0');
          placeholder.classList.add('opacity-0');
          setTimeout(() => placeholder.remove(), 500);
        }
      `}
      onerror={`
        const img = event.target;
        const placeholder = document.querySelector('[data-placeholder="${instanceId}"]');
        
        // Try alternative extension before giving up
        if (img.src.endsWith('.jpeg') && !img.dataset.triedJpg) {
          img.dataset.triedJpg = 'true';
          img.src = img.src.replace('.jpeg', '.jpg');
          console.log('Trying .jpg extension:', img.src);
        } else if (img.src.endsWith('.jpg') && !img.dataset.triedJpeg) {
          img.dataset.triedJpeg = 'true';
          img.src = img.src.replace('.jpg', '.jpeg');
          console.log('Trying .jpeg extension:', img.src);
        } else {
          // Both extensions failed - show initials placeholder
          console.log('All image extensions failed, showing initials for:', img.src);
          img.remove();
          if (placeholder) {
            placeholder.classList.remove('animate-pulse');
          }
        }
      `}
    />
  ) : (
    <!-- Default placeholder when no image available -->
    <div class={`flex items-center justify-center w-full h-full ${fallbackGradient}`}>
      <span class={`text-white font-semibold ${textSizeClasses[size]}`}>
        {guestInitials}
      </span>
    </div>
  )}
</div>

<style>
  /* Accessibility: High contrast mode support */
  @media (prefers-contrast: high) {
    [data-guest-picture] img {
      filter: grayscale(100%) contrast(1.2);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    [data-guest-picture] * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

<script>
  // Enhanced error handling and performance monitoring
  document.addEventListener('DOMContentLoaded', () => {
    // Monitor image loading performance
    const profilePictures = document.querySelectorAll('.guest-profile-picture img')
  
  profilePictures.forEach(img => {
      const startTime = performance.now()
  
      // Track loading performance
      img.addEventListener('load', () => {
        const loadTime = performance.now() - startTime
        if (loadTime > 3000) {
          console.warn(`Slow profile picture load: ${loadTime}ms for ${img.src}`)
        }
      })

      // Implement retry logic for failed loads
      let retryCount = 0
      const maxRetries = 1 // Reduced since we're trying different extensions
  
      img.addEventListener('error', function handleError() {
        // Skip retry if we're already trying different extensions
        if (img.dataset.triedJpg || img.dataset.triedJpeg) {
          return
        }
  
        if (retryCount < maxRetries && !img.src.includes('default-guest')) {
          retryCount++
          console.log(`Retrying profile picture load (${retryCount}/${maxRetries}): ${img.src}`)
  
          // Add a small delay before retry
          setTimeout(() => {
            img.src = `${img.src  }?retry=${  retryCount}`
          }, 1000 * retryCount)
        }
      })
  })

  // Intersection Observer for lazy loading optimization
  if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target.querySelector('img[loading="lazy"]')
            if (img && img.dataset.src) {
              img.src = img.dataset.src
              observer.unobserve(entry.target)
            }
          }
        })
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      })

      document.querySelectorAll('.guest-profile-picture').forEach(picture => {
        imageObserver.observe(picture)
      })
  }
  })
</script>