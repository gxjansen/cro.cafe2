---
import { Image } from 'astro:assets';
import { getGuestProfilePicture } from '../utils/content';

export interface Props {
  guest: any; // Guest data with potential LinkedIn data
  size?: 'sm' | 'md' | 'lg' | 'xl';
  loading?: 'lazy' | 'eager';
  class?: string;
  showLinkedInBadge?: boolean;
}

const { 
  guest,
  size = 'md',
  loading = 'lazy',
  class: className = '',
  showLinkedInBadge = false
} = Astro.props;

// Get the profile picture URL with fallback chain
const profilePictureUrl = getGuestProfilePicture(guest);

// Check if this is a LinkedIn profile picture (either local or remote)
const hasLinkedInData = Boolean(guest?.data?.linkedin_profile_pic || guest?.linkedInData?.profilePicUrl);
const isLinkedInPicture = hasLinkedInData;

// Get LinkedIn fallback URL for error handling
const linkedInFallbackUrl = guest?.data?.linkedin_profile_pic || guest?.linkedInData?.profilePicUrl;

// Size mappings
const sizeClasses = {
  sm: 'w-16 h-16',
  md: 'w-24 h-24',
  lg: 'w-32 h-32',
  xl: 'w-48 h-48'
};

const imageSizes = {
  sm: 64,
  md: 96,
  lg: 128,
  xl: 192
};

// Extract guest name and company for alt text
const guestName = guest?.data?.name || guest?.name || 'Guest';
const guestCompany = guest?.data?.company || guest?.company || '';
const guestRole = guest?.data?.role || guest?.role || '';

// Create comprehensive alt text
const altText = [
  guestName,
  guestRole && `${guestRole}`,
  guestCompany && `at ${guestCompany}`,
  '- CRO.CAFE podcast guest'
].filter(Boolean).join(' ');

// Fallback gradient for placeholder
const fallbackGradient = 'bg-gradient-to-br from-primary-400 to-accent-500';

// Generate a unique ID for this instance
const instanceId = `guest-picture-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`guest-profile-picture relative rounded-full overflow-hidden ${sizeClasses[size]} ${className}`}
  data-guest-picture={instanceId}
>
  <!-- Loading placeholder with blur effect -->
  <div 
    class={`absolute inset-0 ${fallbackGradient} animate-pulse blur-sm transition-opacity duration-500`}
    data-placeholder={instanceId}
  >
    <div class="flex items-center justify-center w-full h-full">
      <svg 
        class="w-1/3 h-1/3 text-white/50" 
        fill="currentColor" 
        viewBox="0 0 24 24" 
        role="presentation" 
        aria-hidden="true"
      >
        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
      </svg>
    </div>
  </div>

  <!-- Main image -->
  {profilePictureUrl && profilePictureUrl !== '/images/default-guest.jpg' ? (
    <Image 
      src={profilePictureUrl}
      alt={altText}
      width={imageSizes[size]}
      height={imageSizes[size]}
      class="absolute inset-0 w-full h-full object-cover grayscale opacity-0 transition-opacity duration-500"
      loading={loading}
      format="webp"
      quality={85}
      data-image={instanceId}
      onload={`
        const img = event.target;
        const placeholder = document.querySelector('[data-placeholder="${instanceId}"]');
        if (placeholder) {
          img.classList.remove('opacity-0');
          placeholder.classList.add('opacity-0');
          setTimeout(() => placeholder.remove(), 500);
        }
      `}
      onerror={`
        const img = event.target;
        const placeholder = document.querySelector('[data-placeholder="${instanceId}"]');
        
        // Try LinkedIn fallback URL if available and this isn't already the fallback
        if ('${linkedInFallbackUrl}' && img.src !== '${linkedInFallbackUrl}' && !img.src.includes('default-guest')) {
          console.log('Local image failed, trying LinkedIn URL fallback');
          img.src = '${linkedInFallbackUrl}';
          return;
        }
        
        // If LinkedIn fallback also fails or isn't available, remove image and show placeholder
        img.remove();
        if (placeholder) {
          placeholder.classList.remove('blur-sm', 'animate-pulse');
        }
      `}
    />
  ) : (
    <!-- Default placeholder when no image available -->
    <div class={`flex items-center justify-center w-full h-full ${fallbackGradient}`}>
      <svg 
        class="w-1/3 h-1/3 text-white/50" 
        fill="currentColor" 
        viewBox="0 0 24 24" 
        role="presentation" 
        aria-hidden="true"
      >
        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
      </svg>
    </div>
  )}

  <!-- LinkedIn badge overlay -->
  {showLinkedInBadge && isLinkedInPicture && (
    <div 
      class="absolute bottom-0 right-0 bg-linkedin-500 text-white rounded-full p-1 shadow-lg transform translate-x-1/4 translate-y-1/4"
      title="LinkedIn profile picture"
    >
      <svg 
        class="w-3 h-3" 
        fill="currentColor" 
        viewBox="0 0 24 24"
        role="img"
        aria-label="LinkedIn"
      >
        <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
      </svg>
    </div>
  )}
</div>

<style>
  /* Ensure images maintain aspect ratio and cover the container */
  .guest-profile-picture img {
    object-fit: cover;
  }

  /* Dark mode adjustments */
  :global(.dark) .guest-profile-picture img {
    filter: grayscale(100%) brightness(0.9);
  }

  /* Hover effect for interactive contexts */
  .guest-profile-picture:hover img {
    filter: grayscale(50%);
    transform: scale(1.05);
    transition: all 0.3s ease;
  }

  /* Accessibility: High contrast mode support */
  @media (prefers-contrast: high) {
    .guest-profile-picture img {
      filter: grayscale(100%) contrast(1.2);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .guest-profile-picture * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* LinkedIn badge animation */
  .guest-profile-picture:hover [title="LinkedIn profile picture"] {
    transform: translate(20%, 20%) scale(1.1);
    transition: transform 0.2s ease;
  }
</style>

<script>
  // Enhanced error handling and performance monitoring
  document.addEventListener('DOMContentLoaded', () => {
    // Monitor image loading performance
    const profilePictures = document.querySelectorAll('.guest-profile-picture img');
    
    profilePictures.forEach(img => {
      const startTime = performance.now();
      
      // Track loading performance
      img.addEventListener('load', () => {
        const loadTime = performance.now() - startTime;
        if (loadTime > 3000) {
          console.warn(`Slow profile picture load: ${loadTime}ms for ${img.src}`);
        }
      });

      // Implement retry logic for failed loads
      let retryCount = 0;
      const maxRetries = 2;
      
      img.addEventListener('error', function handleError() {
        if (retryCount < maxRetries && !img.src.includes('default-guest')) {
          retryCount++;
          console.log(`Retrying profile picture load (${retryCount}/${maxRetries}): ${img.src}`);
          
          // Add a small delay before retry
          setTimeout(() => {
            img.src = img.src + '?retry=' + retryCount;
          }, 1000 * retryCount);
        }
      });
    });

    // Intersection Observer for lazy loading optimization
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target.querySelector('img[loading="lazy"]');
            if (img && img.dataset.src) {
              img.src = img.dataset.src;
              observer.unobserve(entry.target);
            }
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });

      document.querySelectorAll('.guest-profile-picture').forEach(picture => {
        imageObserver.observe(picture);
      });
    }
  });
</script>