---
import type { Language } from '../types';
import { getLanguageCounts } from '../utils/content';

export interface Props {
  currentLanguage: Language;
  currentPath: string;
}

const { currentLanguage, currentPath } = Astro.props;

// Get counts for all languages
const counts = await getLanguageCounts();

const languages = [
  { 
    code: 'global' as 'global', 
    name: 'All Languages', 
    nativeName: 'All Languages', 
    flag: '🌍',
    episodes: counts.global.episodes,
    guests: counts.global.guests
  },
  { 
    code: 'en' as Language, 
    name: 'English', 
    nativeName: 'English', 
    flag: '🇺🇸',
    episodes: counts.en.episodes,
    guests: counts.en.guests
  },
  { 
    code: 'nl' as Language, 
    name: 'Dutch', 
    nativeName: 'Nederlands', 
    flag: '🇳🇱',
    episodes: counts.nl.episodes,
    guests: counts.nl.guests
  },
  { 
    code: 'de' as Language, 
    name: 'German', 
    nativeName: 'Deutsch', 
    flag: '🇩🇪',
    episodes: counts.de.episodes,
    guests: counts.de.guests
  },
  { 
    code: 'es' as Language, 
    name: 'Spanish', 
    nativeName: 'Español', 
    flag: '🇪🇸',
    episodes: counts.es.episodes,
    guests: counts.es.guests
  },
];

// Check if we're on a global/all-languages page (root page, /all/ pages, and /subscribe)
const isGlobal = currentPath === '/' || currentPath.startsWith('/all/') || currentPath === '/subscribe' || currentPath === '/subscribe/';
const currentLang = isGlobal ? languages[0] : languages.find(lang => lang.code === currentLanguage) || languages[1];

// Generate language URLs - try to preserve current path structure
const getLanguageUrl = (langCode: Language | 'global') => {
  // Remove current language prefix from path to get the base path
  let basePath = currentPath;
  
  // Remove language prefix if it exists
  const langPrefixes = ['/en', '/nl', '/de', '/es'];
  for (const prefix of langPrefixes) {
    if (basePath.startsWith(prefix + '/') || basePath === prefix) {
      basePath = basePath.substring(prefix.length);
      break;
    }
  }
  
  // Ensure basePath starts with /
  if (!basePath.startsWith('/')) {
    basePath = '/' + basePath;
  }
  
  // For global option
  if (langCode === 'global') {
    // If on episodes or guests pages, go to all-languages version
    if (basePath.includes('/episodes')) {
      return '/all/episodes/';
    }
    if (basePath.includes('/guests')) {
      return '/all/guests/';
    }
    if (basePath.includes('/subscribe')) {
      return '/subscribe/';
    }
    // Otherwise go to homepage
    return '/';
  }
  
  // Handle global pages - they don't have language versions
  if (basePath.includes('/hosts') || basePath.includes('/color-test')) {
    // Always return to the global (all languages) homepage when switching languages from a global page
    if (langCode === 'global') {
      return basePath; // Stay on the same page
    }
    // For language-specific selections from global pages, go to that language's homepage
    return langCode === 'en' ? '/en/' : `/${langCode}/`;
  }
  
  // Handle episode, guest, and subscribe pages (both detail and listing pages)
  if (basePath.includes('/episodes') || basePath.includes('/guests') || basePath.includes('/subscribe')) {
    // For detail pages, redirect to the listing page for that language
    if (langCode === 'en') {
      if (basePath.includes('/episodes')) return '/episodes/';
      if (basePath.includes('/guests')) return '/guests/';
      if (basePath.includes('/subscribe')) return '/en/subscribe/';
    }
    if (basePath.includes('/episodes')) return `/${langCode}/episodes/`;
    if (basePath.includes('/guests')) return `/${langCode}/guests/`;
    if (basePath.includes('/subscribe')) return `/${langCode}/subscribe/`;
  }
  
  // For English, go to the dedicated English homepage or pages
  if (langCode === 'en') {
    return basePath === '/' ? '/en/' : basePath;
  }
  
  // For other languages, add the language prefix
  return `/${langCode}${basePath === '/' ? '/' : basePath}`;
};
---

<div class="relative inline-block text-left">
  <button
    id="language-switcher-button"
    type="button"
    class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-primary-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-600 dark:focus:ring-primary-300 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
    aria-expanded="false"
    aria-haspopup="true"
    aria-label={`Choose language. Current: ${currentLang.nativeName}`}
  >
    <span class="mr-2" aria-hidden="true">{currentLang.flag}</span>
    <span class="hidden sm:inline">{currentLang.nativeName}</span>
    <span class="sm:hidden">{currentLang.code.toUpperCase()}</span>
    <svg class="ml-2 -mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <div
    id="language-switcher-menu"
    class="hidden absolute right-0 z-50 mt-2 w-64 origin-top-right rounded-md bg-white dark:bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-switcher-button"
  >
    <div class="py-1" role="none">
      {languages.map((lang) => {
        const isCurrent = (lang.code === 'global' && isGlobal) || (lang.code === currentLanguage && !isGlobal);
        return (
          <a
            href={getLanguageUrl(lang.code)}
            class={`flex items-center px-4 py-2 text-sm transition-colors ${
              isCurrent
                ? 'bg-primary-50 dark:bg-primary-900/30 text-primary-700 dark:text-primary-200'
                : 'text-gray-700 dark:text-gray-200 hover:bg-primary-50 dark:hover:bg-gray-700'
            }`}
            role="menuitem"
            aria-current={isCurrent ? 'page' : undefined}
          >
            <span class="mr-3 text-lg" aria-hidden="true">{lang.flag}</span>
            <div class="flex-1">
              <div class="flex items-center justify-between">
                <span class="font-medium">{lang.nativeName}</span>
                {isCurrent && (
                  <svg class="ml-2 h-4 w-4 text-primary-600 dark:text-primary-300" fill="currentColor" viewBox="0 0 20 20" aria-label="Currently selected">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                  </svg>
                )}
              </div>
              <div class="text-xs text-gray-500 dark:text-gray-400 mt-0.5">
                {lang.episodes} episodes · {lang.guests} guests
              </div>
            </div>
          </a>
        );
      })}
    </div>
  </div>
</div>

<script>
  const languageSwitcherButton = document.getElementById('language-switcher-button');
  const languageSwitcherMenu = document.getElementById('language-switcher-menu');

  if (languageSwitcherButton && languageSwitcherMenu) {
    // Toggle dropdown
    languageSwitcherButton.addEventListener('click', (event) => {
      event.stopPropagation();
      const isHidden = languageSwitcherMenu.classList.contains('hidden');
      
      if (isHidden) {
        languageSwitcherMenu.classList.remove('hidden');
        languageSwitcherButton.setAttribute('aria-expanded', 'true');
      } else {
        languageSwitcherMenu.classList.add('hidden');
        languageSwitcherButton.setAttribute('aria-expanded', 'false');
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      const target = event.target as Element;
      if (!languageSwitcherButton.contains(target) && !languageSwitcherMenu.contains(target)) {
        languageSwitcherMenu.classList.add('hidden');
        languageSwitcherButton.setAttribute('aria-expanded', 'false');
      }
    });

    // Handle keyboard navigation
    languageSwitcherButton.addEventListener('keydown', (event) => {
      const isExpanded = languageSwitcherButton.getAttribute('aria-expanded') === 'true';
      
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        languageSwitcherButton.click();
      } else if (event.key === 'Escape' && isExpanded) {
        event.preventDefault();
        languageSwitcherMenu.classList.add('hidden');
        languageSwitcherButton.setAttribute('aria-expanded', 'false');
        languageSwitcherButton.focus();
      } else if (event.key === 'ArrowDown' && !isExpanded) {
        event.preventDefault();
        languageSwitcherButton.click();
        // Focus first menu item after opening
        setTimeout(() => {
          const firstLink = languageSwitcherMenu.querySelector('a[role="menuitem"]') as HTMLElement;
          firstLink?.focus();
        }, 50);
      }
    });
    
    // Add keyboard navigation within menu
    languageSwitcherMenu.addEventListener('keydown', (event) => {
      const menuItems = Array.from(languageSwitcherMenu.querySelectorAll('a[role="menuitem"]')) as HTMLElement[];
      const currentIndex = menuItems.findIndex(item => item === document.activeElement);
      
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        const nextIndex = (currentIndex + 1) % menuItems.length;
        menuItems[nextIndex]?.focus();
      } else if (event.key === 'ArrowUp') {
        event.preventDefault();
        const prevIndex = currentIndex === 0 ? menuItems.length - 1 : currentIndex - 1;
        menuItems[prevIndex]?.focus();
      } else if (event.key === 'Escape') {
        event.preventDefault();
        languageSwitcherMenu.classList.add('hidden');
        languageSwitcherButton.setAttribute('aria-expanded', 'false');
        languageSwitcherButton.focus();
      } else if (event.key === 'Home') {
        event.preventDefault();
        menuItems[0]?.focus();
      } else if (event.key === 'End') {
        event.preventDefault();
        menuItems[menuItems.length - 1]?.focus();
      }
    });
  }
</script>