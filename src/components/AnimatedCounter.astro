---
export interface Props {
  target: number;
  suffix?: string;
  prefix?: string;
  duration?: number;
}

const { target, suffix = '', prefix = '', duration = 2000 } = Astro.props;
const id = `counter-${Math.random().toString(36).substr(2, 9)}`;
---

<span id={id} class="tabular-nums" data-target={target} data-suffix={suffix} data-prefix={prefix} data-duration={duration}>
  {prefix}{target.toLocaleString()}{suffix}
</span>

<script>
  // Counter animation logic with improved state management
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px'
    };

    const animateCounter = (element: Element) => {
      const target = parseInt(element.getAttribute('data-target') || '0');
      const suffix = element.getAttribute('data-suffix') || '';
      const prefix = element.getAttribute('data-prefix') || '';
      const duration = parseInt(element.getAttribute('data-duration') || '2000');
      
      // Start from current displayed value (not always 0)
      const currentText = element.textContent || '';
      const currentMatch = currentText.match(/[\d,]+/);
      let current = currentMatch ? parseInt(currentMatch[0].replace(/,/g, '')) : target;
      
      // If already at target, reset to 0 for animation
      if (current === target) {
        current = 0;
        element.textContent = `${prefix}0${suffix}`;
      }
      
      const increment = target / (duration / 16); // 60 FPS
      
      const updateCounter = () => {
        current += increment;
        if (current < target) {
          element.textContent = `${prefix}${Math.floor(current).toLocaleString()}${suffix}`;
          requestAnimationFrame(updateCounter);
        } else {
          element.textContent = `${prefix}${target.toLocaleString()}${suffix}`;
          element.setAttribute('data-animated', 'true');
        }
      };
      
      updateCounter();
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          const hasAnimated = element.getAttribute('data-animated') === 'true';
          
          // Always animate on first view, or if enough time has passed
          if (!hasAnimated || shouldReAnimate(element)) {
            element.setAttribute('data-animated', 'false');
            animateCounter(element);
          }
        }
      });
    }, observerOptions);

    // Helper function to determine if we should re-animate
    const shouldReAnimate = (element: Element): boolean => {
      const lastAnimated = element.getAttribute('data-last-animated');
      if (!lastAnimated) return true;
      
      const timeSinceLastAnimation = Date.now() - parseInt(lastAnimated);
      return timeSinceLastAnimation > 5000; // Re-animate if more than 5 seconds have passed
    };

    // Observe all counters
    document.querySelectorAll('[data-target]').forEach(counter => {
      // Set initial timestamp
      counter.setAttribute('data-last-animated', Date.now().toString());
      observer.observe(counter);
    });

    // Handle page visibility changes to reset animation state
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        // Reset animation state when page becomes visible
        document.querySelectorAll('[data-target]').forEach(counter => {
          counter.setAttribute('data-animated', 'false');
        });
      }
    });
  });
</script>