---
/**
 * PWA-Optimized Layout
 * Minimal layout focused on audio listening experience
 * Removes marketing content and streamlines UI for PWA context
 */
import { ViewTransitions } from 'astro:transitions';
import type { Language } from '../types';
import SkipLink from '../components/SkipLink.astro';

export interface Props {
  title: string;
  description: string;
  language?: Language;
  canonical?: string;
  ogImage?: string;
  currentPath?: string;
  showHeader?: boolean;
  showFooter?: boolean;
}

const { 
  title, 
  description, 
  language = 'en', 
  canonical, 
  ogImage = '/images/og-default.jpg',
  currentPath = Astro.url.pathname,
  showHeader = false,
  showFooter = false
} = Astro.props;

const siteUrl = 'https://cro.cafe';
const fullTitle = title.includes('CRO.CAFE') ? title : `${title} | CRO.CAFE`;
---

<!DOCTYPE html>
<html lang={language} class="scroll-smooth pwa-mode" data-lang={language} data-layout="pwa">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- PWA-specific meta tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="mobile-web-app-capable" content="yes" />
    
    <!-- Canonical URL -->
    {canonical && <link rel="canonical" href={canonical} />}
    
    <!-- Minimal Open Graph for PWA -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${siteUrl}${ogImage}`} />
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/images/crocafe-logo.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    
    <!-- PWA Manifest -->
    <link rel="manifest" href={`/manifest${language === 'en' ? '' : `-${language}`}.json`} />
    <meta name="theme-color" content="#FF6B35" />
    
    <!-- Essential fonts only -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preload" href="https://fonts.gstatic.com/s/inter/v13/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2" as="font" type="font/woff2" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet" />
    
    <title>{fullTitle}</title>
    
    <!-- View Transitions for seamless navigation -->
    <ViewTransitions />
    
    <!-- PWA-optimized Styles -->
    <style is:global>
      @import '../styles/global.css';
      
      /* PWA-specific styles */
      .pwa-mode {
        /* Full viewport height accounting for status bars */
        height: 100vh;
        height: 100dvh; /* Dynamic viewport height */
      }
      
      .pwa-mode body {
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
        /* Prevent pull-to-refresh */
        overscroll-behavior-y: contain;
      }
      
      /* Hide scroll bars in PWA mode for cleaner look */
      .pwa-mode ::-webkit-scrollbar {
        width: 0;
        background: transparent;
      }
      
      /* Safe area support for notched devices */
      .pwa-safe-area {
        padding-top: env(safe-area-inset-top);
        padding-bottom: env(safe-area-inset-bottom);
        padding-left: env(safe-area-inset-left);
        padding-right: env(safe-area-inset-right);
      }
      
      /* Optimize for touch interactions */
      .pwa-mode button,
      .pwa-mode [role="button"] {
        min-height: 44px;
        min-width: 44px;
      }
    </style>
    
    <!-- PWA Theme Script -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return 'dark'; // PWA defaults to dark mode
      })();
      
      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }
      window.__theme = theme;
      
      // PWA context detection
      window.__isPWA = true;
    </script>
  </head>
  
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased pwa-safe-area">
    <SkipLink />
    
    <!-- PWA Container with optimized layout -->
    <div class="min-h-screen flex flex-col relative">
      <!-- Conditional Header for PWA -->
      {showHeader && (
        <header class="flex-shrink-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
          <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
              <div class="flex items-center">
                <img src="/images/crocafe-logo.svg" alt="CRO.CAFE" class="h-8 w-auto" />
                <span class="ml-2 text-lg font-semibold">CRO.CAFE</span>
              </div>
            </div>
          </div>
        </header>
      )}
      
      <!-- Main Content Area -->
      <main class="flex-1 overflow-auto">
        <slot />
      </main>
      
      <!-- Conditional Footer for PWA -->
      {showFooter && (
        <footer class="flex-shrink-0 bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
          <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="text-center text-sm text-gray-600 dark:text-gray-400">
              <p>&copy; 2024 CRO.CAFE. All rights reserved.</p>
            </div>
          </div>
        </footer>
      )}
    </div>
    
    
    <!-- PWA-specific functionality -->
    <script>
      // Initialize PWA context
      import('../utils/pwa-context.js').then(({ initializePWAContext }) => {
        initializePWAContext();
      });
      
      // PWA Service Worker Registration with enhanced features
      if ('serviceWorker' in navigator) {
        import('virtual:pwa-register').then(({ registerSW }) => {
          registerSW({
            immediate: true,
            onRegisteredSW(swScriptUrl) {
              console.log('PWA SW registered:', swScriptUrl);
            },
            onOfflineReady() {
              console.log('PWA ready for offline use');
              // Show offline indicator if needed
            },
            onNeedRefresh() {
              // Auto-refresh in PWA mode for better UX
              window.location.reload();
            }
          });
        });
      }
      
      // Prevent zoom on double-tap (iOS PWA)
      let lastTouchEnd = 0;
      document.addEventListener('touchend', function (event) {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
          event.preventDefault();
        }
        lastTouchEnd = now;
      }, false);
      
      // Handle keyboard media controls if available
      if ('mediaSession' in navigator) {
        // This will be integrated with the audio player
        navigator.mediaSession.setActionHandler('play', () => {
          // Will be connected to audio player store
          window.dispatchEvent(new CustomEvent('audio-play'));
        });
        
        navigator.mediaSession.setActionHandler('pause', () => {
          window.dispatchEvent(new CustomEvent('audio-pause'));
        });
        
        navigator.mediaSession.setActionHandler('previoustrack', () => {
          window.dispatchEvent(new CustomEvent('audio-previous'));
        });
        
        navigator.mediaSession.setActionHandler('nexttrack', () => {
          window.dispatchEvent(new CustomEvent('audio-next'));
        });
      }
    </script>
  </body>
</html>