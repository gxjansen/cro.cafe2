---
import type { Language } from '../types';

export interface Props {
  title: string;
  description: string;
  language?: Language;
  canonical?: string;
  hreflang?: Record<Language, string>;
  ogImage?: string;
}

const { 
  title, 
  description, 
  language = 'en', 
  canonical, 
  hreflang,
  ogImage = '/images/og-default.jpg'
} = Astro.props;

const siteUrl = 'https://cro.cafe';
const fullTitle = title.includes('CRO.CAFE') ? title : `${title} | CRO.CAFE`;
---

<!DOCTYPE html>
<html lang={language} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    {canonical && <link rel="canonical" href={canonical} />}
    
    <!-- Hreflang tags for multi-language support -->
    {hreflang && Object.entries(hreflang).map(([lang, url]) => (
      <link rel="alternate" hreflang={lang} href={url} />
    ))}
    <link rel="alternate" hreflang="x-default" href={`${siteUrl}/`} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical || `${siteUrl}${Astro.url.pathname}`} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${siteUrl}${ogImage}`} />
    <meta property="og:site_name" content="CRO.CAFE" />
    <meta property="og:locale" content={language === 'en' ? 'en_US' : language === 'nl' ? 'nl_NL' : language === 'de' ? 'de_DE' : 'es_ES'} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical || `${siteUrl}${Astro.url.pathname}`} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={`${siteUrl}${ogImage}`} />
    <meta property="twitter:site" content="@crocafe" />
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
    <link rel="icon" type="image/png" href="/icons/favicon.png" />
    <link rel="apple-touch-icon" href="/icons/apple-touch-icon.png" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- RSS Feeds: Disabled - using NocoDB data flow instead of direct Transistor feeds -->
    <!-- Future: Generate RSS feeds from NocoDB content if needed -->
    <!-- 
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE English" href="/rss/en.xml" />
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE Nederlands" href="/rss/nl.xml" />
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE Deutsch" href="/rss/de.xml" />
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE EspaÃ±ol" href="/rss/es.xml" />
    -->
    
    <title>{fullTitle}</title>
    
    <!-- Theme Script (inline to prevent flash) -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      
      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }
      window.__theme = theme;
    </script>
  </head>
  
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased">
    <div class="min-h-screen flex flex-col">
      <slot />
    </div>
    
    <!-- Analytics and external scripts would go here -->
    <script>
      // Theme toggle functionality
      function toggleTheme() {
        const element = document.documentElement;
        const isDark = element.classList.contains('dark');
        
        if (isDark) {
          element.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          element.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
      }
      
      // Make toggleTheme available globally
      window.toggleTheme = toggleTheme;
    </script>
  </body>
</html>