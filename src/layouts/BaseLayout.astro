---
import { ViewTransitions } from 'astro:transitions';
import type { Language } from '../types';
import Footer from '../components/Footer.astro';
import SkipLink from '../components/SkipLink.astro';
import SchemaWebsite from '../components/schema/SchemaWebsite.astro';
import SchemaOrganization from '../components/schema/SchemaOrganization.astro';
import SchemaBreadcrumbList from '../components/schema/SchemaBreadcrumbList.astro';
import PWAInstallPrompt from '../components/PWAInstallPrompt.astro';
import PWAUpdateNotification from '../components/PWAUpdateNotification.astro';
import BottomNav from '../components/BottomNav.astro';

export interface Props {
  title: string;
  description: string;
  language?: Language;
  canonical?: string;
  hreflang?: Record<Language, string>;
  ogImage?: string;
  currentPath?: string;
  breadcrumbs?: Array<{name: string; url: string}>;
  isHomepage?: boolean;
}

const { 
  title, 
  description, 
  language = 'en', 
  canonical, 
  hreflang,
  ogImage = '/images/og-default.jpg',
  currentPath = Astro.url.pathname,
  breadcrumbs = [],
  isHomepage = false
} = Astro.props;

const siteUrl = 'https://cro.cafe';
const fullTitle = title.includes('CRO.CAFE') ? title : `${title} | CRO.CAFE`;
---

<!DOCTYPE html>
<html lang={language} class="scroll-smooth" data-lang={language}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    {canonical && <link rel="canonical" href={canonical} />}
    
    <!-- Hreflang tags for multi-language support -->
    {hreflang && Object.entries(hreflang).map(([lang, url]) => (
      <link rel="alternate" hreflang={lang} href={url} />
    ))}
    <link rel="alternate" hreflang="x-default" href={`${siteUrl}/`} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical || `${siteUrl}${Astro.url.pathname}`} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${siteUrl}${ogImage}`} />
    <meta property="og:site_name" content="CRO.CAFE" />
    <meta property="og:locale" content={language === 'en' ? 'en_US' : language === 'nl' ? 'nl_NL' : language === 'de' ? 'de_DE' : 'es_ES'} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical || `${siteUrl}${Astro.url.pathname}`} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={`${siteUrl}${ogImage}`} />
    <meta property="twitter:site" content="@crocafe" />
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/images/crocafe-logo.svg" />
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="256x256" href="/images/crocafe-icon-256.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    
    <!-- PWA Manifest -->
    <link rel="manifest" href={`/manifest${language === 'en' ? '' : `-${language}`}.json`} />
    <meta name="theme-color" content="#FF6B35" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- Preload critical font variants -->
    <link rel="preload" href="https://fonts.gstatic.com/s/inter/v13/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="https://fonts.gstatic.com/s/poppins/v20/pxiEyp8kv8JHgFVrJJfecnFHGPc.woff2" as="font" type="font/woff2" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- RSS Feeds - Language-specific Transistor feeds -->
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE English" href="https://feeds.transistor.fm/cro-cafe" />
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE Nederlands" href="https://feeds.transistor.fm/cro-cafe-nl" />
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE Deutsch" href="https://feeds.transistor.fm/cro-cafe-deutsch" />
    <link rel="alternate" type="application/rss+xml" title="CRO.CAFE EspaÃ±ol" href="https://feeds.transistor.fm/cro-cafe-es" />
    
    <title>{fullTitle}</title>
    
    <!-- View Transitions for seamless navigation -->
    <ViewTransitions />
    
    <!-- Schema.org Structured Data -->
    <!-- Organization Schema - appears on all pages -->
    <SchemaOrganization 
      name="CRO.CAFE"
      url={siteUrl}
      logo={`${siteUrl}/images/crocafe-logo.svg`}
      description="The leading podcast for conversion rate optimization professionals. Expert insights in English, Dutch, German, and Spanish."
    />
    
    <!-- Website Schema - appears on homepage and main pages -->
    {isHomepage && (
      <SchemaWebsite 
        name="CRO.CAFE Podcast"
        url={siteUrl}
        searchUrl={`${siteUrl}/search/`}
      />
    )}
    
    <!-- Breadcrumb Schema - appears when breadcrumbs are present -->
    {breadcrumbs.length > 0 && (
      <SchemaBreadcrumbList items={breadcrumbs} language={language} />
    )}
    
    <!-- Global Styles for Accessibility -->
    <style is:global>
      @import '../styles/global.css';
    </style>
    
    <!-- Theme Script (inline to prevent flash) -->
    <script is:inline>
      // Theme initialization function
      function initTheme() {
        const theme = (() => {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'dark'; // Default to dark mode
        })();
        
        if (theme === 'light') {
          document.documentElement.classList.remove('dark');
        } else {
          document.documentElement.classList.add('dark');
        }
        window.__theme = theme;
        return theme;
      }
      
      // Initialize theme immediately
      initTheme();
      
      // Store the function globally for View Transitions
      window.__initTheme = initTheme;
    </script>
    
  </head>
  
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased">
    <SkipLink />
    <div class="min-h-screen flex flex-col">
      <slot />
      <Footer language={language} currentPath={currentPath} />
    </div>
    
    <!-- PWA Install Prompt -->
    <PWAInstallPrompt language={language} />
    
    <!-- PWA Update Notification -->
    <PWAUpdateNotification language={language} />
    
    <!-- Bottom Navigation for Mobile -->
    <BottomNav language={language} currentPath={currentPath} />
    
    <!-- Theme management and View Transitions -->
    <script>
      // Theme toggle functionality
      function toggleTheme() {
        const element = document.documentElement;
        const isDark = element.classList.contains('dark');
        
        if (isDark) {
          element.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          element.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
        
        // Update global theme reference
        window.__theme = isDark ? 'light' : 'dark';
      }
      
      // Make toggleTheme available globally
      window.toggleTheme = toggleTheme;
      
      // View Transitions event handlers for theme persistence
      document.addEventListener('astro:before-preparation', () => {
        // Store current theme state before navigation
        const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
        sessionStorage.setItem('currentTheme', currentTheme);
      });
      
      document.addEventListener('astro:after-swap', () => {
        // Restore theme state after navigation
        const savedTheme = sessionStorage.getItem('currentTheme') || localStorage.getItem('theme') || 'dark';
        
        if (savedTheme === 'light') {
          document.documentElement.classList.remove('dark');
        } else {
          document.documentElement.classList.add('dark');
        }
        
        // Re-initialize theme if the global function is available
        if (typeof window.__initTheme === 'function') {
          window.__initTheme();
        }
        
        // Clean up session storage
        sessionStorage.removeItem('currentTheme');
      });
      
      // Also handle page load for non-transition navigation
      document.addEventListener('astro:page-load', () => {
        // Ensure theme is properly set on direct page loads
        if (typeof window.__initTheme === 'function') {
          window.__initTheme();
        }
      });
      
      // Handle DOMContentLoaded as a fallback
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          if (typeof window.__initTheme === 'function') {
            window.__initTheme();
          }
        });
      }
    </script>
    
    <!-- PWA Service Worker Registration -->
    <script>
      if ('serviceWorker' in navigator) {
        import('virtual:pwa-register').then(({ registerSW }) => {
          registerSW({
            immediate: true,
            onRegisteredSW(swScriptUrl) {
              console.log('SW registered:', swScriptUrl);
            },
            onOfflineReady() {
              console.log('PWA application ready to work offline');
            },
            onNeedRefresh() {
              // Optionally prompt user to refresh for updates
              console.log('New content available, refresh to update');
            }
          });
        });
      }
    </script>
  </body>
</html>