#!/usr/bin/env node

/**
 * LinkedIn Data Sanitization Script
 *
 * This script sanitizes existing LinkedIn data in NocoDB by converting styled Unicode text
 * to regular ASCII and removing problematic characters like emojis and special symbols.
 *
 * Usage: node sanitize-linkedin-data.js
 */

import https from 'https'

// NocoDB Configuration
const NOCODB_CONFIG = {
  baseUrl: 'https://nocodb-4zvf2-u31495.vm.elestio.app',
  apiToken: process.env.NOCODB_API_TOKEN || 'noco_vj8FqbYMgKEy7YT1e0dqrQP4_tgE1e_MFEwpCw7sWfbQtgJPftSNmU0Sf_iKYSSz', // Using the working token from MCP
  projectId: 'p5mcqm7lvi5ty8i',
  tableId: 'm09pid7tgznxcqs'
}

// Helper function to convert styled Unicode text to regular ASCII
function convertStyledText(text) {
  if (!text) {return ''}

  // Comprehensive map of styled Unicode characters to regular ASCII
  const unicodeMap = {
    // Mathematical Alphanumeric Symbols - Bold (U+1D400-U+1D433)
    'ùêÄ': 'A', 'ùêÅ': 'B', 'ùêÇ': 'C', 'ùêÉ': 'D', 'ùêÑ': 'E', 'ùêÖ': 'F', 'ùêÜ': 'G', 'ùêá': 'H', 'ùêà': 'I', 'ùêâ': 'J',
    'ùêä': 'K', 'ùêã': 'L', 'ùêå': 'M', 'ùêç': 'N', 'ùêé': 'O', 'ùêè': 'P', 'ùêê': 'Q', 'ùêë': 'R', 'ùêí': 'S', 'ùêì': 'T',
    'ùêî': 'U', 'ùêï': 'V', 'ùêñ': 'W', 'ùêó': 'X', 'ùêò': 'Y', 'ùêô': 'Z',
    'ùêö': 'a', 'ùêõ': 'b', 'ùêú': 'c', 'ùêù': 'd', 'ùêû': 'e', 'ùêü': 'f', 'ùê†': 'g', 'ùê°': 'h', 'ùê¢': 'i', 'ùê£': 'j',
    'ùê§': 'k', 'ùê•': 'l', 'ùê¶': 'm', 'ùêß': 'n', 'ùê®': 'o', 'ùê©': 'p', 'ùê™': 'q', 'ùê´': 'r', 'ùê¨': 's', 'ùê≠': 't',
    'ùêÆ': 'u', 'ùêØ': 'v', 'ùê∞': 'w', 'ùê±': 'x', 'ùê≤': 'y', 'ùê≥': 'z',

    // Mathematical Alphanumeric Symbols - Sans-serif Bold (U+1D5D4-U+1D607) - Wesley's text uses these!
    'ùóî': 'A', 'ùóï': 'B', 'ùóñ': 'C', 'ùóó': 'D', 'ùóò': 'E', 'ùóô': 'F', 'ùóö': 'G', 'ùóõ': 'H', 'ùóú': 'I', 'ùóù': 'J',
    'ùóû': 'K', 'ùóü': 'L', 'ùó†': 'M', 'ùó°': 'N', 'ùó¢': 'O', 'ùó£': 'P', 'ùó§': 'Q', 'ùó•': 'R', 'ùó¶': 'S', 'ùóß': 'T',
    'ùó®': 'U', 'ùó©': 'V', 'ùó™': 'W', 'ùó´': 'X', 'ùó¨': 'Y', 'ùó≠': 'Z',
    'ùóÆ': 'a', 'ùóØ': 'b', 'ùó∞': 'c', 'ùó±': 'd', 'ùó≤': 'e', 'ùó≥': 'f', 'ùó¥': 'g', 'ùóµ': 'h', 'ùó∂': 'i', 'ùó∑': 'j',
    'ùó∏': 'k', 'ùóπ': 'l', 'ùó∫': 'm', 'ùóª': 'n', 'ùóº': 'o', 'ùóΩ': 'p', 'ùóæ': 'q', 'ùóø': 'r', 'ùòÄ': 's', 'ùòÅ': 't',
    'ùòÇ': 'u', 'ùòÉ': 'v', 'ùòÑ': 'w', 'ùòÖ': 'x', 'ùòÜ': 'y', 'ùòá': 'z',

    // Mathematical Alphanumeric Symbols - Italic (U+1D434-U+1D467)
    'ùê¥': 'A', 'ùêµ': 'B', 'ùê∂': 'C', 'ùê∑': 'D', 'ùê∏': 'E', 'ùêπ': 'F', 'ùê∫': 'G', 'ùêª': 'H', 'ùêº': 'I', 'ùêΩ': 'J',
    'ùêæ': 'K', 'ùêø': 'L', 'ùëÄ': 'M', 'ùëÅ': 'N', 'ùëÇ': 'O', 'ùëÉ': 'P', 'ùëÑ': 'Q', 'ùëÖ': 'R', 'ùëÜ': 'S', 'ùëá': 'T',
    'ùëà': 'U', 'ùëâ': 'V', 'ùëä': 'W', 'ùëã': 'X', 'ùëå': 'Y', 'ùëç': 'Z',
    'ùëé': 'a', 'ùëè': 'b', 'ùëê': 'c', 'ùëë': 'd', 'ùëí': 'e', 'ùëì': 'f', 'ùëî': 'g', 'ùò©': 'h', 'ùëñ': 'i', 'ùëó': 'j',
    'ùëò': 'k', 'ùëô': 'l', 'ùëö': 'm', 'ùëõ': 'n', 'ùëú': 'o', 'ùëù': 'p', 'ùëû': 'q', 'ùëü': 'r', 'ùë†': 's', 'ùë°': 't',
    'ùë¢': 'u', 'ùë£': 'v', 'ùë§': 'w', 'ùë•': 'x', 'ùë¶': 'y', 'ùëß': 'z',

    // Mathematical Alphanumeric Symbols - Script
    'ùíú': 'A', 'ùíû': 'C', 'ùíü': 'D', 'ùí¢': 'G', 'ùí•': 'J', 'ùí¶': 'K', 'ùí©': 'N', 'ùí™': 'O', 'ùí´': 'P',
    'ùí¨': 'Q', 'ùíÆ': 'S', 'ùíØ': 'T', 'ùí∞': 'U', 'ùí±': 'V', 'ùí≤': 'W', 'ùí≥': 'X', 'ùí¥': 'Y', 'ùíµ': 'Z'
  }

  // Replace styled characters
  let result = text
  for (const [styled, regular] of Object.entries(unicodeMap)) {
    result = result.replace(new RegExp(styled, 'g'), regular)
  }

  return result
}

// Sanitization functions for different field types
function sanitizeName(text) {
  if (!text) {return ''}

  let sanitized = convertStyledText(text)
  sanitized = sanitized.replace(/[^\p{L}\s\-'\.]/gu, ' ')
  sanitized = sanitized.replace(/\s+/g, ' ').trim()
  sanitized = sanitized.replace(/[‚åÜ‚åá‚åà‚åâ‚åä‚åã]/g, '')

  return sanitized
}

function sanitizeProfessionalField(text) {
  if (!text) {return ''}

  let sanitized = convertStyledText(text)
  sanitized = sanitized.replace(/[\u{1F300}-\u{1F9FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '')
  sanitized = sanitized.replace(/[^\p{L}\p{N}\s\-&\/@\.,;:()]/gu, ' ')
  sanitized = sanitized.replace(/\s+/g, ' ').trim()

  return sanitized
}

function sanitizeBio(text) {
  if (!text) {return ''}

  // Convert styled text FIRST - this is the key fix for Wesley's bio
  let sanitized = convertStyledText(text)

  // Be more lenient with bios - keep most punctuation but remove problematic characters
  sanitized = sanitized.replace(/[\u{1F300}-\u{1F5FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '')

  // Keep newlines and paragraph structure
  sanitized = sanitized.replace(/\r\n/g, '\n')

  // Clean up excessive whitespace while preserving paragraph breaks
  sanitized = sanitized.replace(/ +/g, ' ')
  sanitized = sanitized.replace(/\n{3,}/g, '\n\n')

  return sanitized.trim()
}

function sanitizeHeadline(text) {
  if (!text) {return ''}

  let sanitized = convertStyledText(text)
  sanitized = sanitized.replace(/[‚åÜ‚åá‚åà‚åâ‚åä‚åã]/g, '')
  sanitized = sanitized.replace(/\s+/g, ' ').trim()

  return sanitized
}

function sanitizeSkills(text) {
  if (!text) {return ''}

  let sanitized = convertStyledText(text)
  sanitized = sanitized.replace(/[^\p{L}\p{N}\s,\-+#\.]/gu, '')
  sanitized = sanitized.replace(/\s+/g, ' ').trim()

  return sanitized
}

// HTTP request helper
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let body = ''
      res.on('data', (chunk) => body += chunk)
      res.on('end', () => {
        try {
          const response = JSON.parse(body)
          resolve(response)
        } catch (e) {
          resolve(body)
        }
      })
    })

    req.on('error', reject)

    if (data) {
      req.write(JSON.stringify(data))
    }

    req.end()
  })
}

// Get all LinkedIn data from NocoDB
async function getLinkedInData() {
  const options = {
    hostname: NOCODB_CONFIG.baseUrl.replace('https://', ''),
    path: `/api/v1/db/data/v1/${NOCODB_CONFIG.projectId}/${NOCODB_CONFIG.tableId}?limit=100&where=(linkedin_full_name,isnot,null)~or(linkedin_headline,isnot,null)~or(linkedin_bio,isnot,null)`,
    method: 'GET',
    headers: {
      'xc-token': NOCODB_CONFIG.apiToken,
      'Content-Type': 'application/json'
    }
  }

  console.log('üìñ Fetching LinkedIn data from NocoDB...')
  return await makeRequest(options)
}

// Update a record in NocoDB
async function updateRecord(recordId, updates) {
  const options = {
    hostname: NOCODB_CONFIG.baseUrl.replace('https://', ''),
    path: `/api/v1/db/data/v1/${NOCODB_CONFIG.projectId}/${NOCODB_CONFIG.tableId}/${recordId}`,
    method: 'PATCH',
    headers: {
      'xc-token': NOCODB_CONFIG.apiToken,
      'Content-Type': 'application/json'
    }
  }

  return await makeRequest(options, updates)
}

// Main sanitization function
function sanitizeRecord(record) {
  const updates = {}
  let needsUpdate = false

  // Check and sanitize each field
  if (record.linkedin_full_name) {
    const sanitized = sanitizeName(record.linkedin_full_name)
    if (sanitized !== record.linkedin_full_name) {
      updates.linkedin_full_name = sanitized
      needsUpdate = true
    }
  }

  if (record.linkedin_first_name) {
    const sanitized = sanitizeName(record.linkedin_first_name)
    if (sanitized !== record.linkedin_first_name) {
      updates.linkedin_first_name = sanitized
      needsUpdate = true
    }
  }

  if (record.linkedin_headline) {
    const sanitized = sanitizeHeadline(record.linkedin_headline)
    if (sanitized !== record.linkedin_headline) {
      updates.linkedin_headline = sanitized
      needsUpdate = true
    }
  }

  if (record.linkedin_bio) {
    const sanitized = sanitizeBio(record.linkedin_bio)
    if (sanitized !== record.linkedin_bio) {
      updates.linkedin_bio = sanitized
      needsUpdate = true
    }
  }

  if (record.linkedin_current_role) {
    const sanitized = sanitizeProfessionalField(record.linkedin_current_role)
    if (sanitized !== record.linkedin_current_role) {
      updates.linkedin_current_role = sanitized
      needsUpdate = true
    }
  }

  if (record.linkedin_current_company) {
    const sanitized = sanitizeProfessionalField(record.linkedin_current_company)
    if (sanitized !== record.linkedin_current_company) {
      updates.linkedin_current_company = sanitized
      needsUpdate = true
    }
  }

  if (record.linkedin_skills) {
    const sanitized = sanitizeSkills(record.linkedin_skills)
    if (sanitized !== record.linkedin_skills) {
      updates.linkedin_skills = sanitized
      needsUpdate = true
    }
  }

  return { needsUpdate, updates }
}

// Main execution
async function main() {
  console.log('üöÄ LinkedIn Data Sanitization Script')
  console.log('=====================================\n')

  // Check configuration
  if (NOCODB_CONFIG.apiToken === 'your-nocodb-api-token-here') {
    console.error('‚ùå Error: Please update the NOCODB_CONFIG.apiToken in the script with your actual NocoDB API token.')
    console.log('\nüí° You can find your API token in NocoDB under Account Settings > API Tokens')
    process.exit(1)
  }

  try {
    // Get all records with LinkedIn data
    const response = await getLinkedInData()
    const records = response.list || response

    if (!Array.isArray(records)) {
      console.error('‚ùå Error: Could not fetch records from NocoDB')
      return
    }

    console.log(`üìä Found ${records.length} records with LinkedIn data\n`)

    let updatedCount = 0
    let processedCount = 0

    // Process each record
    for (const record of records) {
      processedCount++
      const guestName = record.Name || 'Unknown'

      console.log(`üîç Processing: ${guestName}`)

      const { needsUpdate, updates } = sanitizeRecord(record)

      if (needsUpdate) {
        try {
          await updateRecord(record.Id, updates)
          updatedCount++

          console.log(`‚úÖ Updated: ${guestName}`)

          // Show what was changed for important cases
          if (updates.linkedin_bio && record.linkedin_bio.includes('ùóõ')) {
            console.log('   üìù Bio sanitized: Converted styled Unicode text to regular text')
          }
          if (updates.linkedin_full_name) {
            console.log(`   üë§ Name sanitized: "${record.linkedin_full_name}" ‚Üí "${updates.linkedin_full_name}"`)
          }

        } catch (error) {
          console.error(`‚ùå Failed to update ${guestName}:`, error.message)
        }
      } else {
        console.log(`‚ú® Already clean: ${guestName}`)
      }
    }

    console.log('\nüìà Sanitization Complete!')
    console.log('==========================')
    console.log(`üìä Records processed: ${processedCount}`)
    console.log(`‚úÖ Records updated: ${updatedCount}`)
    console.log(`‚ú® Records already clean: ${processedCount - updatedCount}`)

    if (updatedCount > 0) {
      console.log('\nüéâ Success! Your LinkedIn data has been sanitized.')
      console.log('   - Styled Unicode text converted to regular ASCII')
      console.log('   - Emojis and special symbols removed from names')
      console.log('   - Professional appearance maintained')
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message)
  }
}

// Test function to show what Wesley's bio would look like after sanitization
function testWesleyBio() {
  const wesleyBio = 'ùóõùóºùó≤ùòÉùó≤ùó≤ùóπ ùóºùó∫ùòáùó≤ùòÅ ùòÇùó∂ùòÅ ùó∑ùó≤ ùòÑùó≤ùóØùòÄùóµùóºùóΩ ùóπùóÆùóÆùòÅ ùó∑ùó∂ùó∑ ùóπùó∂ùó¥ùó¥ùó≤ùóª?'
  const sanitized = sanitizeBio(wesleyBio)

  console.log('üß™ Test - Wesley\'s Bio Sanitization:')
  console.log('Before:', wesleyBio)
  console.log('After: ', sanitized)
  console.log('')
}

// Run the script
// Show test first
testWesleyBio()

// Run main script
main().catch(console.error)

export {
  convertStyledText,
  sanitizeName,
  sanitizeProfessionalField,
  sanitizeBio,
  sanitizeHeadline,
  sanitizeSkills
}